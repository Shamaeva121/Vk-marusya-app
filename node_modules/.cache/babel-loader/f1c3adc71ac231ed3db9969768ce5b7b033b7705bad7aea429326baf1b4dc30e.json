{"ast":null,"code":"import _objectSpread from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport ue from \"mux-embed\";\nimport Ze from \"hls.js\";\nvar g = Ze;\nvar C = {\n    VIDEO: \"video\",\n    THUMBNAIL: \"thumbnail\",\n    STORYBOARD: \"storyboard\",\n    DRM: \"drm\"\n  },\n  D = {\n    NOT_AN_ERROR: 0,\n    NETWORK_OFFLINE: 2000002,\n    NETWORK_UNKNOWN_ERROR: 2e6,\n    NETWORK_NO_STATUS: 2000001,\n    NETWORK_INVALID_URL: 24e5,\n    NETWORK_NOT_FOUND: 2404e3,\n    NETWORK_NOT_READY: 2412e3,\n    NETWORK_GENERIC_SERVER_FAIL: 25e5,\n    NETWORK_TOKEN_MISSING: 2403201,\n    NETWORK_TOKEN_MALFORMED: 2412202,\n    NETWORK_TOKEN_EXPIRED: 2403210,\n    NETWORK_TOKEN_AUD_MISSING: 2403221,\n    NETWORK_TOKEN_AUD_MISMATCH: 2403222,\n    NETWORK_TOKEN_SUB_MISMATCH: 2403232,\n    ENCRYPTED_ERROR: 5e6,\n    ENCRYPTED_UNSUPPORTED_KEY_SYSTEM: 5000001,\n    ENCRYPTED_GENERATE_REQUEST_FAILED: 5000002,\n    ENCRYPTED_UPDATE_LICENSE_FAILED: 5000003,\n    ENCRYPTED_UPDATE_SERVER_CERT_FAILED: 5000004,\n    ENCRYPTED_CDM_ERROR: 5000005,\n    ENCRYPTED_OUTPUT_RESTRICTED: 5000006,\n    ENCRYPTED_MISSING_TOKEN: 5000002\n  },\n  V = e => e === C.VIDEO ? \"playback\" : e,\n  L = class L extends Error {\n    constructor(t) {\n      let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : L.MEDIA_ERR_CUSTOM;\n      let n = arguments.length > 2 ? arguments[2] : undefined;\n      let o = arguments.length > 3 ? arguments[3] : undefined;\n      var a;\n      super(t), this.name = \"MediaError\", this.code = r, this.context = o, this.fatal = n != null ? n : r >= L.MEDIA_ERR_NETWORK && r <= L.MEDIA_ERR_ENCRYPTED, this.message || (this.message = (a = L.defaultMessages[this.code]) != null ? a : \"\");\n    }\n  };\nL.MEDIA_ERR_ABORTED = 1, L.MEDIA_ERR_NETWORK = 2, L.MEDIA_ERR_DECODE = 3, L.MEDIA_ERR_SRC_NOT_SUPPORTED = 4, L.MEDIA_ERR_ENCRYPTED = 5, L.MEDIA_ERR_CUSTOM = 100, L.defaultMessages = {\n  1: \"You aborted the media playback\",\n  2: \"A network error caused the media download to fail.\",\n  3: \"A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.\",\n  4: \"An unsupported error occurred. The server or network failed, or your browser does not support this format.\",\n  5: \"The media is encrypted and there are no keys to decrypt it.\"\n};\nvar f = L;\nvar et = e => e == null,\n  O = (e, t) => et(t) ? !1 : e in t,\n  K = {\n    ANY: \"any\",\n    MUTED: \"muted\"\n  },\n  _ = {\n    ON_DEMAND: \"on-demand\",\n    LIVE: \"live\",\n    UNKNOWN: \"unknown\"\n  },\n  X = {\n    MSE: \"mse\",\n    NATIVE: \"native\"\n  },\n  S = {\n    HEADER: \"header\",\n    QUERY: \"query\",\n    NONE: \"none\"\n  },\n  jt = Object.values(S),\n  A = {\n    M3U8: \"application/vnd.apple.mpegurl\",\n    MP4: \"video/mp4\"\n  },\n  W = {\n    HLS: A.M3U8\n  },\n  Jt = Object.keys(W),\n  qt = [...Object.values(A), \"hls\", \"HLS\"],\n  Gt = {\n    upTo720p: \"720p\",\n    upTo1080p: \"1080p\",\n    upTo1440p: \"1440p\",\n    upTo2160p: \"2160p\"\n  },\n  Xt = {\n    noLessThan480p: \"480p\",\n    noLessThan540p: \"540p\",\n    noLessThan720p: \"720p\",\n    noLessThan1080p: \"1080p\",\n    noLessThan1440p: \"1440p\",\n    noLessThan2160p: \"2160p\"\n  },\n  zt = {\n    DESCENDING: \"desc\"\n  };\nvar tt = \"en\",\n  Y = {\n    code: tt\n  };\nvar v = function (e, t, r, n) {\n  let o = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : e;\n  o.addEventListener(t, r, n), e.addEventListener(\"teardown\", () => {\n    o.removeEventListener(t, r);\n  }, {\n    once: !0\n  });\n};\nfunction fe(e, t, r) {\n  t && r > t && (r = t);\n  for (let n = 0; n < e.length; n++) if (e.start(n) <= r && e.end(n) >= r) return !0;\n  return !1;\n}\nvar F = e => {\n    let t = e.indexOf(\"?\");\n    if (t < 0) return [e];\n    let r = e.slice(0, t),\n      n = e.slice(t);\n    return [r, n];\n  },\n  U = e => {\n    let {\n      type: t\n    } = e;\n    if (t) {\n      let r = t.toUpperCase();\n      return O(r, W) ? W[r] : t;\n    }\n    return rt(e);\n  },\n  Q = e => e === \"VOD\" ? _.ON_DEMAND : _.LIVE,\n  Z = e => e === \"EVENT\" ? Number.POSITIVE_INFINITY : e === \"VOD\" ? Number.NaN : 0,\n  rt = e => {\n    let {\n      src: t\n    } = e;\n    if (!t) return \"\";\n    let r = \"\";\n    try {\n      r = new URL(t).pathname;\n    } catch (_unused) {\n      console.error(\"invalid url\");\n    }\n    let n = r.lastIndexOf(\".\");\n    if (n < 0) return ot(e) ? A.M3U8 : \"\";\n    let a = r.slice(n + 1).toUpperCase();\n    return O(a, A) ? A[a] : \"\";\n  },\n  nt = \"mux.com\",\n  ot = _ref => {\n    let {\n      src: e,\n      customDomain: t = nt\n    } = _ref;\n    let r;\n    try {\n      r = new URL(\"\".concat(e));\n    } catch (_unused2) {\n      return !1;\n    }\n    let n = r.protocol === \"https:\",\n      o = r.hostname === \"stream.\".concat(t).toLowerCase(),\n      a = r.pathname.split(\"/\"),\n      i = a.length === 2,\n      c = !(a != null && a[1].includes(\".\"));\n    return n && o && i && c;\n  },\n  ee = e => {\n    let t = (e != null ? e : \"\").split(\".\")[1];\n    if (t) try {\n      let r = t.replace(/-/g, \"+\").replace(/_/g, \"/\"),\n        n = decodeURIComponent(atob(r).split(\"\").map(function (o) {\n          return \"%\" + (\"00\" + o.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n      return JSON.parse(n);\n    } catch (_unused3) {\n      return;\n    }\n  },\n  Te = function (_ref2) {\n    let {\n      exp: e\n    } = _ref2;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n    return !e || e * 1e3 < t;\n  },\n  ye = (_ref3, t) => {\n    let {\n      sub: e\n    } = _ref3;\n    return e !== t;\n  },\n  me = (_ref4, t) => {\n    let {\n      aud: e\n    } = _ref4;\n    return !e;\n  },\n  Ee = (_ref5, t) => {\n    let {\n      aud: e\n    } = _ref5;\n    return e !== t;\n  },\n  ge = \"en\";\nfunction x(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n  var o, a;\n  let r = t && (a = (o = Y) == null ? void 0 : o[e]) != null ? a : e,\n    n = t ? Y.code : ge;\n  return new z(r, n);\n}\nvar z = class {\n  constructor(t) {\n    let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n => (n = Y) != null ? n : ge)();\n    this.message = t, this.locale = r;\n  }\n  format(t) {\n    return this.message.replace(/\\{(\\w+)\\}/g, (r, n) => {\n      var o;\n      return (o = t[n]) != null ? o : \"\";\n    });\n  }\n  toString() {\n    return this.message;\n  }\n};\nvar at = Object.values(K),\n  Me = e => typeof e == \"boolean\" || typeof e == \"string\" && at.includes(e),\n  xe = (e, t, r) => {\n    let {\n        autoplay: n\n      } = e,\n      o = !1,\n      a = !1,\n      i = Me(n) ? n : !!n,\n      c = () => {\n        o || v(t, \"playing\", () => {\n          o = !0;\n        }, {\n          once: !0\n        });\n      };\n    if (c(), v(t, \"loadstart\", () => {\n      o = !1, c(), te(t, i);\n    }, {\n      once: !0\n    }), v(t, \"loadstart\", () => {\n      r || (e.streamType && e.streamType !== _.UNKNOWN ? a = e.streamType === _.LIVE : a = !Number.isFinite(t.duration)), te(t, i);\n    }, {\n      once: !0\n    }), r && r.once(g.Events.LEVEL_LOADED, (u, s) => {\n      var p;\n      e.streamType && e.streamType !== _.UNKNOWN ? a = e.streamType === _.LIVE : a = (p = s.details.live) != null ? p : !1;\n    }), !i) {\n      let u = () => {\n        !a || Number.isFinite(e.startTime) || (r != null && r.liveSyncPosition ? t.currentTime = r.liveSyncPosition : Number.isFinite(t.seekable.end(0)) && (t.currentTime = t.seekable.end(0)));\n      };\n      r && v(t, \"play\", () => {\n        t.preload === \"metadata\" ? r.once(g.Events.LEVEL_UPDATED, u) : u();\n      }, {\n        once: !0\n      });\n    }\n    return u => {\n      o || (i = Me(u) ? u : !!u, te(t, i));\n    };\n  },\n  te = (e, t) => {\n    if (!t) return;\n    let r = e.muted,\n      n = () => e.muted = r;\n    switch (t) {\n      case K.ANY:\n        e.play().catch(() => {\n          e.muted = !0, e.play().catch(n);\n        });\n        break;\n      case K.MUTED:\n        e.muted = !0, e.play().catch(n);\n        break;\n      default:\n        e.play().catch(() => {});\n        break;\n    }\n  };\nvar Re = (_ref6, r, n) => {\n  let {\n    preload: e,\n    src: t\n  } = _ref6;\n  let o = p => {\n    p != null && [\"\", \"none\", \"metadata\", \"auto\"].includes(p) ? r.setAttribute(\"preload\", p) : r.removeAttribute(\"preload\");\n  };\n  if (!n) return o(e), o;\n  let a = !1,\n    i = !1,\n    c = n.config.maxBufferLength,\n    d = n.config.maxBufferSize,\n    u = p => {\n      o(p);\n      let l = p != null ? p : r.preload;\n      i || l === \"none\" || (l === \"metadata\" ? (n.config.maxBufferLength = 1, n.config.maxBufferSize = 1) : (n.config.maxBufferLength = c, n.config.maxBufferSize = d), s());\n    },\n    s = () => {\n      !a && t && (a = !0, n.loadSource(t));\n    };\n  return v(r, \"play\", () => {\n    i = !0, n.config.maxBufferLength = c, n.config.maxBufferSize = d, s();\n  }, {\n    once: !0\n  }), u(e), u;\n};\nfunction De(e, t) {\n  var c;\n  if (!(\"videoTracks\" in e)) return;\n  let r = new WeakMap();\n  t.on(g.Events.MANIFEST_PARSED, function (d, u) {\n    i();\n    let s = e.addVideoTrack(\"main\");\n    s.selected = !0;\n    for (let [p, l] of u.levels.entries()) {\n      let T = s.addRendition(l.url[0], l.width, l.height, l.videoCodec, l.bitrate);\n      r.set(l, \"\".concat(p)), T.id = \"\".concat(p);\n    }\n  }), t.on(g.Events.AUDIO_TRACKS_UPDATED, function (d, u) {\n    a();\n    for (let s of u.audioTracks) {\n      let p = s.default ? \"main\" : \"alternative\",\n        l = e.addAudioTrack(p, s.name, s.lang);\n      l.id = \"\".concat(s.id), s.default && (l.enabled = !0);\n    }\n  }), e.audioTracks.addEventListener(\"change\", () => {\n    var s;\n    let d = +((s = [...e.audioTracks].find(p => p.enabled)) == null ? void 0 : s.id),\n      u = t.audioTracks.map(p => p.id);\n    d != t.audioTrack && u.includes(d) && (t.audioTrack = d);\n  }), t.on(g.Events.LEVELS_UPDATED, function (d, u) {\n    var l;\n    let s = e.videoTracks[(l = e.videoTracks.selectedIndex) != null ? l : 0];\n    if (!s) return;\n    let p = u.levels.map(T => r.get(T));\n    for (let T of e.videoRenditions) T.id && !p.includes(T.id) && s.removeRendition(T);\n  });\n  let n = d => {\n    let u = d.target.selectedIndex;\n    u != t.nextLevel && (t.nextLevel = u);\n  };\n  (c = e.videoRenditions) == null || c.addEventListener(\"change\", n);\n  let o = () => {\n      for (let d of e.videoTracks) e.removeVideoTrack(d);\n    },\n    a = () => {\n      for (let d of e.audioTracks) e.removeAudioTrack(d);\n    },\n    i = () => {\n      o(), a();\n    };\n  t.once(g.Events.DESTROYING, i);\n}\nvar re = e => \"time\" in e ? e.time : e.startTime;\nfunction be(e, t) {\n  t.on(g.Events.NON_NATIVE_TEXT_TRACKS_FOUND, (o, _ref7) => {\n    let {\n      tracks: a\n    } = _ref7;\n    a.forEach(i => {\n      var s, p;\n      let c = (s = i.subtitleTrack) != null ? s : i.closedCaptions,\n        d = t.subtitleTracks.findIndex(_ref8 => {\n          let {\n            lang: l,\n            name: T,\n            type: m\n          } = _ref8;\n          return l == (c == null ? void 0 : c.lang) && T === i.label && m.toLowerCase() === i.kind;\n        }),\n        u = ((p = i._id) != null ? p : i.default) ? \"default\" : \"\".concat(i.kind).concat(d);\n      ne(e, i.kind, i.label, c == null ? void 0 : c.lang, u, i.default);\n    });\n  });\n  let r = () => {\n    if (!t.subtitleTracks.length) return;\n    let o = Array.from(e.textTracks).find(c => c.id && c.mode === \"showing\" && [\"subtitles\", \"captions\"].includes(c.kind));\n    if (!o) return;\n    let a = t.subtitleTracks[t.subtitleTrack],\n      i = a ? a.default ? \"default\" : \"\".concat(t.subtitleTracks[t.subtitleTrack].type.toLowerCase()).concat(t.subtitleTrack) : void 0;\n    if (t.subtitleTrack < 0 || (o == null ? void 0 : o.id) !== i) {\n      let c = t.subtitleTracks.findIndex(_ref9 => {\n        let {\n          lang: d,\n          name: u,\n          type: s,\n          default: p\n        } = _ref9;\n        return o.id === \"default\" && p || d == o.language && u === o.label && s.toLowerCase() === o.kind;\n      });\n      t.subtitleTrack = c;\n    }\n    (o == null ? void 0 : o.id) === i && o.cues && Array.from(o.cues).forEach(c => {\n      o.addCue(c);\n    });\n  };\n  e.textTracks.addEventListener(\"change\", r), t.on(g.Events.CUES_PARSED, (o, _ref0) => {\n    let {\n      track: a,\n      cues: i\n    } = _ref0;\n    let c = e.textTracks.getTrackById(a);\n    if (!c) return;\n    let d = c.mode === \"disabled\";\n    d && (c.mode = \"hidden\"), i.forEach(u => {\n      var s;\n      (s = c.cues) != null && s.getCueById(u.id) || c.addCue(u);\n    }), d && (c.mode = \"disabled\");\n  }), t.once(g.Events.DESTROYING, () => {\n    e.textTracks.removeEventListener(\"change\", r), e.querySelectorAll(\"track[data-removeondestroy]\").forEach(a => {\n      a.remove();\n    });\n  });\n  let n = () => {\n    Array.from(e.textTracks).forEach(o => {\n      var a, i;\n      if (![\"subtitles\", \"caption\"].includes(o.kind) && (o.label === \"thumbnails\" || o.kind === \"chapters\")) {\n        if (!((a = o.cues) != null && a.length)) {\n          let c = \"track\";\n          o.kind && (c += \"[kind=\\\"\".concat(o.kind, \"\\\"]\")), o.label && (c += \"[label=\\\"\".concat(o.label, \"\\\"]\"));\n          let d = e.querySelector(c),\n            u = (i = d == null ? void 0 : d.getAttribute(\"src\")) != null ? i : \"\";\n          d == null || d.removeAttribute(\"src\"), setTimeout(() => {\n            d == null || d.setAttribute(\"src\", u);\n          }, 0);\n        }\n        o.mode !== \"hidden\" && (o.mode = \"hidden\");\n      }\n    });\n  };\n  t.once(g.Events.MANIFEST_LOADED, n), t.once(g.Events.MEDIA_ATTACHED, n);\n}\nfunction ne(e, t, r, n, o, a) {\n  let i = document.createElement(\"track\");\n  return i.kind = t, i.label = r, n && (i.srclang = n), o && (i.id = o), a && (i.default = !0), i.track.mode = [\"subtitles\", \"captions\"].includes(t) ? \"disabled\" : \"hidden\", i.setAttribute(\"data-removeondestroy\", \"\"), e.append(i), i.track;\n}\nfunction st(e, t) {\n  let r = Array.prototype.find.call(e.querySelectorAll(\"track\"), n => n.track === t);\n  r == null || r.remove();\n}\nfunction w(e, t, r) {\n  var n;\n  return (n = Array.from(e.querySelectorAll(\"track\")).find(o => o.track.label === t && o.track.kind === r)) == null ? void 0 : n.track;\n}\nasync function Ce(e, t, r, n) {\n  let o = w(e, r, n);\n  return o || (o = ne(e, n, r), o.mode = \"hidden\", await new Promise(a => setTimeout(() => a(void 0), 0))), o.mode !== \"hidden\" && (o.mode = \"hidden\"), [...t].sort((a, i) => re(i) - re(a)).forEach(a => {\n    var d, u;\n    let i = a.value,\n      c = re(a);\n    if (\"endTime\" in a && a.endTime != null) o == null || o.addCue(new VTTCue(c, a.endTime, n === \"chapters\" ? i : JSON.stringify(i != null ? i : null)));else {\n      let s = Array.prototype.findIndex.call(o == null ? void 0 : o.cues, m => m.startTime >= c),\n        p = (d = o == null ? void 0 : o.cues) == null ? void 0 : d[s],\n        l = p ? p.startTime : Number.isFinite(e.duration) ? e.duration : Number.MAX_SAFE_INTEGER,\n        T = (u = o == null ? void 0 : o.cues) == null ? void 0 : u[s - 1];\n      T && (T.endTime = c), o == null || o.addCue(new VTTCue(c, l, n === \"chapters\" ? i : JSON.stringify(i != null ? i : null)));\n    }\n  }), e.textTracks.dispatchEvent(new Event(\"change\", {\n    bubbles: !0,\n    composed: !0\n  })), o;\n}\nvar oe = \"cuepoints\",\n  ve = Object.freeze({\n    label: oe\n  });\nasync function Pe(e, t) {\n  let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ve;\n  return Ce(e, t, r.label, \"metadata\");\n}\nvar $ = e => ({\n  time: e.startTime,\n  value: JSON.parse(e.text)\n});\nfunction it(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    label: oe\n  };\n  let r = w(e, t.label, \"metadata\");\n  return r != null && r.cues ? Array.from(r.cues, n => $(n)) : [];\n}\nfunction _e(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    label: oe\n  };\n  var a, i;\n  let r = w(e, t.label, \"metadata\");\n  if (!((a = r == null ? void 0 : r.activeCues) != null && a.length)) return;\n  if (r.activeCues.length === 1) return $(r.activeCues[0]);\n  let {\n      currentTime: n\n    } = e,\n    o = Array.prototype.find.call((i = r.activeCues) != null ? i : [], _ref1 => {\n      let {\n        startTime: c,\n        endTime: d\n      } = _ref1;\n      return c <= n && d > n;\n    });\n  return $(o || r.activeCues[0]);\n}\nasync function ke(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ve;\n  return new Promise(r => {\n    v(e, \"loadstart\", async () => {\n      let n = await Pe(e, [], t);\n      v(e, \"cuechange\", () => {\n        let o = _e(e);\n        if (o) {\n          let a = new CustomEvent(\"cuepointchange\", {\n            composed: !0,\n            bubbles: !0,\n            detail: o\n          });\n          e.dispatchEvent(a);\n        }\n      }, {}, n), r(n);\n    });\n  });\n}\nvar ae = \"chapters\",\n  he = Object.freeze({\n    label: ae\n  }),\n  B = e => ({\n    startTime: e.startTime,\n    endTime: e.endTime,\n    value: e.text\n  });\nasync function Le(e, t) {\n  let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : he;\n  return Ce(e, t, r.label, \"chapters\");\n}\nfunction ct(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    label: ae\n  };\n  var n;\n  let r = w(e, t.label, \"chapters\");\n  return (n = r == null ? void 0 : r.cues) != null && n.length ? Array.from(r.cues, o => B(o)) : [];\n}\nfunction Ne(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    label: ae\n  };\n  var a, i;\n  let r = w(e, t.label, \"chapters\");\n  if (!((a = r == null ? void 0 : r.activeCues) != null && a.length)) return;\n  if (r.activeCues.length === 1) return B(r.activeCues[0]);\n  let {\n      currentTime: n\n    } = e,\n    o = Array.prototype.find.call((i = r.activeCues) != null ? i : [], _ref10 => {\n      let {\n        startTime: c,\n        endTime: d\n      } = _ref10;\n      return c <= n && d > n;\n    });\n  return B(o || r.activeCues[0]);\n}\nasync function Ae(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : he;\n  return new Promise(r => {\n    v(e, \"loadstart\", async () => {\n      let n = await Le(e, [], t);\n      v(e, \"cuechange\", () => {\n        let o = Ne(e);\n        if (o) {\n          let a = new CustomEvent(\"chapterchange\", {\n            composed: !0,\n            bubbles: !0,\n            detail: o\n          });\n          e.dispatchEvent(a);\n        }\n      }, {}, n), r(n);\n    });\n  });\n}\nfunction ut(e, t) {\n  if (t) {\n    let r = t.playingDate;\n    if (r != null) return new Date(r.getTime() - e.currentTime * 1e3);\n  }\n  return typeof e.getStartDate == \"function\" ? e.getStartDate() : new Date(NaN);\n}\nfunction dt(e, t) {\n  if (t && t.playingDate) return t.playingDate;\n  if (typeof e.getStartDate == \"function\") {\n    let r = e.getStartDate();\n    return new Date(r.getTime() + e.currentTime * 1e3);\n  }\n  return new Date(NaN);\n}\nvar se = {\n    VIDEO: \"v\",\n    THUMBNAIL: \"t\",\n    STORYBOARD: \"s\",\n    DRM: \"d\"\n  },\n  lt = e => {\n    if (e === C.VIDEO) return se.VIDEO;\n    if (e === C.DRM) return se.DRM;\n  },\n  pt = (e, t) => {\n    var o, a;\n    let r = V(e),\n      n = \"\".concat(r, \"Token\");\n    return (o = t.tokens) != null && o[r] ? (a = t.tokens) == null ? void 0 : a[r] : O(n, t) ? t[n] : void 0;\n  },\n  H = function (e, t, r, n) {\n    let o = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;\n    let a = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !(i => (i = globalThis.navigator) == null ? void 0 : i.onLine)();\n    var M, h;\n    if (a) {\n      let E = x(\"Your device appears to be offline\", o),\n        b = void 0,\n        y = f.MEDIA_ERR_NETWORK,\n        k = new f(E, y, !1, b);\n      return k.errorCategory = t, k.muxCode = D.NETWORK_OFFLINE, k.data = e, k;\n    }\n    let c = \"status\" in e ? e.status : e.code,\n      d = Date.now(),\n      u = f.MEDIA_ERR_NETWORK;\n    if (c === 200) return;\n    let s = V(t),\n      p = pt(t, r),\n      l = lt(t),\n      [T] = F((M = r.playbackId) != null ? M : \"\");\n    if (!c || !T) return;\n    let m = ee(p);\n    if (p && !m) {\n      let E = x(\"The {tokenNamePrefix}-token provided is invalid or malformed.\", o).format({\n          tokenNamePrefix: s\n        }),\n        b = x(\"Compact JWT string: {token}\", o).format({\n          token: p\n        }),\n        y = new f(E, u, !0, b);\n      return y.errorCategory = t, y.muxCode = D.NETWORK_TOKEN_MALFORMED, y.data = e, y;\n    }\n    if (c >= 500) {\n      let E = new f(\"\", u, n != null ? n : !0);\n      return E.errorCategory = t, E.muxCode = D.NETWORK_UNKNOWN_ERROR, E;\n    }\n    if (c === 403) if (m) {\n      if (Te(m, d)) {\n        let E = {\n            timeStyle: \"medium\",\n            dateStyle: \"medium\"\n          },\n          b = x(\"The video\\u2019s secured {tokenNamePrefix}-token has expired.\", o).format({\n            tokenNamePrefix: s\n          }),\n          y = x(\"Expired at: {expiredDate}. Current time: {currentDate}.\", o).format({\n            expiredDate: new Intl.DateTimeFormat(\"en\", E).format((h = m.exp) != null ? h : 0 * 1e3),\n            currentDate: new Intl.DateTimeFormat(\"en\", E).format(d)\n          }),\n          k = new f(b, u, !0, y);\n        return k.errorCategory = t, k.muxCode = D.NETWORK_TOKEN_EXPIRED, k.data = e, k;\n      }\n      if (ye(m, T)) {\n        let E = x(\"The video\\u2019s playback ID does not match the one encoded in the {tokenNamePrefix}-token.\", o).format({\n            tokenNamePrefix: s\n          }),\n          b = x(\"Specified playback ID: {playbackId} and the playback ID encoded in the {tokenNamePrefix}-token: {tokenPlaybackId}\", o).format({\n            tokenNamePrefix: s,\n            playbackId: T,\n            tokenPlaybackId: m.sub\n          }),\n          y = new f(E, u, !0, b);\n        return y.errorCategory = t, y.muxCode = D.NETWORK_TOKEN_SUB_MISMATCH, y.data = e, y;\n      }\n      if (me(m, l)) {\n        let E = x(\"The {tokenNamePrefix}-token is formatted with incorrect information.\", o).format({\n            tokenNamePrefix: s\n          }),\n          b = x(\"The {tokenNamePrefix}-token has no aud value. aud value should be {expectedAud}.\", o).format({\n            tokenNamePrefix: s,\n            expectedAud: l\n          }),\n          y = new f(E, u, !0, b);\n        return y.errorCategory = t, y.muxCode = D.NETWORK_TOKEN_AUD_MISSING, y.data = e, y;\n      }\n      if (Ee(m, l)) {\n        let E = x(\"The {tokenNamePrefix}-token is formatted with incorrect information.\", o).format({\n            tokenNamePrefix: s\n          }),\n          b = x(\"The {tokenNamePrefix}-token has an incorrect aud value: {aud}. aud value should be {expectedAud}.\", o).format({\n            tokenNamePrefix: s,\n            expectedAud: l,\n            aud: m.aud\n          }),\n          y = new f(E, u, !0, b);\n        return y.errorCategory = t, y.muxCode = D.NETWORK_TOKEN_AUD_MISMATCH, y.data = e, y;\n      }\n    } else {\n      let E = x(\"Authorization error trying to access this {category} URL. If this is a signed URL, you might need to provide a {tokenNamePrefix}-token.\", o).format({\n          tokenNamePrefix: s,\n          category: t\n        }),\n        b = x(\"Specified playback ID: {playbackId}\", o).format({\n          playbackId: T\n        }),\n        y = new f(E, u, n != null ? n : !0, b);\n      return y.errorCategory = t, y.muxCode = D.NETWORK_TOKEN_MISSING, y.data = e, y;\n    }\n    if (c === 412) {\n      let E = x(\"This playback-id may belong to a live stream that is not currently active or an asset that is not ready.\", o),\n        b = x(\"Specified playback ID: {playbackId}\", o).format({\n          playbackId: T\n        }),\n        y = new f(E, u, n != null ? n : !0, b);\n      return y.errorCategory = t, y.muxCode = D.NETWORK_NOT_READY, y.streamType = r.streamType === _.LIVE ? \"live\" : r.streamType === _.ON_DEMAND ? \"on-demand\" : \"unknown\", y.data = e, y;\n    }\n    if (c === 404) {\n      let E = x(\"This URL or playback-id does not exist. You may have used an Asset ID or an ID from a different resource.\", o),\n        b = x(\"Specified playback ID: {playbackId}\", o).format({\n          playbackId: T\n        }),\n        y = new f(E, u, n != null ? n : !0, b);\n      return y.errorCategory = t, y.muxCode = D.NETWORK_NOT_FOUND, y.data = e, y;\n    }\n    if (c === 400) {\n      let E = x(\"The URL or playback-id was invalid. You may have used an invalid value as a playback-id.\"),\n        b = x(\"Specified playback ID: {playbackId}\", o).format({\n          playbackId: T\n        }),\n        y = new f(E, u, n != null ? n : !0, b);\n      return y.errorCategory = t, y.muxCode = D.NETWORK_INVALID_URL, y.data = e, y;\n    }\n    let R = new f(\"\", u, n != null ? n : !0);\n    return R.errorCategory = t, R.muxCode = D.NETWORK_UNKNOWN_ERROR, R.data = e, R;\n  };\nvar Ie = g.DefaultConfig.capLevelController,\n  j = class j extends Ie {\n    constructor(t) {\n      super(t);\n    }\n    get levels() {\n      var t;\n      return (t = this.hls.levels) != null ? t : [];\n    }\n    getValidLevels(t) {\n      return this.levels.filter((r, n) => this.isLevelAllowed(r) && n <= t);\n    }\n    getMaxLevel(t) {\n      let r = super.getMaxLevel(t),\n        n = this.getValidLevels(t);\n      if (!n[r]) return r;\n      let o = Math.min(n[r].width, n[r].height),\n        a = j.minMaxResolution;\n      return o >= a ? r : Ie.getMaxLevelByMediaSize(n, a * (16 / 9), a);\n    }\n  };\nj.minMaxResolution = 720;\nvar ie = j,\n  Se = ie;\nvar J = {\n    FAIRPLAY: \"fairplay\",\n    PLAYREADY: \"playready\",\n    WIDEVINE: \"widevine\"\n  },\n  ft = e => {\n    if (e.includes(\"fps\")) return J.FAIRPLAY;\n    if (e.includes(\"playready\")) return J.PLAYREADY;\n    if (e.includes(\"widevine\")) return J.WIDEVINE;\n  },\n  Tt = e => {\n    let t = e.split(\"\\n\").find((r, n, o) => n && o[n - 1].startsWith(\"#EXT-X-STREAM-INF\"));\n    return fetch(t).then(r => r.status !== 200 ? Promise.reject(r) : r.text());\n  },\n  yt = e => {\n    let t = e.split(\"\\n\").filter(n => n.startsWith(\"#EXT-X-SESSION-DATA\"));\n    if (!t.length) return {};\n    let r = {};\n    for (let n of t) {\n      let o = Et(n),\n        a = o[\"DATA-ID\"];\n      a && (r[a] = _objectSpread({}, o));\n    }\n    return {\n      sessionData: r\n    };\n  },\n  mt = /([A-Z0-9-]+)=\"?(.*?)\"?(?:,|$)/g;\nfunction Et(e) {\n  let t = [...e.matchAll(mt)];\n  return Object.fromEntries(t.map(_ref11 => {\n    let [, r, n] = _ref11;\n    return [r, n];\n  }));\n}\nvar gt = e => {\n    var c, d, u;\n    let t = e.split(\"\\n\"),\n      n = (d = ((c = t.find(s => s.startsWith(\"#EXT-X-PLAYLIST-TYPE\"))) != null ? c : \"\").split(\":\")[1]) == null ? void 0 : d.trim(),\n      o = Q(n),\n      a = Z(n),\n      i;\n    if (o === _.LIVE) {\n      let s = t.find(l => l.startsWith(\"#EXT-X-PART-INF\"));\n      if (!!s) i = +s.split(\":\")[1].split(\"=\")[1] * 2;else {\n        let l = t.find(R => R.startsWith(\"#EXT-X-TARGETDURATION\")),\n          T = (u = l == null ? void 0 : l.split(\":\")) == null ? void 0 : u[1];\n        i = +(T != null ? T : 6) * 3;\n      }\n    }\n    return {\n      streamType: o,\n      targetLiveWindow: a,\n      liveEdgeStartOffset: i\n    };\n  },\n  Mt = async (e, t) => {\n    if (t === A.MP4) return {\n      streamType: _.ON_DEMAND,\n      targetLiveWindow: Number.NaN,\n      liveEdgeStartOffset: void 0,\n      sessionData: void 0\n    };\n    if (t === A.M3U8) {\n      let r = await fetch(e);\n      if (!r.ok) return Promise.reject(r);\n      let n = await r.text(),\n        o = await Tt(n);\n      return _objectSpread(_objectSpread({}, yt(n)), gt(o));\n    }\n    return console.error(\"Media type \".concat(t, \" is an unrecognized or unsupported type for src \").concat(e, \".\")), {\n      streamType: void 0,\n      targetLiveWindow: void 0,\n      liveEdgeStartOffset: void 0,\n      sessionData: void 0\n    };\n  },\n  xt = async function (e, t) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : U({\n      src: e\n    });\n    var d, u, s, p;\n    let {\n        streamType: n,\n        targetLiveWindow: o,\n        liveEdgeStartOffset: a,\n        sessionData: i\n      } = await Mt(e, r),\n      c = i == null ? void 0 : i[\"com.apple.hls.chapters\"];\n    (c != null && c.URI || c != null && c.VALUE.toLocaleLowerCase().startsWith(\"http\")) && de((d = c.URI) != null ? d : c.VALUE, t), ((u = P.get(t)) != null ? u : {}).liveEdgeStartOffset = a, ((s = P.get(t)) != null ? s : {}).targetLiveWindow = o, t.dispatchEvent(new CustomEvent(\"targetlivewindowchange\", {\n      composed: !0,\n      bubbles: !0\n    })), ((p = P.get(t)) != null ? p : {}).streamType = n, t.dispatchEvent(new CustomEvent(\"streamtypechange\", {\n      composed: !0,\n      bubbles: !0\n    }));\n  },\n  de = async (e, t) => {\n    var r, n;\n    try {\n      let o = await fetch(e);\n      if (!o.ok) throw new Error(\"Failed to fetch Mux metadata: \".concat(o.status, \" \").concat(o.statusText));\n      let a = await o.json(),\n        i = {};\n      if (!((r = a == null ? void 0 : a[0]) != null && r.metadata)) return;\n      for (let d of a[0].metadata) d.key && d.value && (i[d.key] = d.value);\n      ((n = P.get(t)) != null ? n : {}).metadata = i;\n      let c = new CustomEvent(\"muxmetadata\");\n      t.dispatchEvent(c);\n    } catch (o) {\n      console.error(o);\n    }\n  },\n  Rt = e => {\n    var i;\n    let t = e.type,\n      r = Q(t),\n      n = Z(t),\n      o,\n      a = !!((i = e.partList) != null && i.length);\n    return r === _.LIVE && (o = a ? e.partTarget * 2 : e.targetduration * 3), {\n      streamType: r,\n      targetLiveWindow: n,\n      liveEdgeStartOffset: o,\n      lowLatency: a\n    };\n  },\n  Dt = (e, t, r) => {\n    var c, d, u, s, p, l, T, m;\n    let {\n      streamType: n,\n      targetLiveWindow: o,\n      liveEdgeStartOffset: a,\n      lowLatency: i\n    } = Rt(e);\n    if (n === _.LIVE) {\n      i ? (r.config.backBufferLength = (c = r.userConfig.backBufferLength) != null ? c : 4, r.config.maxFragLookUpTolerance = (d = r.userConfig.maxFragLookUpTolerance) != null ? d : .001, r.config.abrBandWidthUpFactor = (u = r.userConfig.abrBandWidthUpFactor) != null ? u : r.config.abrBandWidthFactor) : r.config.backBufferLength = (s = r.userConfig.backBufferLength) != null ? s : 8;\n      let R = Object.freeze({\n        get length() {\n          return t.seekable.length;\n        },\n        start(M) {\n          return t.seekable.start(M);\n        },\n        end(M) {\n          var h;\n          return M > this.length || M < 0 || Number.isFinite(t.duration) ? t.seekable.end(M) : (h = r.liveSyncPosition) != null ? h : t.seekable.end(M);\n        }\n      });\n      ((p = P.get(t)) != null ? p : {}).seekable = R;\n    }\n    ((l = P.get(t)) != null ? l : {}).liveEdgeStartOffset = a, ((T = P.get(t)) != null ? T : {}).targetLiveWindow = o, t.dispatchEvent(new CustomEvent(\"targetlivewindowchange\", {\n      composed: !0,\n      bubbles: !0\n    })), ((m = P.get(t)) != null ? m : {}).streamType = n, t.dispatchEvent(new CustomEvent(\"streamtypechange\", {\n      composed: !0,\n      bubbles: !0\n    }));\n  },\n  Oe,\n  Ue,\n  bt = (Ue = (Oe = globalThis == null ? void 0 : globalThis.navigator) == null ? void 0 : Oe.userAgent) != null ? Ue : \"\",\n  He,\n  Ve,\n  Ke,\n  Ct = (Ke = (Ve = (He = globalThis == null ? void 0 : globalThis.navigator) == null ? void 0 : He.userAgentData) == null ? void 0 : Ve.platform) != null ? Ke : \"\",\n  vt = bt.toLowerCase().includes(\"android\") || [\"x11\", \"android\"].some(e => Ct.toLowerCase().includes(e)),\n  P = new WeakMap(),\n  I = \"mux.com\",\n  We,\n  Ye,\n  Fe = (Ye = (We = g).isSupported) == null ? void 0 : Ye.call(We),\n  Pt = vt,\n  Wr = () => ue.utils.now(),\n  _t = ue.utils.generateUUID,\n  Yr = function () {\n    let {\n      playbackId: e,\n      customDomain: t = I,\n      maxResolution: r,\n      minResolution: n,\n      renditionOrder: o,\n      programStartTime: a,\n      programEndTime: i,\n      assetStartTime: c,\n      assetEndTime: d,\n      playbackToken: u,\n      tokens: {\n        playback: s = u\n      } = {},\n      extraSourceParams: p = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!e) return;\n    let [l, T = \"\"] = F(e),\n      m = new URL(\"https://stream.\".concat(t, \"/\").concat(l, \".m3u8\").concat(T));\n    return s || m.searchParams.has(\"token\") ? (m.searchParams.forEach((R, M) => {\n      M != \"token\" && m.searchParams.delete(M);\n    }), s && m.searchParams.set(\"token\", s)) : (r && m.searchParams.set(\"max_resolution\", r), n && (m.searchParams.set(\"min_resolution\", n), r && +r.slice(0, -1) < +n.slice(0, -1) && console.error(\"minResolution must be <= maxResolution\", \"minResolution\", n, \"maxResolution\", r)), o && m.searchParams.set(\"rendition_order\", o), a && m.searchParams.set(\"program_start_time\", \"\".concat(a)), i && m.searchParams.set(\"program_end_time\", \"\".concat(i)), c && m.searchParams.set(\"asset_start_time\", \"\".concat(c)), d && m.searchParams.set(\"asset_end_time\", \"\".concat(d)), Object.entries(p).forEach(_ref12 => {\n      let [R, M] = _ref12;\n      M != null && m.searchParams.set(R, M);\n    })), m.toString();\n  },\n  G = e => {\n    if (!e) return;\n    let [t] = e.split(\"?\");\n    return t || void 0;\n  },\n  $e = e => {\n    if (!e || !e.startsWith(\"https://stream.\")) return;\n    let [t] = new URL(e).pathname.slice(1).split(/\\.m3u8|\\//);\n    return t || void 0;\n  },\n  kt = e => {\n    var t, r, n;\n    return (t = e == null ? void 0 : e.metadata) != null && t.video_id ? e.metadata.video_id : Xe(e) && (n = (r = G(e.playbackId)) != null ? r : $e(e.src)) != null ? n : e.src;\n  },\n  ht = e => {\n    var t;\n    return (t = P.get(e)) == null ? void 0 : t.error;\n  },\n  Fr = e => {\n    var t;\n    return (t = P.get(e)) == null ? void 0 : t.metadata;\n  },\n  we = e => {\n    var t, r;\n    return (r = (t = P.get(e)) == null ? void 0 : t.streamType) != null ? r : _.UNKNOWN;\n  },\n  $r = e => {\n    var t, r;\n    return (r = (t = P.get(e)) == null ? void 0 : t.targetLiveWindow) != null ? r : Number.NaN;\n  },\n  Be = e => {\n    var t, r;\n    return (r = (t = P.get(e)) == null ? void 0 : t.seekable) != null ? r : e.seekable;\n  },\n  Br = e => {\n    var n;\n    let t = (n = P.get(e)) == null ? void 0 : n.liveEdgeStartOffset;\n    if (typeof t != \"number\") return Number.NaN;\n    let r = Be(e);\n    return r.length ? r.end(r.length - 1) - t : Number.NaN;\n  },\n  le = .034,\n  Lt = function (e, t) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : le;\n    return Math.abs(e - t) <= r;\n  },\n  je = function (e, t) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : le;\n    return e > t || Lt(e, t, r);\n  },\n  Nt = function (e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : le;\n    return e.paused && je(e.currentTime, e.duration, t);\n  },\n  Je = (e, t) => {\n    var u, s, p;\n    if (!t || !e.buffered.length) return;\n    if (e.readyState > 2) return !1;\n    let r = t.currentLevel >= 0 ? (s = (u = t.levels) == null ? void 0 : u[t.currentLevel]) == null ? void 0 : s.details : (p = t.levels.find(l => !!l.details)) == null ? void 0 : p.details;\n    if (!r || r.live) return;\n    let {\n      fragments: n\n    } = r;\n    if (!(n != null && n.length)) return;\n    if (e.currentTime < e.duration - (r.targetduration + .5)) return !1;\n    let o = n[n.length - 1];\n    if (e.currentTime <= o.start) return !1;\n    let a = o.start + o.duration / 2,\n      i = e.buffered.start(e.buffered.length - 1),\n      c = e.buffered.end(e.buffered.length - 1);\n    return a > i && a < c;\n  },\n  At = (e, t) => e.ended || e.loop ? e.ended : t && Je(e, t) ? !0 : Nt(e),\n  jr = (e, t, r) => {\n    It(t, r, e);\n    let {\n        metadata: n = {}\n      } = e,\n      {\n        view_session_id: o = _t()\n      } = n,\n      a = kt(e);\n    n.view_session_id = o, n.video_id = a, e.metadata = n;\n    let i = s => {\n      var p;\n      (p = t.mux) == null || p.emit(\"hb\", {\n        view_drm_type: s\n      });\n    };\n    e.drmTypeCb = i, P.set(t, {\n      retryCount: 0\n    });\n    let c = St(e, t),\n      d = Re(e, t, c);\n    e != null && e.muxDataKeepSession && t != null && t.mux && !t.mux.deleted ? c && t.mux.addHLSJS({\n      hlsjs: c,\n      Hls: c ? g : void 0\n    }) : Kt(e, t, c), Wt(e, t, c), ke(t), Ae(t);\n    let u = xe(e, t, c);\n    return {\n      engine: c,\n      setAutoplay: u,\n      setPreload: d\n    };\n  },\n  It = (e, t, r) => {\n    let n = t == null ? void 0 : t.engine;\n    e != null && e.mux && !e.mux.deleted && (r != null && r.muxDataKeepSession ? n && e.mux.removeHLSJS() : (e.mux.destroy(), delete e.mux)), n && (n.detachMedia(), n.destroy()), e && (e.hasAttribute(\"src\") && (e.removeAttribute(\"src\"), e.load()), e.removeEventListener(\"error\", Qe), e.removeEventListener(\"error\", ce), e.removeEventListener(\"durationchange\", ze), P.delete(e), e.dispatchEvent(new Event(\"teardown\")));\n  };\nfunction qe(e, t) {\n  var u;\n  let r = U(e);\n  if (!(r === A.M3U8)) return !0;\n  let o = !r || ((u = t.canPlayType(r)) != null ? u : !0),\n    {\n      preferPlayback: a\n    } = e,\n    i = a === X.MSE,\n    c = a === X.NATIVE;\n  return o && (c || !(Fe && (i || Pt)));\n}\nvar St = (e, t) => {\n    let {\n        debug: r,\n        streamType: n,\n        startTime: o = -1,\n        metadata: a,\n        preferCmcd: i,\n        _hlsConfig: c = {}\n      } = e,\n      u = U(e) === A.M3U8,\n      s = qe(e, t);\n    if (u && !s && Fe) {\n      let p = {\n          backBufferLength: 30,\n          renderTextTracksNatively: !1,\n          liveDurationInfinity: !0,\n          capLevelToPlayerSize: !0,\n          capLevelOnFPSDrop: !0\n        },\n        l = wt(n),\n        T = Ot(e),\n        m = [S.QUERY, S.HEADER].includes(i) ? {\n          useHeaders: i === S.HEADER,\n          sessionId: a == null ? void 0 : a.view_session_id,\n          contentId: a == null ? void 0 : a.video_id\n        } : void 0,\n        R = new g(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n          debug: r,\n          startPosition: o,\n          cmcd: m,\n          xhrSetup: (M, h) => {\n            var y, k;\n            if (i && i !== S.QUERY) return;\n            let E = new URL(h);\n            if (!E.searchParams.has(\"CMCD\")) return;\n            let b = ((k = (y = E.searchParams.get(\"CMCD\")) == null ? void 0 : y.split(\",\")) != null ? k : []).filter(pe => pe.startsWith(\"sid\") || pe.startsWith(\"cid\")).join(\",\");\n            E.searchParams.set(\"CMCD\", b), M.open(\"GET\", E);\n          },\n          capLevelController: Se\n        }, p), l), T), c));\n      return R.on(g.Events.MANIFEST_PARSED, async function (M, h) {\n        var b, y;\n        let E = (b = h.sessionData) == null ? void 0 : b[\"com.apple.hls.chapters\"];\n        (E != null && E.URI || E != null && E.VALUE.toLocaleLowerCase().startsWith(\"http\")) && de((y = E == null ? void 0 : E.URI) != null ? y : E == null ? void 0 : E.VALUE, t);\n      }), R;\n    }\n  },\n  wt = e => e === _.LIVE ? {\n    backBufferLength: 8\n  } : {},\n  Ot = e => {\n    let {\n        tokens: {\n          drm: t\n        } = {},\n        playbackId: r,\n        drmTypeCb: n\n      } = e,\n      o = G(r);\n    return !t || !o ? {} : {\n      emeEnabled: !0,\n      drmSystems: {\n        \"com.apple.fps\": {\n          licenseUrl: q(e, \"fairplay\"),\n          serverCertificateUrl: Ge(e, \"fairplay\")\n        },\n        \"com.widevine.alpha\": {\n          licenseUrl: q(e, \"widevine\")\n        },\n        \"com.microsoft.playready\": {\n          licenseUrl: q(e, \"playready\")\n        }\n      },\n      requestMediaKeySystemAccessFunc: (a, i) => (a === \"com.widevine.alpha\" && (i = [...i.map(c => {\n        var u;\n        let d = (u = c.videoCapabilities) == null ? void 0 : u.map(s => _objectSpread(_objectSpread({}, s), {}, {\n          robustness: \"HW_SECURE_ALL\"\n        }));\n        return _objectSpread(_objectSpread({}, c), {}, {\n          videoCapabilities: d\n        });\n      }), ...i]), navigator.requestMediaKeySystemAccess(a, i).then(c => {\n        let d = ft(a);\n        return n == null || n(d), c;\n      }))\n    };\n  },\n  Ut = async e => {\n    let t = await fetch(e);\n    return t.status !== 200 ? Promise.reject(t) : await t.arrayBuffer();\n  },\n  Ht = async (e, t) => {\n    let r = await fetch(t, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/octet-stream\"\n      },\n      body: e\n    });\n    if (r.status !== 200) return Promise.reject(r);\n    let n = await r.arrayBuffer();\n    return new Uint8Array(n);\n  },\n  Vt = (e, t) => {\n    v(t, \"encrypted\", async n => {\n      try {\n        let o = n.initDataType;\n        if (o !== \"skd\") {\n          console.error(\"Received unexpected initialization data type \\\"\".concat(o, \"\\\"\"));\n          return;\n        }\n        if (!t.mediaKeys) {\n          let u = await navigator.requestMediaKeySystemAccess(\"com.apple.fps\", [{\n            initDataTypes: [o],\n            videoCapabilities: [{\n              contentType: \"application/vnd.apple.mpegurl\",\n              robustness: \"\"\n            }],\n            distinctiveIdentifier: \"not-allowed\",\n            persistentState: \"not-allowed\",\n            sessionTypes: [\"temporary\"]\n          }]).then(p => {\n            var l;\n            return (l = e.drmTypeCb) == null || l.call(e, J.FAIRPLAY), p;\n          }).catch(() => {\n            let p = x(\"Cannot play DRM-protected content with current security configuration on this browser. Try playing in another browser.\"),\n              l = new f(p, f.MEDIA_ERR_ENCRYPTED, !0);\n            l.errorCategory = C.DRM, l.muxCode = D.ENCRYPTED_UNSUPPORTED_KEY_SYSTEM, N(t, l);\n          });\n          if (!u) return;\n          let s = await u.createMediaKeys();\n          try {\n            let p = await Ut(Ge(e, \"fairplay\")).catch(l => {\n              if (l instanceof Response) {\n                let T = H(l, C.DRM, e);\n                return console.error(\"mediaError\", T == null ? void 0 : T.message, T == null ? void 0 : T.context), T ? Promise.reject(T) : Promise.reject(new Error(\"Unexpected error in app cert request\"));\n              }\n              return Promise.reject(l);\n            });\n            await s.setServerCertificate(p).catch(() => {\n              let l = x(\"Your server certificate failed when attempting to set it. This may be an issue with a no longer valid certificate.\"),\n                T = new f(l, f.MEDIA_ERR_ENCRYPTED, !0);\n              return T.errorCategory = C.DRM, T.muxCode = D.ENCRYPTED_UPDATE_SERVER_CERT_FAILED, Promise.reject(T);\n            });\n          } catch (p) {\n            N(t, p);\n            return;\n          }\n          await t.setMediaKeys(s);\n        }\n        let a = n.initData;\n        if (a == null) {\n          console.error(\"Could not start encrypted playback due to missing initData in \".concat(n.type, \" event\"));\n          return;\n        }\n        let i = t.mediaKeys.createSession();\n        i.addEventListener(\"keystatuseschange\", () => {\n          i.keyStatuses.forEach(u => {\n            let s;\n            if (u === \"internal-error\") {\n              let p = x(\"The DRM Content Decryption Module system had an internal failure. Try reloading the page, upading your browser, or playing in another browser.\");\n              s = new f(p, f.MEDIA_ERR_ENCRYPTED, !0), s.errorCategory = C.DRM, s.muxCode = D.ENCRYPTED_CDM_ERROR;\n            } else if (u === \"output-restricted\" || u === \"output-downscaled\") {\n              let p = x(\"DRM playback is being attempted in an environment that is not sufficiently secure. User may see black screen.\");\n              s = new f(p, f.MEDIA_ERR_ENCRYPTED, !1), s.errorCategory = C.DRM, s.muxCode = D.ENCRYPTED_OUTPUT_RESTRICTED;\n            }\n            s && N(t, s);\n          });\n        });\n        let c = await Promise.all([i.generateRequest(o, a).catch(() => {\n            let u = x(\"Failed to generate a DRM license request. This may be an issue with the player or your protected content.\"),\n              s = new f(u, f.MEDIA_ERR_ENCRYPTED, !0);\n            s.errorCategory = C.DRM, s.muxCode = D.ENCRYPTED_GENERATE_REQUEST_FAILED, N(t, s);\n          }), new Promise(u => {\n            i.addEventListener(\"message\", s => {\n              u(s.message);\n            }, {\n              once: !0\n            });\n          })]).then(_ref13 => {\n            let [, u] = _ref13;\n            return u;\n          }),\n          d = await Ht(c, q(e, \"fairplay\")).catch(u => {\n            if (u instanceof Response) {\n              let s = H(u, C.DRM, e);\n              return console.error(\"mediaError\", s == null ? void 0 : s.message, s == null ? void 0 : s.context), s ? Promise.reject(s) : Promise.reject(new Error(\"Unexpected error in license key request\"));\n            }\n            return Promise.reject(u);\n          });\n        await i.update(d).catch(() => {\n          let u = x(\"Failed to update DRM license. This may be an issue with the player or your protected content.\"),\n            s = new f(u, f.MEDIA_ERR_ENCRYPTED, !0);\n          return s.errorCategory = C.DRM, s.muxCode = D.ENCRYPTED_UPDATE_LICENSE_FAILED, Promise.reject(s);\n        });\n      } catch (o) {\n        N(t, o);\n        return;\n      }\n    });\n  },\n  q = (_ref14, n) => {\n    let {\n      playbackId: e,\n      tokens: {\n        drm: t\n      } = {},\n      customDomain: r = I\n    } = _ref14;\n    let o = G(e);\n    return \"https://license.\".concat(r.toLocaleLowerCase().endsWith(I) ? r : I, \"/license/\").concat(n, \"/\").concat(o, \"?token=\").concat(t);\n  },\n  Ge = (_ref15, n) => {\n    let {\n      playbackId: e,\n      tokens: {\n        drm: t\n      } = {},\n      customDomain: r = I\n    } = _ref15;\n    let o = G(e);\n    return \"https://license.\".concat(r.toLocaleLowerCase().endsWith(I) ? r : I, \"/appcert/\").concat(n, \"/\").concat(o, \"?token=\").concat(t);\n  },\n  Xe = _ref16 => {\n    let {\n      playbackId: e,\n      src: t,\n      customDomain: r\n    } = _ref16;\n    if (e) return !0;\n    if (typeof t != \"string\") return !1;\n    let n = window == null ? void 0 : window.location.href,\n      o = new URL(t, n).hostname.toLocaleLowerCase();\n    return o.includes(I) || !!r && o.includes(r.toLocaleLowerCase());\n  },\n  Kt = (e, t, r) => {\n    var d;\n    let {\n        envKey: n,\n        disableTracking: o,\n        muxDataSDK: a = ue,\n        muxDataSDKOptions: i = {}\n      } = e,\n      c = Xe(e);\n    if (!o && (n || c)) {\n      let {\n          playerInitTime: u,\n          playerSoftwareName: s,\n          playerSoftwareVersion: p,\n          beaconCollectionDomain: l,\n          debug: T,\n          disableCookies: m\n        } = e,\n        R = _objectSpread(_objectSpread({}, e.metadata), {}, {\n          video_title: ((d = e == null ? void 0 : e.metadata) == null ? void 0 : d.video_title) || void 0\n        }),\n        M = h => typeof h.player_error_code == \"string\" ? !1 : typeof e.errorTranslator == \"function\" ? e.errorTranslator(h) : h;\n      a.monitor(t, _objectSpread(_objectSpread({\n        debug: T,\n        beaconCollectionDomain: l,\n        hlsjs: r,\n        Hls: r ? g : void 0,\n        automaticErrorTracking: !1,\n        errorTranslator: M,\n        disableCookies: m\n      }, i), {}, {\n        data: _objectSpread(_objectSpread({}, n ? {\n          env_key: n\n        } : {}), {}, {\n          player_software_name: s,\n          player_software: s,\n          player_software_version: p,\n          player_init_time: u\n        }, R)\n      }));\n    }\n  },\n  Wt = (e, t, r) => {\n    var s, p;\n    let n = qe(e, t),\n      {\n        src: o,\n        customDomain: a = I\n      } = e,\n      i = () => {\n        t.ended || !At(t, r) || (Je(t, r) ? t.currentTime = t.buffered.end(t.buffered.length - 1) : t.dispatchEvent(new Event(\"ended\")));\n      },\n      c,\n      d,\n      u = () => {\n        let l = Be(t),\n          T,\n          m;\n        l.length > 0 && (T = l.start(0), m = l.end(0)), (d !== m || c !== T) && t.dispatchEvent(new CustomEvent(\"seekablechange\", {\n          composed: !0\n        })), c = T, d = m;\n      };\n    if (v(t, \"durationchange\", u), t && n) {\n      let l = U(e);\n      if (typeof o == \"string\") {\n        if (o.endsWith(\".mp4\") && o.includes(a)) {\n          let R = $e(o),\n            M = new URL(\"https://stream.\".concat(a, \"/\").concat(R, \"/metadata.json\"));\n          de(M.toString(), t);\n        }\n        let T = () => {\n            if (we(t) !== _.LIVE || Number.isFinite(t.duration)) return;\n            let R = setInterval(u, 1e3);\n            t.addEventListener(\"teardown\", () => {\n              clearInterval(R);\n            }, {\n              once: !0\n            }), v(t, \"durationchange\", () => {\n              Number.isFinite(t.duration) && clearInterval(R);\n            });\n          },\n          m = async () => xt(o, t, l).then(T).catch(R => {\n            if (R instanceof Response) {\n              let M = H(R, C.VIDEO, e);\n              if (M) {\n                N(t, M);\n                return;\n              }\n            } else R instanceof Error;\n          });\n        if (t.preload === \"none\") {\n          let R = () => {\n              m(), t.removeEventListener(\"loadedmetadata\", M);\n            },\n            M = () => {\n              m(), t.removeEventListener(\"play\", R);\n            };\n          v(t, \"play\", R, {\n            once: !0\n          }), v(t, \"loadedmetadata\", M, {\n            once: !0\n          });\n        } else m();\n        (s = e.tokens) != null && s.drm ? Vt(e, t) : v(t, \"encrypted\", () => {\n          let R = x(\"Attempting to play DRM-protected content without providing a DRM token.\"),\n            M = new f(R, f.MEDIA_ERR_ENCRYPTED, !0);\n          M.errorCategory = C.DRM, M.muxCode = D.ENCRYPTED_MISSING_TOKEN, N(t, M);\n        }, {\n          once: !0\n        }), t.setAttribute(\"src\", o), e.startTime && (((p = P.get(t)) != null ? p : {}).startTime = e.startTime, t.addEventListener(\"durationchange\", ze, {\n          once: !0\n        }));\n      } else t.removeAttribute(\"src\");\n      t.addEventListener(\"error\", Qe), t.addEventListener(\"error\", ce), t.addEventListener(\"emptied\", () => {\n        t.querySelectorAll(\"track[data-removeondestroy]\").forEach(m => {\n          m.remove();\n        });\n      }, {\n        once: !0\n      }), v(t, \"pause\", i), v(t, \"seeked\", i), v(t, \"play\", () => {\n        t.ended || je(t.currentTime, t.duration) && (t.currentTime = t.seekable.length ? t.seekable.start(0) : 0);\n      });\n    } else r && o ? (r.once(g.Events.LEVEL_LOADED, (l, T) => {\n      Dt(T.details, t, r), u(), we(t) === _.LIVE && !Number.isFinite(t.duration) && (r.on(g.Events.LEVEL_UPDATED, u), v(t, \"durationchange\", () => {\n        Number.isFinite(t.duration) && r.off(g.Events.LEVELS_UPDATED, u);\n      }));\n    }), r.on(g.Events.ERROR, (l, T) => {\n      var R, M;\n      let m = Yt(T, e);\n      if (m.muxCode === D.NETWORK_NOT_READY) {\n        let E = (R = P.get(t)) != null ? R : {},\n          b = (M = E.retryCount) != null ? M : 0;\n        if (b < 6) {\n          let y = b === 0 ? 5e3 : 6e4,\n            k = new f(\"Retrying in \".concat(y / 1e3, \" seconds...\"), m.code, m.fatal);\n          Object.assign(k, m), N(t, k), setTimeout(() => {\n            E.retryCount = b + 1, T.details === \"manifestLoadError\" && T.url && r.loadSource(T.url);\n          }, y);\n          return;\n        } else {\n          E.retryCount = 0;\n          let y = new f('Try again later or <a href=\"#\" onclick=\"window.location.reload(); return false;\" style=\"color: #4a90e2;\">click here to retry</a>', m.code, m.fatal);\n          Object.assign(y, m), N(t, y);\n          return;\n        }\n      }\n      N(t, m);\n    }), r.on(g.Events.MANIFEST_LOADED, () => {\n      let l = P.get(t);\n      l && l.error && (l.error = null, l.retryCount = 0, t.dispatchEvent(new Event(\"emptied\")), t.dispatchEvent(new Event(\"loadstart\")));\n    }), t.addEventListener(\"error\", ce), v(t, \"waiting\", i), De(e, r), be(t, r), r.attachMedia(t)) : console.error(\"It looks like the video you're trying to play will not work on this system! If possible, try upgrading to the newest versions of your browser or software.\");\n  };\nfunction ze(e) {\n  var n;\n  let t = e.target,\n    r = (n = P.get(t)) == null ? void 0 : n.startTime;\n  if (r && fe(t.seekable, t.duration, r)) {\n    let o = t.preload === \"auto\";\n    o && (t.preload = \"none\"), t.currentTime = r, o && (t.preload = \"auto\");\n  }\n}\nasync function Qe(e) {\n  if (!e.isTrusted) return;\n  e.stopImmediatePropagation();\n  let t = e.target;\n  if (!(t != null && t.error)) return;\n  let {\n      message: r,\n      code: n\n    } = t.error,\n    o = new f(r, n);\n  if (t.src && n === f.MEDIA_ERR_SRC_NOT_SUPPORTED && t.readyState === HTMLMediaElement.HAVE_NOTHING) {\n    setTimeout(() => {\n      var i;\n      let a = (i = ht(t)) != null ? i : t.error;\n      (a == null ? void 0 : a.code) === f.MEDIA_ERR_SRC_NOT_SUPPORTED && N(t, o);\n    }, 500);\n    return;\n  }\n  if (t.src && (n !== f.MEDIA_ERR_DECODE || n !== void 0)) try {\n    let {\n      status: a\n    } = await fetch(t.src);\n    o.data = {\n      response: {\n        code: a\n      }\n    };\n  } catch (_unused4) {}\n  N(t, o);\n}\nfunction N(e, t) {\n  var r;\n  t.fatal && (((r = P.get(e)) != null ? r : {}).error = t, e.dispatchEvent(new CustomEvent(\"error\", {\n    detail: t\n  })));\n}\nfunction ce(e) {\n  var n, o;\n  if (!(e instanceof CustomEvent) || !(e.detail instanceof f)) return;\n  let t = e.target,\n    r = e.detail;\n  !r || !r.fatal || (((n = P.get(t)) != null ? n : {}).error = r, (o = t.mux) == null || o.emit(\"error\", {\n    player_error_code: r.code,\n    player_error_message: r.message,\n    player_error_context: r.context\n  }));\n}\nvar Yt = (e, t) => {\n  var c, d, u;\n  console.error(\"getErrorFromHlsErrorData()\", e);\n  let r = {\n      [g.ErrorTypes.NETWORK_ERROR]: f.MEDIA_ERR_NETWORK,\n      [g.ErrorTypes.MEDIA_ERROR]: f.MEDIA_ERR_DECODE,\n      [g.ErrorTypes.KEY_SYSTEM_ERROR]: f.MEDIA_ERR_ENCRYPTED\n    },\n    n = s => [g.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED, g.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED].includes(s.details) ? f.MEDIA_ERR_NETWORK : r[s.type],\n    o = s => {\n      if (s.type === g.ErrorTypes.KEY_SYSTEM_ERROR) return C.DRM;\n      if (s.type === g.ErrorTypes.NETWORK_ERROR) return C.VIDEO;\n    },\n    a,\n    i = n(e);\n  if (i === f.MEDIA_ERR_NETWORK && e.response) {\n    let s = (c = o(e)) != null ? c : C.VIDEO;\n    a = (d = H(e.response, s, t, e.fatal)) != null ? d : new f(\"\", i, e.fatal);\n  } else if (i === f.MEDIA_ERR_ENCRYPTED) {\n    if (e.details === g.ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE) {\n      let s = x(\"Attempting to play DRM-protected content without providing a DRM token.\");\n      a = new f(s, f.MEDIA_ERR_ENCRYPTED, e.fatal), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_MISSING_TOKEN;\n    } else if (e.details === g.ErrorDetails.KEY_SYSTEM_NO_ACCESS) {\n      let s = x(\"Cannot play DRM-protected content with current security configuration on this browser. Try playing in another browser.\");\n      a = new f(s, f.MEDIA_ERR_ENCRYPTED, e.fatal), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_UNSUPPORTED_KEY_SYSTEM;\n    } else if (e.details === g.ErrorDetails.KEY_SYSTEM_NO_SESSION) {\n      let s = x(\"Failed to generate a DRM license request. This may be an issue with the player or your protected content.\");\n      a = new f(s, f.MEDIA_ERR_ENCRYPTED, !0), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_GENERATE_REQUEST_FAILED;\n    } else if (e.details === g.ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED) {\n      let s = x(\"Failed to update DRM license. This may be an issue with the player or your protected content.\");\n      a = new f(s, f.MEDIA_ERR_ENCRYPTED, e.fatal), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_UPDATE_LICENSE_FAILED;\n    } else if (e.details === g.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED) {\n      let s = x(\"Your server certificate failed when attempting to set it. This may be an issue with a no longer valid certificate.\");\n      a = new f(s, f.MEDIA_ERR_ENCRYPTED, e.fatal), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_UPDATE_SERVER_CERT_FAILED;\n    } else if (e.details === g.ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR) {\n      let s = x(\"The DRM Content Decryption Module system had an internal failure. Try reloading the page, upading your browser, or playing in another browser.\");\n      a = new f(s, f.MEDIA_ERR_ENCRYPTED, e.fatal), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_CDM_ERROR;\n    } else if (e.details === g.ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED) {\n      let s = x(\"DRM playback is being attempted in an environment that is not sufficiently secure. User may see black screen.\");\n      a = new f(s, f.MEDIA_ERR_ENCRYPTED, !1), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_OUTPUT_RESTRICTED;\n    } else a = new f(e.error.message, f.MEDIA_ERR_ENCRYPTED, e.fatal), a.errorCategory = C.DRM, a.muxCode = D.ENCRYPTED_ERROR;\n  } else a = new f(\"\", i, e.fatal);\n  return a.context || (a.context = \"\".concat(e.url ? \"url: \".concat(e.url, \"\\n\") : \"\").concat(e.response && (e.response.code || e.response.text) ? \"response: \".concat(e.response.code, \", \").concat(e.response.text, \"\\n\") : \"\").concat(e.reason ? \"failure reason: \".concat(e.reason, \"\\n\") : \"\").concat(e.level ? \"level: \".concat(e.level, \"\\n\") : \"\").concat(e.parent ? \"parent stream controller: \".concat(e.parent, \"\\n\") : \"\").concat(e.buffer ? \"buffer length: \".concat(e.buffer, \"\\n\") : \"\").concat(e.error ? \"error: \".concat(e.error, \"\\n\") : \"\").concat(e.event ? \"event: \".concat(e.event, \"\\n\") : \"\").concat(e.err ? \"error message: \".concat((u = e.err) == null ? void 0 : u.message, \"\\n\") : \"\")), a.data = e, a;\n};\nexport { K as AutoplayTypes, jt as CmcdTypeValues, S as CmcdTypes, A as ExtensionMimeTypeMap, g as Hls, Gt as MaxResolution, f as MediaError, W as MimeTypeShorthandMap, Xt as MinResolution, C as MuxErrorCategory, D as MuxErrorCode, se as MuxJWTAud, X as PlaybackTypes, zt as RenditionOrder, _ as StreamTypes, Le as addChapters, Pe as addCuePoints, ne as addTextTrack, qt as allMediaTypes, V as errorCategoryToTokenNameOrPrefix, de as fetchAndDispatchMuxMetadata, Wr as generatePlayerInitTime, _t as generateUUID, Ne as getActiveChapter, _e as getActiveCuePoint, Ut as getAppCertificate, ct as getChapters, it as getCuePoints, dt as getCurrentPdt, Ot as getDRMConfig, At as getEnded, ht as getError, Ht as getLicenseKey, Br as getLiveEdgeStart, Tt as getMediaPlaylistFromMultivariantPlaylist, Fr as getMetadata, yt as getMultivariantPlaylistSessionData, Be as getSeekable, ut as getStartDate, Rt as getStreamInfoFromHlsjsLevelDetails, gt as getStreamInfoFromPlaylist, Mt as getStreamInfoFromSrcAndType, we as getStreamType, wt as getStreamTypeConfig, $r as getTargetLiveWindow, w as getTextTrack, x as i18n, jr as initialize, O as isKeyOf, Xe as isMuxVideoSrc, Nt as isPseudoEnded, Je as isStuckOnLastFragment, Wt as loadMedia, ue as mux, P as muxMediaState, ee as parseJwt, Et as parseTagAttributes, st as removeTextTrack, Ae as setupChapters, ke as setupCuePoints, St as setupHls, Kt as setupMux, Vt as setupNativeFairplayDRM, Jt as shorthandKeys, It as teardown, Ge as toAppCertURL, ft as toDRMTypeFromKeySystem, q as toLicenseKeyURL, Yr as toMuxVideoURL, $e as toPlaybackIdFromSrc, F as toPlaybackIdParts, Dt as updateStreamInfoFromHlsjsLevelDetails, xt as updateStreamInfoFromSrc };","map":{"version":3,"names":["ue","Ze","g","C","VIDEO","THUMBNAIL","STORYBOARD","DRM","D","NOT_AN_ERROR","NETWORK_OFFLINE","NETWORK_UNKNOWN_ERROR","NETWORK_NO_STATUS","NETWORK_INVALID_URL","NETWORK_NOT_FOUND","NETWORK_NOT_READY","NETWORK_GENERIC_SERVER_FAIL","NETWORK_TOKEN_MISSING","NETWORK_TOKEN_MALFORMED","NETWORK_TOKEN_EXPIRED","NETWORK_TOKEN_AUD_MISSING","NETWORK_TOKEN_AUD_MISMATCH","NETWORK_TOKEN_SUB_MISMATCH","ENCRYPTED_ERROR","ENCRYPTED_UNSUPPORTED_KEY_SYSTEM","ENCRYPTED_GENERATE_REQUEST_FAILED","ENCRYPTED_UPDATE_LICENSE_FAILED","ENCRYPTED_UPDATE_SERVER_CERT_FAILED","ENCRYPTED_CDM_ERROR","ENCRYPTED_OUTPUT_RESTRICTED","ENCRYPTED_MISSING_TOKEN","V","e","L","Error","constructor","t","r","arguments","length","undefined","MEDIA_ERR_CUSTOM","n","o","a","name","code","context","fatal","MEDIA_ERR_NETWORK","MEDIA_ERR_ENCRYPTED","message","defaultMessages","MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","f","et","O","isKeyOf","K","ANY","MUTED","_","ON_DEMAND","LIVE","UNKNOWN","X","MSE","NATIVE","S","HEADER","QUERY","NONE","jt","Object","values","A","M3U8","MP4","W","HLS","Jt","keys","qt","Gt","upTo720p","upTo1080p","upTo1440p","upTo2160p","Xt","noLessThan480p","noLessThan540p","noLessThan720p","noLessThan1080p","noLessThan1440p","noLessThan2160p","zt","DESCENDING","tt","Y","v","addEventListenerWithTeardown","addEventListener","removeEventListener","once","fe","start","end","F","indexOf","slice","U","type","toUpperCase","rt","Q","Z","Number","POSITIVE_INFINITY","NaN","src","URL","pathname","_unused","console","error","lastIndexOf","ot","nt","_ref","customDomain","concat","_unused2","protocol","hostname","toLowerCase","split","i","c","includes","ee","replace","decodeURIComponent","atob","map","charCodeAt","toString","join","JSON","parse","_unused3","Te","isJWTExpired","_ref2","exp","Date","now","ye","isJWTSubMismatch","_ref3","sub","me","isJWTAudMissing","_ref4","aud","Ee","isJWTAudMismatch","_ref5","ge","x","z","locale","format","at","Me","xe","setupAutoplay","autoplay","updateHasPlayed","te","streamType","isFinite","duration","Events","LEVEL_LOADED","u","s","p","details","live","handleSeek","startTime","liveSyncPosition","currentTime","seekable","preload","LEVEL_UPDATED","handleAutoplay","muted","restoreMuted","play","catch","Re","setupPreload","_ref6","setAttribute","removeAttribute","config","maxBufferLength","d","maxBufferSize","l","safeLoadSource","loadSource","De","WeakMap","on","MANIFEST_PARSED","addVideoTrack","selected","levels","entries","T","addRendition","url","width","height","videoCodec","bitrate","set","id","AUDIO_TRACKS_UPDATED","audioTracks","default","addAudioTrack","lang","enabled","find","audioTrack","LEVELS_UPDATED","videoTracks","selectedIndex","get","videoRenditions","removeRendition","target","nextLevel","removeVideoTracks","removeVideoTrack","removeAudioTracks","removeAudioTrack","removeAllMediaTracks","DESTROYING","re","time","be","NON_NATIVE_TEXT_TRACKS_FOUND","_ref7","tracks","forEach","subtitleTrack","closedCaptions","subtitleTracks","findIndex","_ref8","m","label","kind","_id","ne","changeHandler","Array","from","textTracks","mode","_ref9","language","cues","addCue","CUES_PARSED","_ref0","track","getTrackById","getCueById","querySelectorAll","remove","forceHiddenTracks","querySelector","getAttribute","setTimeout","MANIFEST_LOADED","MEDIA_ATTACHED","document","createElement","srclang","append","st","prototype","call","w","Ce","Promise","sort","value","endTime","VTTCue","stringify","MAX_SAFE_INTEGER","dispatchEvent","Event","bubbles","composed","oe","ve","freeze","Pe","$","text","it","_e","activeCues","_ref1","ke","CustomEvent","detail","ae","he","B","Le","ct","Ne","_ref10","Ae","ut","playingDate","getTime","getStartDate","dt","se","lt","pt","categoryToToken","tokens","H","getErrorFromResponse","globalThis","navigator","onLine","M","h","E","b","y","k","errorCategory","muxCode","data","status","playbackId","tokenNamePrefix","token","timeStyle","dateStyle","expiredDate","Intl","DateTimeFormat","currentDate","tokenPlaybackId","expectedAud","category","R","Ie","DefaultConfig","capLevelController","j","hls","getValidLevels","filter","isLevelAllowed","getMaxLevel","Math","min","minMaxResolution","getMaxLevelByMediaSize","ie","Se","J","FAIRPLAY","PLAYREADY","WIDEVINE","ft","Tt","startsWith","fetch","then","reject","yt","Et","_objectSpread","sessionData","mt","matchAll","fromEntries","_ref11","gt","trim","targetLiveWindow","liveEdgeStartOffset","Mt","getStreamInfoFromSrcAndType","ok","xt","updateStreamInfoFromSrc","URI","VALUE","toLocaleLowerCase","de","P","fetchAndDispatchMuxMetadata","statusText","json","metadata","key","Rt","partList","partTarget","targetduration","lowLatency","Dt","updateStreamInfoFromHlsjsLevelDetails","backBufferLength","userConfig","maxFragLookUpTolerance","abrBandWidthUpFactor","abrBandWidthFactor","Oe","Ue","bt","userAgent","He","Ve","Ke","Ct","userAgentData","platform","vt","some","I","We","Ye","Fe","isSupported","Pt","Wr","generatePlayerInitTime","utils","_t","generateUUID","Yr","toMuxVideoURL","maxResolution","minResolution","renditionOrder","programStartTime","programEndTime","assetStartTime","assetEndTime","playbackToken","playback","extraSourceParams","searchParams","has","delete","_ref12","G","$e","kt","video_id","Xe","ht","Fr","we","$r","Be","Br","le","Lt","isApproximatelyEqual","abs","je","isApproximatelyGTE","Nt","isPseudoEnded","paused","Je","isStuckOnLastFragment","buffered","readyState","currentLevel","fragments","At","getEnded","ended","loop","jr","initialize","It","view_session_id","mux","emit","view_drm_type","drmTypeCb","retryCount","St","muxDataKeepSession","deleted","addHLSJS","hlsjs","Hls","Kt","Wt","engine","setAutoplay","setPreload","teardown","removeHLSJS","destroy","detachMedia","hasAttribute","load","Qe","ce","ze","qe","canPlayType","preferPlayback","setupHls","debug","preferCmcd","_hlsConfig","renderTextTracksNatively","liveDurationInfinity","capLevelToPlayerSize","capLevelOnFPSDrop","wt","Ot","useHeaders","sessionId","contentId","startPosition","cmcd","xhrSetup","pe","open","drm","emeEnabled","drmSystems","licenseUrl","q","serverCertificateUrl","Ge","requestMediaKeySystemAccessFunc","videoCapabilities","robustness","requestMediaKeySystemAccess","Ut","arrayBuffer","Ht","getLicenseKey","method","headers","body","Uint8Array","Vt","setupNativeFairplayDRM","initDataType","mediaKeys","initDataTypes","contentType","distinctiveIdentifier","persistentState","sessionTypes","N","createMediaKeys","Response","setServerCertificate","setMediaKeys","initData","createSession","keyStatuses","all","generateRequest","_ref13","update","toLicenseKeyURL","_ref14","endsWith","toAppCertURL","_ref15","_ref16","window","location","href","setupMux","envKey","disableTracking","muxDataSDK","muxDataSDKOptions","playerInitTime","playerSoftwareName","playerSoftwareVersion","beaconCollectionDomain","disableCookies","video_title","player_error_code","errorTranslator","monitor","automaticErrorTracking","env_key","player_software_name","player_software","player_software_version","player_init_time","loadMedia","maybeDispatchEndedCallback","seekableChange","setupSeekableChangePoll","setInterval","clearInterval","setupNativeStreamInfo","playHandler","loadedMetadataHandler","off","ERROR","Yt","assign","attachMedia","isTrusted","stopImmediatePropagation","HTMLMediaElement","HAVE_NOTHING","response","_unused4","player_error_message","player_error_context","getErrorFromHlsErrorData","ErrorTypes","NETWORK_ERROR","MEDIA_ERROR","KEY_SYSTEM_ERROR","ErrorDetails","KEY_SYSTEM_LICENSE_REQUEST_FAILED","KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED","KEY_SYSTEM_NO_CONFIGURED_LICENSE","KEY_SYSTEM_NO_ACCESS","KEY_SYSTEM_NO_SESSION","KEY_SYSTEM_SESSION_UPDATE_FAILED","KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED","KEY_SYSTEM_STATUS_INTERNAL_ERROR","KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED","reason","level","parent","buffer","event","err","AutoplayTypes","CmcdTypeValues","CmcdTypes","ExtensionMimeTypeMap","MaxResolution","MediaError","MimeTypeShorthandMap","MinResolution","MuxErrorCategory","MuxErrorCode","MuxJWTAud","PlaybackTypes","RenditionOrder","StreamTypes","addChapters","addCuePoints","addTextTrack","allMediaTypes","errorCategoryToTokenNameOrPrefix","getActiveChapter","getActiveCuePoint","getAppCertificate","getChapters","getCuePoints","getCurrentPdt","getDRMConfig","getError","getLiveEdgeStart","getMediaPlaylistFromMultivariantPlaylist","getMetadata","getMultivariantPlaylistSessionData","getSeekable","getStreamInfoFromHlsjsLevelDetails","getStreamInfoFromPlaylist","getStreamType","getStreamTypeConfig","getTargetLiveWindow","getTextTrack","i18n","isMuxVideoSrc","muxMediaState","parseJwt","parseTagAttributes","removeTextTrack","setupChapters","setupCuePoints","shorthandKeys","toDRMTypeFromKeySystem","toPlaybackIdFromSrc","toPlaybackIdParts"],"sources":["d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\index.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\hls.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\errors.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\types.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\lang\\en.json","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\util.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\autoplay.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\preload.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\media-tracks.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\text-tracks.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\pdt.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\request-errors.ts","d:\\Users\\User55\\Documents\\GitHub\\Vk-marusya-app\\node_modules\\@mux\\playback-core\\src\\min-cap-level-controller.ts"],"sourcesContent":["import type { ValueOf, PlaybackCore, MuxMediaProps, MuxMediaPropsInternal, MuxMediaPropTypes } from './types';\nimport mux, { ErrorEvent } from 'mux-embed';\nimport Hls from './hls';\nimport type { HlsInterface } from './hls';\nimport type { ErrorData, HlsConfig } from 'hls.js';\nimport { MediaError, MuxErrorCategory, MuxErrorCode, errorCategoryToTokenNameOrPrefix } from './errors';\nimport { setupAutoplay } from './autoplay';\nimport { setupPreload } from './preload';\nimport { setupMediaTracks } from './media-tracks';\nimport {\n  setupTextTracks,\n  addTextTrack,\n  removeTextTrack,\n  getTextTrack,\n  addCuePoints,\n  getCuePoints,\n  getActiveCuePoint,\n  setupCuePoints,\n  addChapters,\n  getChapters,\n  getActiveChapter,\n  setupChapters,\n} from './text-tracks';\nimport { getStartDate, getCurrentPdt } from './pdt';\nimport {\n  inSeekableRange,\n  toPlaybackIdParts,\n  getType,\n  toStreamTypeFromPlaylistType,\n  toTargetLiveWindowFromPlaylistType,\n  addEventListenerWithTeardown,\n  i18n,\n  parseJwt,\n} from './util';\nimport { StreamTypes, PlaybackTypes, ExtensionMimeTypeMap, CmcdTypes, HlsPlaylistTypes, MediaTypes } from './types';\nimport { getErrorFromResponse, MuxJWTAud } from './request-errors';\nimport MinCapLevelController from './min-cap-level-controller';\n// import { MediaKeySessionContext } from 'hls.js';\nexport {\n  mux,\n  Hls,\n  MediaError,\n  MuxErrorCategory,\n  MuxErrorCode,\n  errorCategoryToTokenNameOrPrefix,\n  MuxJWTAud,\n  addTextTrack,\n  removeTextTrack,\n  getTextTrack,\n  addCuePoints,\n  getCuePoints,\n  getActiveCuePoint,\n  setupCuePoints,\n  addChapters,\n  getChapters,\n  getActiveChapter,\n  setupChapters,\n  getStartDate,\n  getCurrentPdt,\n  toPlaybackIdParts,\n  i18n,\n  parseJwt,\n};\nexport * from './types';\n\nconst DRMType = {\n  FAIRPLAY: 'fairplay',\n  PLAYREADY: 'playready',\n  WIDEVINE: 'widevine',\n} as const;\n\ntype DRMTypeValue = (typeof DRMType)[keyof typeof DRMType];\nexport const toDRMTypeFromKeySystem = (keySystem: string): DRMTypeValue | undefined => {\n  if (keySystem.includes('fps')) return DRMType.FAIRPLAY;\n  if (keySystem.includes('playready')) return DRMType.PLAYREADY;\n  if (keySystem.includes('widevine')) return DRMType.WIDEVINE;\n  return undefined;\n};\n\nexport const getMediaPlaylistFromMultivariantPlaylist = (multivariantPlaylist: string) => {\n  const mediaPlaylistUrl = multivariantPlaylist.split('\\n').find((_line, idx, lines) => {\n    return idx && lines[idx - 1].startsWith('#EXT-X-STREAM-INF');\n  }) as string;\n\n  return fetch(mediaPlaylistUrl).then((resp) => {\n    if (resp.status !== 200) {\n      return Promise.reject(resp);\n    }\n    return resp.text();\n  });\n};\n\nexport const getMultivariantPlaylistSessionData = (playlist: string) => {\n  // See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-12#section-4.4.6.4\n  const sessionDataLines = playlist.split('\\n').filter((line) => line.startsWith('#EXT-X-SESSION-DATA'));\n  if (!sessionDataLines.length) return {};\n\n  const sessionData: Record<string, Record<string, string>> = {};\n\n  for (const line of sessionDataLines) {\n    const sessionDataAttrs = parseTagAttributes(line);\n    const dataId = sessionDataAttrs['DATA-ID'];\n    if (!dataId) continue;\n\n    sessionData[dataId] = { ...sessionDataAttrs };\n  }\n\n  return {\n    sessionData,\n  };\n};\n\n// matches all HLS attribute name=value pairs, with or without quotes, using per spec rules\n// for matching AttributeName (See: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-17#section-4.2)\nconst ATTR_LIST_REGEX = /([A-Z0-9-]+)=\"?(.*?)\"?(?:,|$)/g;\nexport function parseTagAttributes(str: string) {\n  const matches = [...str.matchAll(ATTR_LIST_REGEX)];\n  return Object.fromEntries(matches.map(([, key, value]) => [key, value]));\n}\n\nexport const getStreamInfoFromPlaylist = (playlist: string) => {\n  const playlistLines = playlist.split('\\n');\n  const typeLine = playlistLines.find((line) => line.startsWith('#EXT-X-PLAYLIST-TYPE')) ?? '';\n  const playlistType = typeLine.split(':')[1]?.trim() as HlsPlaylistTypes;\n  const streamType = toStreamTypeFromPlaylistType(playlistType);\n  const targetLiveWindow = toTargetLiveWindowFromPlaylistType(playlistType);\n\n  // Computation of the live edge start offset per media-ui-extensions proposal. See: https://github.com/video-dev/media-ui-extensions/blob/main/proposals/0007-live-edge.md#recommended-computation-for-rfc8216bis12-aka-hls (CJP)\n  let liveEdgeStartOffset = undefined;\n\n  if (streamType === StreamTypes.LIVE) {\n    // Required if playlist contains one or more EXT-X-PART tags. See: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-12#section-4.4.3.7 (CJP)\n    const partInfLine = playlistLines.find((line) => line.startsWith('#EXT-X-PART-INF'));\n    const lowLatency = !!partInfLine;\n\n    if (lowLatency) {\n      // The EXT-X-PART-INF only has one in-spec named attribute, PART-TARGET, which is required,\n      // so parsing & casting presumptuously here. See spec link above for more info. (CJP)\n      const partTarget = +partInfLine.split(':')[1].split('=')[1];\n      liveEdgeStartOffset = partTarget * 2;\n    } else {\n      // This is required for all media playlists. See: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-12#section-4.4.3.1 (CJP)\n      const targetDurationLine = playlistLines.find((line) => line.startsWith('#EXT-X-TARGETDURATION')) as string;\n      // EXT-X-TARGETDURATION has exactly one unnamed attribute that represents the target duration value, which is required,\n      // so parsing and casting presumptuously here. See spec link above for more info. (CJP)\n      const targetDurationValue = targetDurationLine?.split(':')?.[1];\n      // NOTE: Defaulting here and using optional chaining above since some people are seeing RTEs on iPhones under edge cases.\n      // Identifying root cause would be ideal, but this will at least avoid the RTE. (CJP)\n      const targetDuration = +(targetDurationValue ?? 6);\n      liveEdgeStartOffset = targetDuration * 3;\n    }\n  }\n\n  return {\n    streamType,\n    targetLiveWindow,\n    liveEdgeStartOffset,\n  };\n};\n\nexport const getStreamInfoFromSrcAndType = async (src: string, type?: MediaTypes | '') => {\n  if (type === ExtensionMimeTypeMap.MP4) {\n    return {\n      streamType: StreamTypes.ON_DEMAND,\n      targetLiveWindow: Number.NaN,\n      liveEdgeStartOffset: undefined,\n      sessionData: undefined,\n    };\n  }\n\n  if (type === ExtensionMimeTypeMap.M3U8) {\n    const multivariantPlaylistResponse = await fetch(src);\n    if (!multivariantPlaylistResponse.ok) {\n      return Promise.reject(multivariantPlaylistResponse);\n    }\n    const multivariantPlaylist = await multivariantPlaylistResponse.text();\n    const mediaPlaylist = await getMediaPlaylistFromMultivariantPlaylist(multivariantPlaylist);\n    return {\n      ...getMultivariantPlaylistSessionData(multivariantPlaylist),\n      ...getStreamInfoFromPlaylist(mediaPlaylist),\n    };\n  }\n\n  // Unknown or undefined type.\n  console.error(`Media type ${type} is an unrecognized or unsupported type for src ${src}.`);\n  return {\n    streamType: undefined,\n    targetLiveWindow: undefined,\n    liveEdgeStartOffset: undefined,\n    sessionData: undefined,\n  };\n};\n\nexport const updateStreamInfoFromSrc = async (\n  src: string,\n  mediaEl: HTMLMediaElement,\n  type: MediaTypes | '' = getType({ src })\n) => {\n  const { streamType, targetLiveWindow, liveEdgeStartOffset, sessionData } = await getStreamInfoFromSrcAndType(\n    src,\n    type\n  );\n\n  const metadata = sessionData?.['com.apple.hls.chapters' as keyof typeof sessionData];\n  if (metadata?.URI || metadata?.VALUE.toLocaleLowerCase().startsWith('http')) {\n    // NOTE: data identified by DATA-ID 'com.apple.hls.chapters' is expected to provide its value\n    // via a remote JSON source identified by the URI attribute. Providing VALUE as a fallback.\n    // For more, see:\n    // https://developer.apple.com/documentation/http-live-streaming/providing-javascript-object-notation-json-chapters#Specify-a-main-playlist\n    fetchAndDispatchMuxMetadata(metadata.URI ?? metadata.VALUE, mediaEl);\n  }\n\n  (muxMediaState.get(mediaEl) ?? {}).liveEdgeStartOffset = liveEdgeStartOffset;\n\n  (muxMediaState.get(mediaEl) ?? {}).targetLiveWindow = targetLiveWindow;\n  mediaEl.dispatchEvent(new CustomEvent('targetlivewindowchange', { composed: true, bubbles: true }));\n\n  (muxMediaState.get(mediaEl) ?? {}).streamType = streamType;\n  mediaEl.dispatchEvent(new CustomEvent('streamtypechange', { composed: true, bubbles: true }));\n};\n\nexport const fetchAndDispatchMuxMetadata = async (metadataUrl: string, mediaEl: HTMLMediaElement) => {\n  try {\n    const resp = await fetch(metadataUrl);\n    if (!resp.ok) {\n      throw new Error(`Failed to fetch Mux metadata: ${resp.status} ${resp.statusText}`);\n    }\n\n    const json = await resp.json();\n    const metadata: Record<string, string> = {};\n\n    if (!json?.[0]?.metadata) return;\n\n    for (const item of json[0].metadata) {\n      if (item.key && item.value) {\n        metadata[item.key] = item.value;\n      }\n    }\n\n    (muxMediaState.get(mediaEl) ?? {}).metadata = metadata;\n\n    const eventUpdateMetadata = new CustomEvent('muxmetadata');\n    mediaEl.dispatchEvent(eventUpdateMetadata);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getStreamInfoFromHlsjsLevelDetails = (levelDetails: any) => {\n  const playlistType: HlsPlaylistTypes = levelDetails.type as HlsPlaylistTypes;\n\n  const streamType = toStreamTypeFromPlaylistType(playlistType);\n  const targetLiveWindow = toTargetLiveWindowFromPlaylistType(playlistType);\n  let liveEdgeStartOffset = undefined;\n  const lowLatency = !!levelDetails.partList?.length;\n  if (streamType === StreamTypes.LIVE) {\n    liveEdgeStartOffset = lowLatency ? levelDetails.partTarget * 2 : levelDetails.targetduration * 3;\n  }\n\n  return {\n    streamType,\n    targetLiveWindow,\n    liveEdgeStartOffset,\n    lowLatency,\n  };\n};\n\nexport const updateStreamInfoFromHlsjsLevelDetails = (\n  levelDetails: any,\n  mediaEl: HTMLMediaElement,\n  hls: Pick<Hls, 'config' | 'userConfig' | 'liveSyncPosition'>\n) => {\n  const { streamType, targetLiveWindow, liveEdgeStartOffset, lowLatency } =\n    getStreamInfoFromHlsjsLevelDetails(levelDetails);\n\n  if (streamType === StreamTypes.LIVE) {\n    // Update hls.js config for live/ll-live\n    if (lowLatency) {\n      hls.config.backBufferLength = hls.userConfig.backBufferLength ?? 4;\n      hls.config.maxFragLookUpTolerance = hls.userConfig.maxFragLookUpTolerance ?? 0.001;\n      // For ll-hls, ensure that up switches are weighted the same as down switches to mitigate\n      // cases of getting stuck at lower bitrates.\n      hls.config.abrBandWidthUpFactor = hls.userConfig.abrBandWidthUpFactor ?? hls.config.abrBandWidthFactor;\n    } else {\n      hls.config.backBufferLength = hls.userConfig.backBufferLength ?? 8;\n    }\n\n    // Proxy `seekable.end()` to constrain based on rules in\n    // https://github.com/video-dev/media-ui-extensions/blob/main/proposals/0007-live-edge.md#property-constraint-on-htmlmediaelementseekableend-to-model-seekable-live-edge\n    const seekable: TimeRanges = Object.freeze({\n      get length() {\n        return mediaEl.seekable.length;\n      },\n      start(index: number) {\n        return mediaEl.seekable.start(index);\n      },\n      end(index: number) {\n        // Defer to native seekable for:\n        // 1) \"out of range\" cases\n        // 2) \"finite duration\" media (whether live/\"DVR\" that has ended or on demand)\n        if (index > this.length || index < 0 || Number.isFinite(mediaEl.duration)) return mediaEl.seekable.end(index);\n        // Otherwise rely on the live sync position (but still fall back to native seekable when nullish)\n        return hls.liveSyncPosition ?? mediaEl.seekable.end(index);\n      },\n    });\n    (muxMediaState.get(mediaEl) ?? {}).seekable = seekable;\n  }\n\n  (muxMediaState.get(mediaEl) ?? {}).liveEdgeStartOffset = liveEdgeStartOffset;\n\n  (muxMediaState.get(mediaEl) ?? {}).targetLiveWindow = targetLiveWindow;\n  mediaEl.dispatchEvent(new CustomEvent('targetlivewindowchange', { composed: true, bubbles: true }));\n\n  (muxMediaState.get(mediaEl) ?? {}).streamType = streamType;\n  mediaEl.dispatchEvent(new CustomEvent('streamtypechange', { composed: true, bubbles: true }));\n};\n\ndeclare global {\n  interface NavigatorUAData {\n    platform: string;\n    mobile: boolean;\n    brands: Array<{ brand: string; version: string }>;\n  }\n\n  interface Navigator {\n    userAgentData?: NavigatorUAData;\n  }\n}\n\nconst userAgentStr = globalThis?.navigator?.userAgent ?? '';\nconst userAgentPlatform = globalThis?.navigator?.userAgentData?.platform ?? '';\n\n// NOTE: Our primary *goal* with this is to detect \"non-Apple-OS\" platforms which may also support\n// native HLS playback. Our primary concern with any check for this is \"false negatives\" where we\n// identify an \"Apple-OS\" as a \"non-Apple-OS\". As such, instead of having logic to attempt to identify\n// \"!isAppleOS\", we opt to target known platforms that can support both native playback and MSE/hls.js.\n// For now, these are \"Android or Android-like\" platforms. If we end up matching platforms other than\n// Android (or e.g. forks thereof), this is fine so long as it doesn't include Apple-OS platforms.\n// Below are two strategies:\n// 1. UA string parsing - here, we're extra cautious to only match if the UA string explicitly includes 'android'.\n//   This is prone to false negatives (aka \"Android or Android-like\" platforms that yield false), since\n//   detection using UA strings is intentionally and notoriously unreliable (See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent)\n//   and Google is even officially attempting to lock this down even more for security and privacy reasons\n//   (See: https://developers.google.com/privacy-sandbox/blog/user-agent-reduction-android-model-and-version)\n// 2. userAgentData.platform checking - here, we're matching either 'android' or 'x11', and could add more matches in the future\n//    While still prone to false negatives, we can be a bit more aggressive with matches here for a few reasons.\n//    First, navigator.userAgentData is still experimental, is only supported on a subset of Chromium browsers,\n//    and neither Mozilla nor Webkit have even established an official browser support position. In other words,\n//    Apple-OS Safari and even other Apple-OS browsers (including Chrome) will typically not even support this\n//    feature, and, if and when they do, the purpose of this new API is to avoid obfuscatory information, so\n//    we should be able to better trust userAgentData.platform to not result in erroneous matches.\nconst isAndroidLike =\n  userAgentStr.toLowerCase().includes('android') ||\n  ['x11', 'android'].some((platformStr) => userAgentPlatform.toLowerCase().includes(platformStr));\n\n// NOTE: Exporting for testing\nexport const muxMediaState: WeakMap<\n  HTMLMediaElement,\n  Partial<MuxMediaProps> & { seekable?: TimeRanges; liveEdgeStartOffset?: number; retryCount?: number }\n> = new WeakMap();\n\nconst MUX_VIDEO_DOMAIN = 'mux.com';\nconst MSE_SUPPORTED = Hls.isSupported?.();\nconst DEFAULT_PREFER_MSE = isAndroidLike;\n\nexport const generatePlayerInitTime = () => {\n  return mux.utils.now();\n};\n\nexport const generateUUID = mux.utils.generateUUID;\n\ntype MuxVideoURLProps = Partial<\n  Pick<\n    MuxMediaPropTypes,\n    | 'playbackId'\n    | 'customDomain'\n    | 'maxResolution'\n    | 'minResolution'\n    | 'renditionOrder'\n    | 'programStartTime'\n    | 'programEndTime'\n    | 'assetStartTime'\n    | 'assetEndTime'\n    | 'tokens'\n    | 'playbackToken'\n    | 'extraSourceParams'\n  >\n>;\n\nexport const toMuxVideoURL = ({\n  playbackId: playbackIdWithParams,\n  customDomain: domain = MUX_VIDEO_DOMAIN,\n  maxResolution,\n  minResolution,\n  renditionOrder,\n  programStartTime,\n  programEndTime,\n  assetStartTime,\n  assetEndTime,\n  // Normalizes different ways of providing playback token\n  playbackToken,\n  tokens: { playback: token = playbackToken } = {},\n  extraSourceParams = {},\n}: MuxVideoURLProps = {}) => {\n  if (!playbackIdWithParams) return undefined;\n  // Normalizes different ways of providing playback id\n  const [playbackId, queryPart = ''] = toPlaybackIdParts(playbackIdWithParams);\n  const url = new URL(`https://stream.${domain}/${playbackId}.m3u8${queryPart}`);\n  /*\n   * All identified query params here can only be added to public\n   * playback IDs. In order to use these features with signed URLs\n   * the query param must be added to the signing token.\n   *\n   * */\n  if (token || url.searchParams.has('token')) {\n    url.searchParams.forEach((_, key) => {\n      if (key != 'token') url.searchParams.delete(key);\n    });\n    if (token) url.searchParams.set('token', token);\n  } else {\n    if (maxResolution) {\n      url.searchParams.set('max_resolution', maxResolution);\n    }\n    if (minResolution) {\n      url.searchParams.set('min_resolution', minResolution);\n      if (maxResolution && +maxResolution.slice(0, -1) < +minResolution.slice(0, -1)) {\n        console.error(\n          'minResolution must be <= maxResolution',\n          'minResolution',\n          minResolution,\n          'maxResolution',\n          maxResolution\n        );\n      }\n    }\n    if (renditionOrder) {\n      url.searchParams.set('rendition_order', renditionOrder);\n    }\n    if (programStartTime) {\n      url.searchParams.set('program_start_time', `${programStartTime}`);\n    }\n    if (programEndTime) {\n      url.searchParams.set('program_end_time', `${programEndTime}`);\n    }\n    if (assetStartTime) {\n      url.searchParams.set('asset_start_time', `${assetStartTime}`);\n    }\n    if (assetEndTime) {\n      url.searchParams.set('asset_end_time', `${assetEndTime}`);\n    }\n    Object.entries(extraSourceParams).forEach(([k, v]) => {\n      if (v == undefined) return;\n      url.searchParams.set(k, v);\n    });\n  }\n  return url.toString();\n};\n\nconst toPlaybackIdFromParameterized = (playbackIdWithParams: string | undefined) => {\n  if (!playbackIdWithParams) return undefined;\n  const [playbackId] = playbackIdWithParams.split('?');\n  // `|| undefined` is here to handle potential invalid cases\n  return playbackId || undefined;\n};\n\nexport const toPlaybackIdFromSrc = (src: string | undefined) => {\n  if (!src || !src.startsWith('https://stream.')) return undefined;\n  const [playbackId] = new URL(src).pathname.slice(1).split(/\\.m3u8|\\//);\n  // `|| undefined` is here to handle potential invalid cases\n  return playbackId || undefined;\n};\n\nconst toVideoId = (props: Partial<MuxMediaPropsInternal>) => {\n  if (props?.metadata?.video_id) return props.metadata.video_id;\n  if (!isMuxVideoSrc(props)) return props.src;\n  return toPlaybackIdFromParameterized(props.playbackId) ?? toPlaybackIdFromSrc(props.src) ?? props.src;\n};\n\nexport const getError = (mediaEl: HTMLMediaElement) => {\n  return muxMediaState.get(mediaEl)?.error;\n};\n\nexport const getMetadata = (mediaEl: HTMLMediaElement) => {\n  return muxMediaState.get(mediaEl)?.metadata;\n};\n\nexport const getStreamType = (mediaEl: HTMLMediaElement) => {\n  return muxMediaState.get(mediaEl)?.streamType ?? StreamTypes.UNKNOWN;\n};\n\nexport const getTargetLiveWindow = (mediaEl: HTMLMediaElement) => {\n  return muxMediaState.get(mediaEl)?.targetLiveWindow ?? Number.NaN;\n};\n\nexport const getSeekable = (mediaEl: HTMLMediaElement) => {\n  return muxMediaState.get(mediaEl)?.seekable ?? mediaEl.seekable;\n};\n\nexport const getLiveEdgeStart = (mediaEl: HTMLMediaElement) => {\n  const liveEdgeStartOffset = muxMediaState.get(mediaEl)?.liveEdgeStartOffset;\n  if (typeof liveEdgeStartOffset !== 'number') return Number.NaN;\n  const seekable = getSeekable(mediaEl);\n  // We aren't guaranteed that seekable is ready before invoking this, so handle that case.\n  if (!seekable.length) return Number.NaN;\n  return seekable.end(seekable.length - 1) - liveEdgeStartOffset;\n};\n\nconst DEFAULT_ENDED_MOE = 0.034;\n\nconst isApproximatelyEqual = (x: number, y: number, moe = DEFAULT_ENDED_MOE) => Math.abs(x - y) <= moe;\nconst isApproximatelyGTE = (x: number, y: number, moe = DEFAULT_ENDED_MOE) => x > y || isApproximatelyEqual(x, y, moe);\n\nexport const isPseudoEnded = (mediaEl: HTMLMediaElement, moe = DEFAULT_ENDED_MOE) => {\n  return mediaEl.paused && isApproximatelyGTE(mediaEl.currentTime, mediaEl.duration, moe);\n};\n\nexport const isStuckOnLastFragment = (\n  mediaEl: HTMLMediaElement,\n  hls?: Pick<\n    Hls,\n    /** Should we add audio fragments logic here, too? (CJP) */\n    // | 'audioTrack'\n    // | 'audioTracks'\n    'levels' | 'currentLevel'\n  >\n) => {\n  if (!hls || !mediaEl.buffered.length) return undefined;\n  if (mediaEl.readyState > 2) return false;\n  const videoLevelDetails =\n    hls.currentLevel >= 0\n      ? hls.levels?.[hls.currentLevel]?.details\n      : hls.levels.find((level) => !!level.details)?.details;\n\n  // Don't define for live streams (for now).\n  if (!videoLevelDetails || videoLevelDetails.live) return undefined;\n\n  const { fragments } = videoLevelDetails;\n\n  // Don't give a definitive true|false before we have no fragments (for now).\n  if (!fragments?.length) return undefined;\n\n  // Do a cheap check up front to see if we're close to the end.\n  // For more on TARGET_DURATION, see https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-14#section-4.4.3.1 (CJP)\n  if (mediaEl.currentTime < mediaEl.duration - (videoLevelDetails.targetduration + 0.5)) return false;\n\n  const lastFragment = fragments[fragments.length - 1];\n\n  // We're not yet playing the last fragment, so we can't be stuck on it.\n  if (mediaEl.currentTime <= lastFragment.start) return false;\n\n  const lastFragmentMidpoint = lastFragment.start + lastFragment.duration / 2;\n  const lastBufferedStart = mediaEl.buffered.start(mediaEl.buffered.length - 1);\n  const lastBufferedEnd = mediaEl.buffered.end(mediaEl.buffered.length - 1);\n\n  // True if we've already buffered (half of) the last fragment\n  const lastFragmentInBuffer = lastFragmentMidpoint > lastBufferedStart && lastFragmentMidpoint < lastBufferedEnd;\n  // If we haven't buffered half already, assume we're still waiting to fetch+buffer the fragment, otherwise,\n  // since we already checked the ready state, this means we're stuck on the last segment, and should pretend we're ended!\n  return lastFragmentInBuffer;\n};\n\nexport const getEnded = (\n  mediaEl: HTMLMediaElement,\n  hls?: Pick<\n    Hls,\n    /** Should we add audio fragments logic here, too? (CJP) */\n    // | 'audioTrack'\n    // | 'audioTracks'\n    'levels' | 'currentLevel'\n  >\n) => {\n  // Since looping media never truly ends, don't apply pseudo-ended logic\n  // Also, trust when the HTMLMediaElement says we have ended (only apply pseudo-ended logic when it reports false)\n  if (mediaEl.ended || mediaEl.loop) return mediaEl.ended;\n  // Externalize conversion to boolean for \"under-determined cases\" here (See isStuckOnLastFragment() for details)\n  if (hls && !!isStuckOnLastFragment(mediaEl, hls)) return true;\n  return isPseudoEnded(mediaEl);\n};\n\nexport const initialize = (props: Partial<MuxMediaPropsInternal>, mediaEl: HTMLMediaElement, core?: PlaybackCore) => {\n  // Automatically tear down previously initialized mux data & hls instance if it exists.\n  teardown(mediaEl, core, props);\n  // NOTE: metadata should never be nullish/nil. Adding here for type safety due to current type defs.\n  const { metadata = {} } = props;\n  const { view_session_id = generateUUID() } = metadata;\n  const video_id = toVideoId(props);\n  metadata.view_session_id = view_session_id;\n  metadata.video_id = video_id;\n  props.metadata = metadata;\n\n  // Used to signal DRM Type to Mux Data. See, e.g. `getDRMConfig()`\n  const drmTypeCb = (drmType?: string) => {\n    mediaEl.mux?.emit('hb', { view_drm_type: drmType });\n  };\n\n  props.drmTypeCb = drmTypeCb;\n\n  muxMediaState.set(mediaEl as HTMLMediaElement, { retryCount: 0 });\n  const nextHlsInstance = setupHls(props, mediaEl);\n  const setPreload = setupPreload(props as Pick<MuxMediaProps, 'preload' | 'src'>, mediaEl, nextHlsInstance);\n\n  if (props?.muxDataKeepSession && mediaEl?.mux && !mediaEl.mux.deleted) {\n    if (nextHlsInstance) {\n      mediaEl.mux.addHLSJS({\n        hlsjs: nextHlsInstance as HlsInterface,\n        Hls: nextHlsInstance ? Hls : undefined,\n      });\n    }\n  } else {\n    setupMux(props, mediaEl, nextHlsInstance);\n  }\n\n  loadMedia(props, mediaEl, nextHlsInstance);\n  setupCuePoints(mediaEl);\n  setupChapters(mediaEl);\n  const setAutoplay = setupAutoplay(props as Pick<MuxMediaProps, 'autoplay'>, mediaEl, nextHlsInstance);\n\n  return {\n    engine: nextHlsInstance,\n    setAutoplay,\n    setPreload,\n  };\n};\n\nexport const teardown = (\n  mediaEl?: HTMLMediaElement | null,\n  core?: PlaybackCore,\n  props?: Partial<MuxMediaPropsInternal>\n) => {\n  const hls = core?.engine;\n\n  if (mediaEl?.mux && !mediaEl.mux.deleted) {\n    if (props?.muxDataKeepSession) {\n      if (hls) mediaEl.mux.removeHLSJS();\n    } else {\n      mediaEl.mux.destroy();\n      delete mediaEl.mux;\n    }\n  }\n\n  if (hls) {\n    hls.detachMedia();\n    hls.destroy();\n  }\n\n  if (mediaEl) {\n    if (mediaEl.hasAttribute('src')) {\n      mediaEl.removeAttribute('src');\n      mediaEl.load();\n    }\n    mediaEl.removeEventListener('error', handleNativeError);\n    mediaEl.removeEventListener('error', handleInternalError);\n    mediaEl.removeEventListener('durationchange', seekInSeekableRange);\n    muxMediaState.delete(mediaEl);\n    mediaEl.dispatchEvent(new Event('teardown'));\n  }\n};\n\n/**\n * Returns true if we should use native playback. e.g. progressive files (mp3, mp4, webm) or native HLS on Safari.\n * We should use native playback for hls media sources if we\n *\n *   a) can use native playback (excluding Android, it's MSE by default)\n *   b) not prefer to use MSE/hls.js if it's supported\n */\nfunction useNative(\n  props: Partial<Pick<MuxMediaProps, 'preferPlayback' | 'type'>>,\n  mediaEl: Pick<HTMLMediaElement, 'canPlayType'>\n) {\n  const type = getType(props);\n  const hlsType = type === ExtensionMimeTypeMap.M3U8;\n  if (!hlsType) return true;\n\n  const canUseNative = !type || (mediaEl.canPlayType(type) ?? true);\n  const { preferPlayback } = props;\n\n  const preferMse = preferPlayback === PlaybackTypes.MSE;\n  const preferNative = preferPlayback === PlaybackTypes.NATIVE;\n  const forceMse = MSE_SUPPORTED && (preferMse || DEFAULT_PREFER_MSE);\n\n  return canUseNative && (preferNative || !forceMse);\n}\n\nexport const setupHls = (\n  props: Partial<\n    Pick<\n      MuxMediaPropsInternal,\n      'debug' | 'streamType' | 'type' | 'startTime' | 'metadata' | 'preferCmcd' | '_hlsConfig' | 'tokens' | 'drmTypeCb'\n    >\n  >,\n  mediaEl: HTMLMediaElement\n) => {\n  const { debug, streamType, startTime: startPosition = -1, metadata, preferCmcd, _hlsConfig = {} } = props;\n  const type = getType(props);\n  const hlsType = type === ExtensionMimeTypeMap.M3U8;\n  const shouldUseNative = useNative(props, mediaEl);\n\n  // 1. if we are trying to play an hls media source create hls if we should be using it \"under the hood\"\n  if (hlsType && !shouldUseNative && MSE_SUPPORTED) {\n    const defaultConfig = {\n      backBufferLength: 30,\n      renderTextTracksNatively: false,\n      liveDurationInfinity: true,\n      capLevelToPlayerSize: true,\n      capLevelOnFPSDrop: true,\n    };\n    const streamTypeConfig = getStreamTypeConfig(streamType);\n    const drmConfig = getDRMConfig(props);\n    // NOTE: `metadata.view_session_id` & `metadata.video_id` are guaranteed here (CJP)\n    // @ts-ignore\n    const cmcd = [CmcdTypes.QUERY, CmcdTypes.HEADER].includes(preferCmcd)\n      ? {\n          useHeaders: preferCmcd === CmcdTypes.HEADER,\n          sessionId: metadata?.view_session_id,\n          contentId: metadata?.video_id,\n        }\n      : undefined;\n    const hls = new Hls({\n      // Kind of like preload metadata, but causes spinner.\n      // autoStartLoad: false,\n      debug,\n      startPosition,\n      cmcd,\n      xhrSetup: (xhr, url) => {\n        if (preferCmcd && preferCmcd !== CmcdTypes.QUERY) return;\n        const urlObj = new URL(url);\n        if (!urlObj.searchParams.has('CMCD')) return;\n        const cmcdVal = (urlObj.searchParams.get('CMCD')?.split(',') ?? [])\n          .filter((cmcdKVStr) => cmcdKVStr.startsWith('sid') || cmcdKVStr.startsWith('cid'))\n          .join(',');\n        urlObj.searchParams.set('CMCD', cmcdVal);\n\n        xhr.open('GET', urlObj);\n      },\n      capLevelController: MinCapLevelController,\n      ...defaultConfig,\n      ...streamTypeConfig,\n      ...drmConfig,\n      ..._hlsConfig,\n    }) as HlsInterface;\n\n    hls.on(Hls.Events.MANIFEST_PARSED, async function (_event, data) {\n      const chapters = data.sessionData?.['com.apple.hls.chapters'];\n      if (chapters?.URI || chapters?.VALUE.toLocaleLowerCase().startsWith('http')) {\n        fetchAndDispatchMuxMetadata(chapters?.URI ?? chapters?.VALUE, mediaEl);\n      }\n    });\n\n    return hls;\n  }\n  return undefined;\n};\n\nexport const getStreamTypeConfig = (streamType?: ValueOf<StreamTypes>) => {\n  // for regular live videos, set backBufferLength to 8\n  if (streamType === StreamTypes.LIVE) {\n    const liveConfig = {\n      backBufferLength: 8,\n    };\n\n    return liveConfig;\n  }\n\n  return {};\n};\n\nexport const getDRMConfig = (\n  props: Partial<Pick<MuxMediaPropsInternal, 'src' | 'playbackId' | 'tokens' | 'customDomain' | 'drmTypeCb'>>\n): Partial<HlsConfig> => {\n  const {\n    tokens: { drm: drmToken } = {},\n    playbackId: playbackIdWithOptionalParams, // Since Mux Player typically sets `src` instead of `playbackId`, fall back to it here (CJP)\n    drmTypeCb,\n  } = props;\n  const playbackId = toPlaybackIdFromParameterized(playbackIdWithOptionalParams);\n  if (!drmToken || !playbackId) return {};\n  return {\n    emeEnabled: true,\n    drmSystems: {\n      'com.apple.fps': {\n        licenseUrl: toLicenseKeyURL(props, 'fairplay'),\n        serverCertificateUrl: toAppCertURL(props, 'fairplay'),\n      },\n      'com.widevine.alpha': {\n        licenseUrl: toLicenseKeyURL(props, 'widevine'),\n      },\n      'com.microsoft.playready': {\n        licenseUrl: toLicenseKeyURL(props, 'playready'),\n      },\n    },\n    requestMediaKeySystemAccessFunc: (keySystem, supportedConfigurations) => {\n      if (keySystem === 'com.widevine.alpha') {\n        supportedConfigurations = [\n          // NOTE: For widevine, by default we'll duplicate the key system configs but add L1-level\n          // security to the first set of duplicates so the key system will \"prefer\" that\n          // if/when available. (CJP)\n          // See, e.g.: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess#supportedconfigurations\n          ...supportedConfigurations.map((mediaKeySystemConfig) => {\n            const videoCapabilities = mediaKeySystemConfig.videoCapabilities?.map((capability) => {\n              return {\n                ...capability,\n                robustness: 'HW_SECURE_ALL',\n              };\n            });\n            return {\n              ...mediaKeySystemConfig,\n              videoCapabilities,\n            };\n          }),\n          ...supportedConfigurations,\n        ];\n      }\n      return navigator.requestMediaKeySystemAccess(keySystem, supportedConfigurations).then((value) => {\n        const drmType = toDRMTypeFromKeySystem(keySystem);\n        drmTypeCb?.(drmType);\n        return value;\n      });\n    },\n  };\n};\n\nexport const getAppCertificate = async (appCertificateUrl: string) => {\n  const resp = await fetch(appCertificateUrl);\n  if (resp.status !== 200) {\n    return Promise.reject(resp);\n  }\n  const body = await resp.arrayBuffer();\n  return body;\n};\n\nexport const getLicenseKey = async (message: ArrayBuffer, licenseServerUrl: string) => {\n  const resp = await fetch(licenseServerUrl, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/octet-stream' },\n    body: message,\n  });\n  if (resp.status !== 200) {\n    return Promise.reject(resp);\n  }\n  const keyBuffer = await resp.arrayBuffer();\n  return new Uint8Array(keyBuffer);\n};\n\nexport const setupNativeFairplayDRM = (\n  props: Partial<Pick<MuxMediaPropsInternal, 'playbackId' | 'tokens' | 'playbackToken' | 'customDomain' | 'drmTypeCb'>>,\n  mediaEl: HTMLMediaElement\n) => {\n  const onFpEncrypted = async (event: MediaEncryptedEvent) => {\n    try {\n      const initDataType = event.initDataType;\n      if (initDataType !== 'skd') {\n        console.error(`Received unexpected initialization data type \"${initDataType}\"`);\n        return;\n      }\n\n      if (!mediaEl.mediaKeys) {\n        const access = await navigator\n          .requestMediaKeySystemAccess('com.apple.fps', [\n            {\n              initDataTypes: [initDataType],\n              videoCapabilities: [{ contentType: 'application/vnd.apple.mpegurl', robustness: '' }],\n              distinctiveIdentifier: 'not-allowed',\n              persistentState: 'not-allowed',\n              sessionTypes: ['temporary'],\n            },\n          ])\n          .then((value) => {\n            props.drmTypeCb?.(DRMType.FAIRPLAY);\n            return value;\n          })\n          .catch(() => {\n            const message = i18n(\n              'Cannot play DRM-protected content with current security configuration on this browser. Try playing in another browser.'\n            );\n            // Should we flag this as a business exception?\n            const mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, true);\n            mediaError.errorCategory = MuxErrorCategory.DRM;\n            mediaError.muxCode = MuxErrorCode.ENCRYPTED_UNSUPPORTED_KEY_SYSTEM;\n            saveAndDispatchError(mediaEl, mediaError);\n          });\n\n        if (!access) return;\n\n        const keys = await access.createMediaKeys();\n\n        try {\n          const fairPlayAppCert = await getAppCertificate(toAppCertURL(props, 'fairplay')).catch((errOrResp) => {\n            if (errOrResp instanceof Response) {\n              const mediaError = getErrorFromResponse(errOrResp, MuxErrorCategory.DRM, props);\n              console.error('mediaError', mediaError?.message, mediaError?.context);\n              if (mediaError) {\n                return Promise.reject(mediaError);\n              }\n              // NOTE: This should never happen. Adding for exhaustiveness (CJP).\n              return Promise.reject(new Error('Unexpected error in app cert request'));\n            }\n            return Promise.reject(errOrResp);\n          });\n          await keys.setServerCertificate(fairPlayAppCert).catch(() => {\n            const message = i18n(\n              'Your server certificate failed when attempting to set it. This may be an issue with a no longer valid certificate.'\n            );\n            const mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, true);\n            mediaError.errorCategory = MuxErrorCategory.DRM;\n            mediaError.muxCode = MuxErrorCode.ENCRYPTED_UPDATE_SERVER_CERT_FAILED;\n            return Promise.reject(mediaError);\n          });\n          // @ts-ignore\n        } catch (error: Error | MediaError) {\n          saveAndDispatchError(mediaEl, error);\n          return;\n        }\n        await mediaEl.setMediaKeys(keys);\n      }\n\n      const initData = event.initData;\n      if (initData == null) {\n        console.error(`Could not start encrypted playback due to missing initData in ${event.type} event`);\n        return;\n      }\n\n      const session = (mediaEl.mediaKeys as MediaKeys).createSession();\n      session.addEventListener('keystatuseschange', () => {\n        // recheck key statuses\n        // NOTE: As an improvement, we could also add checks for a status of 'expired' and\n        // attempt to renew the license here (CJP)\n        session.keyStatuses.forEach((mediaKeyStatus) => {\n          let mediaError;\n          if (mediaKeyStatus === 'internal-error') {\n            const message = i18n(\n              'The DRM Content Decryption Module system had an internal failure. Try reloading the page, upading your browser, or playing in another browser.'\n            );\n            mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, true);\n            mediaError.errorCategory = MuxErrorCategory.DRM;\n            mediaError.muxCode = MuxErrorCode.ENCRYPTED_CDM_ERROR;\n          } else if (mediaKeyStatus === 'output-restricted' || mediaKeyStatus === 'output-downscaled') {\n            const message = i18n(\n              'DRM playback is being attempted in an environment that is not sufficiently secure. User may see black screen.'\n            );\n            // NOTE: When encountered, this is a non-fatal error (though it's certainly interruptive of standard playback experience). (CJP)\n            mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, false);\n            mediaError.errorCategory = MuxErrorCategory.DRM;\n            mediaError.muxCode = MuxErrorCode.ENCRYPTED_OUTPUT_RESTRICTED;\n          }\n\n          if (mediaError) {\n            saveAndDispatchError(mediaEl, mediaError);\n          }\n        });\n      });\n      const message = await Promise.all([\n        session.generateRequest(initDataType, initData).catch(() => {\n          // eslint-disable-next-line no-shadow\n          const message = i18n(\n            'Failed to generate a DRM license request. This may be an issue with the player or your protected content.'\n          );\n          const mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, true);\n          mediaError.errorCategory = MuxErrorCategory.DRM;\n          mediaError.muxCode = MuxErrorCode.ENCRYPTED_GENERATE_REQUEST_FAILED;\n          saveAndDispatchError(mediaEl, mediaError);\n        }),\n        new Promise<MediaKeyMessageEvent['message']>((resolve) => {\n          session.addEventListener(\n            'message',\n            (messageEvent) => {\n              resolve(messageEvent.message);\n            },\n            { once: true }\n          );\n        }),\n      ]).then(([, messageEventMsg]) => messageEventMsg);\n\n      const response = await getLicenseKey(message, toLicenseKeyURL(props, 'fairplay')).catch((errOrResp) => {\n        if (errOrResp instanceof Response) {\n          const mediaError = getErrorFromResponse(errOrResp, MuxErrorCategory.DRM, props);\n          console.error('mediaError', mediaError?.message, mediaError?.context);\n          if (mediaError) {\n            return Promise.reject(mediaError);\n          }\n          // NOTE: This should never happen. Adding for exhaustiveness (CJP).\n          return Promise.reject(new Error('Unexpected error in license key request'));\n        }\n        return Promise.reject(errOrResp);\n      });\n      await session.update(response).catch(() => {\n        // eslint-disable-next-line no-shadow\n        const message = i18n(\n          'Failed to update DRM license. This may be an issue with the player or your protected content.'\n        );\n        const mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, true);\n        mediaError.errorCategory = MuxErrorCategory.DRM;\n        mediaError.muxCode = MuxErrorCode.ENCRYPTED_UPDATE_LICENSE_FAILED;\n        return Promise.reject(mediaError);\n      });\n      // @ts-ignore\n    } catch (error: Error | MediaError) {\n      saveAndDispatchError(mediaEl, error);\n      return;\n    }\n  };\n\n  addEventListenerWithTeardown(mediaEl, 'encrypted', onFpEncrypted);\n};\n\nexport const toLicenseKeyURL = (\n  {\n    playbackId: playbackIdWithParams,\n    tokens: { drm: token } = {},\n    customDomain = MUX_VIDEO_DOMAIN,\n  }: Partial<Pick<MuxMediaPropsInternal, 'playbackId' | 'tokens' | 'customDomain'>>,\n  scheme: 'widevine' | 'playready' | 'fairplay'\n) => {\n  const playbackId = toPlaybackIdFromParameterized(playbackIdWithParams);\n  // NOTE: Mux Video currently doesn't support custom domains for license/DRM endpoints, but\n  // customDomain can also be used for internal use cases, so treat that as an exception case for now. (CJP)\n  const domain = customDomain.toLocaleLowerCase().endsWith(MUX_VIDEO_DOMAIN) ? customDomain : MUX_VIDEO_DOMAIN;\n  return `https://license.${domain}/license/${scheme}/${playbackId}?token=${token}`;\n};\n\nexport const toAppCertURL = (\n  {\n    playbackId: playbackIdWithParams,\n    tokens: { drm: token } = {},\n    customDomain = MUX_VIDEO_DOMAIN,\n  }: Partial<Pick<MuxMediaPropsInternal, 'playbackId' | 'tokens' | 'customDomain'>>,\n  scheme: 'widevine' | 'playready' | 'fairplay'\n) => {\n  const playbackId = toPlaybackIdFromParameterized(playbackIdWithParams);\n  // NOTE: Mux Video currently doesn't support custom domains for license/DRM endpoints, but\n  // customDomain can also be used for internal use cases, so treat that as an exception case for now. (CJP)\n  const domain = customDomain.toLocaleLowerCase().endsWith(MUX_VIDEO_DOMAIN) ? customDomain : MUX_VIDEO_DOMAIN;\n  return `https://license.${domain}/appcert/${scheme}/${playbackId}?token=${token}`;\n};\n\nexport const isMuxVideoSrc = ({\n  playbackId,\n  src,\n  customDomain,\n}: Partial<Pick<MuxMediaPropsInternal, 'playbackId' | 'src' | 'customDomain'>>) => {\n  if (!!playbackId) return true;\n  // having no playback id and no src string should never actually happen, but could\n  if (typeof src !== 'string') return false;\n  // Include base for relative paths\n  const base = window?.location.href;\n  const hostname = new URL(src, base).hostname.toLocaleLowerCase();\n\n  return hostname.includes(MUX_VIDEO_DOMAIN) || (!!customDomain && hostname.includes(customDomain.toLocaleLowerCase()));\n};\n\nexport const setupMux = (\n  props: Partial<\n    Pick<\n      MuxMediaPropsInternal,\n      | 'envKey'\n      | 'playerInitTime'\n      | 'beaconCollectionDomain'\n      | 'errorTranslator'\n      | 'metadata'\n      | 'debug'\n      | 'playerSoftwareName'\n      | 'playerSoftwareVersion'\n      | 'playbackId'\n      | 'src'\n      | 'customDomain'\n      | 'disableCookies'\n      | 'disableTracking'\n      | 'muxDataSDK'\n      | 'muxDataSDKOptions'\n    >\n  >,\n  mediaEl: HTMLMediaElement,\n  hlsjs?: HlsInterface\n) => {\n  const { envKey: env_key, disableTracking, muxDataSDK = mux, muxDataSDKOptions = {} } = props;\n  const inferredEnv = isMuxVideoSrc(props);\n\n  if (!disableTracking && (env_key || inferredEnv)) {\n    const {\n      playerInitTime: player_init_time,\n      playerSoftwareName: player_software_name,\n      playerSoftwareVersion: player_software_version,\n      beaconCollectionDomain,\n      debug,\n      disableCookies,\n    } = props;\n\n    const metadata = {\n      ...props.metadata,\n      video_title: props?.metadata?.video_title || undefined,\n    };\n\n    const muxEmbedErrorTranslator = (error: ErrorEvent) => {\n      // mux-embed auto tracks fatal hls.js errors, turn it off.\n      // playback-core will emit errors with a numeric code manually to mux-embed.\n      if (typeof error.player_error_code === 'string') return false;\n\n      if (typeof props.errorTranslator === 'function') {\n        return props.errorTranslator(error);\n      }\n\n      return error;\n    };\n\n    muxDataSDK.monitor(mediaEl, {\n      debug,\n      beaconCollectionDomain,\n      hlsjs,\n      Hls: hlsjs ? Hls : undefined,\n      automaticErrorTracking: false,\n      errorTranslator: muxEmbedErrorTranslator,\n      disableCookies,\n      ...muxDataSDKOptions,\n      data: {\n        ...(env_key ? { env_key } : {}),\n        // Metadata fields\n        player_software_name,\n        // NOTE: Adding this because there appears to be some instability on whether\n        // player_software_name or player_software \"wins\" for Mux Data (CJP)\n        player_software: player_software_name,\n        player_software_version,\n        player_init_time,\n        // Use any metadata passed in programmatically (which may override the defaults above)\n        ...metadata,\n      },\n    });\n  }\n};\n\nexport const loadMedia = (\n  props: Partial<\n    Pick<\n      MuxMediaProps,\n      | 'preferPlayback'\n      | 'src'\n      | 'type'\n      | 'startTime'\n      | 'streamType'\n      | 'autoplay'\n      | 'playbackId'\n      | 'tokens'\n      | 'customDomain'\n    >\n  >,\n  mediaEl: HTMLMediaElement,\n  hls?: Pick<\n    Hls,\n    | 'config'\n    | 'on'\n    | 'once'\n    | 'off'\n    | 'trigger'\n    | 'startLoad'\n    | 'stopLoad'\n    | 'recoverMediaError'\n    | 'destroy'\n    | 'loadSource'\n    | 'attachMedia'\n    | 'liveSyncPosition'\n    | 'subtitleTracks'\n    | 'subtitleTrack'\n    | 'userConfig'\n    | 'audioTrack'\n    | 'audioTracks'\n    | 'autoLevelEnabled'\n    | 'nextLevel'\n    | 'levels'\n    | 'currentLevel'\n  >\n) => {\n  const shouldUseNative = useNative(props, mediaEl);\n  const { src, customDomain = MUX_VIDEO_DOMAIN } = props;\n\n  const maybeDispatchEndedCallback = () => {\n    // We want to early bail if the underlying media element is already in an ended state,\n    // since that means it will have already fired the ended event.\n    // Do the \"cheaper\" check first\n    if (mediaEl.ended) return;\n    const pseudoEnded = getEnded(mediaEl, hls);\n    if (!pseudoEnded) return;\n\n    if (isStuckOnLastFragment(mediaEl, hls)) {\n      // Nudge the playhead in this case.\n      mediaEl.currentTime = mediaEl.buffered.end(mediaEl.buffered.length - 1);\n    } else {\n      mediaEl.dispatchEvent(new Event('ended'));\n    }\n  };\n\n  let prevSeekableStart: number | undefined;\n  let prevSeekableEnd: number | undefined;\n\n  const seekableChange = () => {\n    const seekableTimeRanges = getSeekable(mediaEl);\n    let nextSeekableStart: number | undefined;\n    let nextSeekableEnd: number | undefined;\n    if (seekableTimeRanges.length > 0) {\n      nextSeekableStart = seekableTimeRanges.start(0);\n      nextSeekableEnd = seekableTimeRanges.end(0);\n    }\n    if (prevSeekableEnd !== nextSeekableEnd || prevSeekableStart !== nextSeekableStart) {\n      mediaEl.dispatchEvent(new CustomEvent('seekablechange', { composed: true }));\n    }\n    prevSeekableStart = nextSeekableStart;\n    prevSeekableEnd = nextSeekableEnd;\n  };\n\n  // Make sure we track transitions from infinite to finite durations for seekable changes as well.\n  addEventListenerWithTeardown(mediaEl, 'durationchange', seekableChange);\n\n  if (mediaEl && shouldUseNative) {\n    const type = getType(props);\n\n    if (typeof src === 'string') {\n      // Fetch the Mux metadata JSON even on preload=none because it's needed for the Mux logo.\n      if (src.endsWith('.mp4') && src.includes(customDomain)) {\n        const playbackId = toPlaybackIdFromSrc(src);\n        const metadataUrl = new URL(`https://stream.${customDomain}/${playbackId}/metadata.json`);\n        fetchAndDispatchMuxMetadata(metadataUrl.toString(), mediaEl);\n      }\n\n      // NOTE: This should only be invoked after stream type has been\n      // derived after stream type has been determined.\n      const setupSeekableChangePoll = () => {\n        // Only monitor for seekable updates if StreamType is \"live\" and duration is not finite.\n        if (getStreamType(mediaEl) !== StreamTypes.LIVE || Number.isFinite(mediaEl.duration)) return;\n\n        // Use 1 second since in this context we don't know what the rate of updates\n        // should/will be.\n        // NOTE: We *could* derive the interval rate if we wanted to add logic to our playlist parsing to\n        // account for the per-spec rate of media playlist GETs. See:\n        // https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-14#section-6.3.4 (CJP)\n        const intervalId = setInterval(seekableChange, 1000);\n\n        // Make sure we clean up after ourselves.\n        mediaEl.addEventListener(\n          'teardown',\n          () => {\n            clearInterval(intervalId);\n          },\n          { once: true }\n        );\n\n        // Assume we're done updating seekable when the duration is finite, which\n        // occurs when e.g. an HLS playlist is ended (`#EXT-X-ENDLIST`).\n        addEventListenerWithTeardown(mediaEl, 'durationchange', () => {\n          if (!Number.isFinite(mediaEl.duration)) return;\n          clearInterval(intervalId);\n        });\n      };\n\n      const setupNativeStreamInfo = async () => {\n        return updateStreamInfoFromSrc(src, mediaEl, type)\n          .then(setupSeekableChangePoll)\n          .catch((errOrResp: Response | Error) => {\n            if (errOrResp instanceof Response) {\n              const mediaError = getErrorFromResponse(errOrResp, MuxErrorCategory.VIDEO, props);\n              if (mediaError) {\n                saveAndDispatchError(mediaEl, mediaError);\n                return;\n              }\n            } else if (errOrResp instanceof Error) {\n              // mediaEl.dispatchEvent(new MediaError())\n            }\n          });\n      };\n\n      if (mediaEl.preload === 'none') {\n        // NOTE: Previously, we relied on the 'loadstart' event to fetch & parse playlists for stream\n        // info for native playback scenarios. Unfortunately, per spec this event will be dispatched\n        // regardless of the preload state and regardless of whether or not fetching of the src media\n        // has, in fact, begun. In order to respect the provided preferences and avoid eager loading\n        // while still attempting to begin fetching playlists for stream info as early as possible when\n        // media *will* be loaded, we will do a \"first to the finish line\" on both the 'play' event,\n        // which will be dispatched earlier *if* it is the event that initiates media loading, and the\n        // 'loadedmetadata' event, which is dispatched only after the media has finished loading metadata,\n        // but will reliably correlate with media loading. (CJP)\n        // For more, see: Steps 7 & 8 of 'the resource selection algorithm' from §4.8.11.5 Loading the\n        // media resource in the HTML Living Standard\n        // (https://html.spec.whatwg.org/multipage/media.html#concept-media-load-algorithm)\n        const playHandler = () => {\n          setupNativeStreamInfo();\n          mediaEl.removeEventListener('loadedmetadata', loadedMetadataHandler);\n        };\n        const loadedMetadataHandler = () => {\n          setupNativeStreamInfo();\n          mediaEl.removeEventListener('play', playHandler);\n        };\n        addEventListenerWithTeardown(mediaEl, 'play', playHandler, { once: true });\n        addEventListenerWithTeardown(mediaEl, 'loadedmetadata', loadedMetadataHandler, { once: true });\n      } else {\n        setupNativeStreamInfo();\n      }\n\n      // NOTE: Currently use drmToken to signal that playback is expected to be DRM-protected\n      if (props.tokens?.drm) {\n        setupNativeFairplayDRM(props, mediaEl);\n      } else {\n        // If we end up receiving an encrypted event in this case, that means the media is DRM-protected\n        // but a token was not provided.\n        addEventListenerWithTeardown(\n          mediaEl,\n          'encrypted',\n          () => {\n            const message = i18n('Attempting to play DRM-protected content without providing a DRM token.');\n            const mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, true);\n            mediaError.errorCategory = MuxErrorCategory.DRM;\n            mediaError.muxCode = MuxErrorCode.ENCRYPTED_MISSING_TOKEN;\n            saveAndDispatchError(mediaEl, mediaError);\n          },\n          { once: true }\n        );\n      }\n\n      mediaEl.setAttribute('src', src);\n\n      if (props.startTime) {\n        (muxMediaState.get(mediaEl) ?? {}).startTime = props.startTime;\n        // seekable is set to the range of the entire video once durationchange fires\n        mediaEl.addEventListener('durationchange', seekInSeekableRange, { once: true });\n      }\n    } else {\n      mediaEl.removeAttribute('src');\n    }\n\n    mediaEl.addEventListener('error', handleNativeError);\n    mediaEl.addEventListener('error', handleInternalError);\n    mediaEl.addEventListener(\n      'emptied',\n      () => {\n        const trackEls: NodeListOf<HTMLTrackElement> = mediaEl.querySelectorAll('track[data-removeondestroy]');\n        trackEls.forEach((trackEl) => {\n          trackEl.remove();\n        });\n      },\n      { once: true }\n    );\n\n    addEventListenerWithTeardown(mediaEl, 'pause', maybeDispatchEndedCallback);\n    // NOTE: Browsers do not consistently fire an 'ended' event upon seeking to the\n    // end of the media while already paused. This was due to an ambiguity in the\n    // HTML specification, but is now more explicit.\n    // See: https://html.spec.whatwg.org/multipage/media.html#reaches-the-end (CJP)\n    addEventListenerWithTeardown(mediaEl, 'seeked', maybeDispatchEndedCallback);\n\n    addEventListenerWithTeardown(mediaEl, 'play', () => {\n      if (mediaEl.ended) return;\n      if (!isApproximatelyGTE(mediaEl.currentTime, mediaEl.duration)) return;\n      // If we were \"pseudo-ended\" before playback was attempted, seek back to the\n      // beginning to \"replay\", like \"real\" ended behavior.\n      mediaEl.currentTime = mediaEl.seekable.length ? mediaEl.seekable.start(0) : 0;\n    });\n  } else if (hls && src) {\n    hls.once(Hls.Events.LEVEL_LOADED, (_evt, data) => {\n      updateStreamInfoFromHlsjsLevelDetails(data.details, mediaEl, hls);\n      seekableChange();\n      // Only monitor for seekable updates if StreamType is \"live\" and duration is not finite.\n      if (getStreamType(mediaEl) === StreamTypes.LIVE && !Number.isFinite(mediaEl.duration)) {\n        hls.on(Hls.Events.LEVEL_UPDATED, seekableChange);\n\n        // Assume we're done updating seekable when the duration is finite, which\n        // occurs when e.g. an HLS playlist is ended (`#EXT-X-ENDLIST`).\n        addEventListenerWithTeardown(mediaEl, 'durationchange', () => {\n          if (!Number.isFinite(mediaEl.duration)) return;\n          hls.off(Hls.Events.LEVELS_UPDATED, seekableChange);\n        });\n      }\n    });\n\n    hls.on(Hls.Events.ERROR, (_event, data) => {\n      const error = getErrorFromHlsErrorData(data, props);\n\n      if (error.muxCode === MuxErrorCode.NETWORK_NOT_READY) {\n        const maxRetries = 6; // 5 minutes and 5 seconds total (5s, 60s, 60s, 60s, 60s, 60s)\n        const state = muxMediaState.get(mediaEl) ?? {};\n        const retryCount = state.retryCount ?? 0;\n\n        if (retryCount < maxRetries) {\n          // First retry is 5 seconds, subsequent retries are 60 seconds\n          const retryDelay = retryCount === 0 ? 5000 : 60000;\n\n          // New error with the retry delay\n          const retryDelayError = new MediaError(\n            `Retrying in ${retryDelay / 1000} seconds...`,\n            error.code,\n            error.fatal\n          );\n          Object.assign(retryDelayError, error);\n          saveAndDispatchError(mediaEl, retryDelayError);\n\n          setTimeout(() => {\n            state.retryCount = retryCount + 1;\n            if (data.details === 'manifestLoadError' && data.url) {\n              hls.loadSource(data.url);\n            }\n          }, retryDelay);\n          return;\n        } else {\n          state.retryCount = 0;\n          // New error with the retry link\n          const retryLinkError = new MediaError(\n            'Try again later or <a href=\"#\" onclick=\"window.location.reload(); return false;\" style=\"color: #4a90e2;\">click here to retry</a>',\n            error.code,\n            error.fatal\n          );\n          Object.assign(retryLinkError, error);\n          saveAndDispatchError(mediaEl, retryLinkError);\n          return;\n        }\n      }\n      saveAndDispatchError(mediaEl, error);\n    });\n\n    hls.on(Hls.Events.MANIFEST_LOADED, () => {\n      // Clear error state and UI\n      const state = muxMediaState.get(mediaEl);\n      if (state && state.error) {\n        state.error = null;\n        state.retryCount = 0;\n\n        mediaEl.dispatchEvent(new Event('emptied'));\n        mediaEl.dispatchEvent(new Event('loadstart'));\n      }\n    });\n\n    mediaEl.addEventListener('error', handleInternalError);\n    addEventListenerWithTeardown(mediaEl, 'waiting', maybeDispatchEndedCallback);\n\n    setupMediaTracks(props as HTMLMediaElement, hls);\n    setupTextTracks(mediaEl, hls);\n\n    hls.attachMedia(mediaEl);\n  } else {\n    console.error(\n      \"It looks like the video you're trying to play will not work on this system! If possible, try upgrading to the newest versions of your browser or software.\"\n    );\n  }\n};\n\nfunction seekInSeekableRange(event: Event) {\n  const mediaEl = event.target as HTMLMediaElement;\n  const startTime = muxMediaState.get(mediaEl)?.startTime;\n  if (!startTime) return;\n\n  if (inSeekableRange(mediaEl.seekable, mediaEl.duration, startTime)) {\n    // Setting preload to `none` from `auto` was required on iOS to fix a bug\n    // that caused no `timeupdate` events to fire after seeking ¯\\_(ツ)_/¯\n    const wasAuto = mediaEl.preload === 'auto';\n    if (wasAuto) {\n      mediaEl.preload = 'none';\n    }\n\n    mediaEl.currentTime = startTime;\n\n    if (wasAuto) {\n      mediaEl.preload = 'auto';\n    }\n  }\n}\n\nasync function handleNativeError(event: Event) {\n  // Return if the event was created or modified by a script or dispatched\n  // via EventTarget.dispatchEvent() preventing an infinite loop.\n  if (!event.isTrusted) return;\n\n  // Stop immediate propagation of the native error event, re-dispatch below!\n  event.stopImmediatePropagation();\n\n  const mediaEl = event.target as HTMLMediaElement;\n  // Safari sometimes throws an error event with a null error.\n  if (!mediaEl?.error) return;\n\n  const { message, code } = mediaEl.error;\n  const error = new MediaError(message, code);\n\n  // This accounts for cases where native playback is being used but\n  // a non-200 response occurs on the request for the playback-id's playlist.\n  // In this case, we currently already fetch the playlist in parallel (for\n  // things like inferring the stream type, live edge start window, etc.),\n  // so we'll wait briefly for that response to translate to a more accurate\n  // error.\n  if (\n    mediaEl.src &&\n    code === MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED &&\n    mediaEl.readyState === HTMLMediaElement.HAVE_NOTHING\n  ) {\n    setTimeout(() => {\n      const ourError = getError(mediaEl) ?? mediaEl.error;\n      // If the code is (still) MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED,\n      // assume it's an (unlikely) case where we did, in fact, encounter\n      // media that is unsupported.\n      if (ourError?.code === MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED) {\n        saveAndDispatchError(mediaEl, error);\n      }\n      // Since a parallel request for the source should be initiated to determine\n      // stream info (e.g. streamType) at roughly the same time as when the source\n      // is loaded by the media element, we should be able to keep this timeout short.\n      // NOTE: Although there is a case where the parallel request may happen later\n      // (namely, after metadata is loaded), this should be mutually exclusive from\n      // the case we're accounting for here, since unsupported media should not\n      // ever get metadata loaded in the first place. (CJP)\n    }, 500);\n    return;\n  }\n\n  if (mediaEl.src && (code !== MediaError.MEDIA_ERR_DECODE || code !== undefined)) {\n    // Attempt to get the response code from the video src url.\n    try {\n      const { status } = await fetch(mediaEl.src);\n      // Use the same hls.js data structure.\n      error.data = { response: { code: status } };\n    } catch {}\n  }\n\n  saveAndDispatchError(mediaEl, error);\n}\n\nfunction saveAndDispatchError(mediaEl: HTMLMediaElement, error: MediaError) {\n  // Prevent dispatching non-fatal errors.\n  if (!error.fatal) return;\n\n  (muxMediaState.get(mediaEl) ?? {}).error = error as unknown as HTMLMediaElement['error'];\n\n  mediaEl.dispatchEvent(\n    new CustomEvent('error', {\n      detail: error,\n    })\n  );\n}\n\n/**\n * Use a event listener instead of a function call when dispatching the Custom error\n * event so consumers are still able to disable or intercept this error event.\n * @param {Event} event\n */\nfunction handleInternalError(event: Event | CustomEvent<MediaError>) {\n  if (!(event instanceof CustomEvent) || !(event.detail instanceof MediaError)) return;\n\n  const mediaEl = event.target as HTMLMediaElement;\n  const error = event.detail;\n  // Prevent tracking non-fatal errors in Mux data.\n  if (!error || !error.fatal) return;\n\n  (muxMediaState.get(mediaEl) ?? {}).error = error as unknown as HTMLMediaElement['error'];\n\n  // Only pass valid mux-embed props: player_error_code, player_error_message, player_error_context\n  mediaEl.mux?.emit('error', {\n    player_error_code: error.code,\n    player_error_message: error.message,\n    player_error_context: error.context,\n  });\n}\n\nconst getErrorFromHlsErrorData = (\n  data: ErrorData,\n  props: Partial<Pick<MuxMediaPropsInternal, 'playbackId' | 'drmToken' | 'playbackToken' | 'tokens'>>\n) => {\n  console.error('getErrorFromHlsErrorData()', data);\n\n  const ErrorCodeMap: Partial<Record<ValueOf<typeof Hls.ErrorTypes>, 0 | 1 | 2 | 3 | 4 | 5>> = {\n    [Hls.ErrorTypes.NETWORK_ERROR]: MediaError.MEDIA_ERR_NETWORK,\n    [Hls.ErrorTypes.MEDIA_ERROR]: MediaError.MEDIA_ERR_DECODE,\n    [Hls.ErrorTypes.KEY_SYSTEM_ERROR]: MediaError.MEDIA_ERR_ENCRYPTED,\n  } as const;\n\n  // eslint-disable-next-line no-shadow\n  const hlsErrorDataToErrorCode = (data: ErrorData) => {\n    if (\n      [\n        Hls.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,\n        Hls.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,\n      ].includes(data.details)\n    ) {\n      return MediaError.MEDIA_ERR_NETWORK;\n    }\n    return ErrorCodeMap[data.type];\n  };\n\n  // eslint-disable-next-line no-shadow\n  const hlsErrorDataToCategory = (data: ErrorData) => {\n    if (data.type === Hls.ErrorTypes.KEY_SYSTEM_ERROR) return MuxErrorCategory.DRM;\n    if (data.type === Hls.ErrorTypes.NETWORK_ERROR) return MuxErrorCategory.VIDEO;\n  };\n\n  let mediaError: MediaError;\n  const errorCode = hlsErrorDataToErrorCode(data);\n  if (errorCode === MediaError.MEDIA_ERR_NETWORK && data.response) {\n    const category = hlsErrorDataToCategory(data) ?? MuxErrorCategory.VIDEO;\n    mediaError =\n      getErrorFromResponse(data.response, category, props, data.fatal) ?? new MediaError('', errorCode, data.fatal);\n  } else if (errorCode === MediaError.MEDIA_ERR_ENCRYPTED) {\n    if (data.details === Hls.ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE) {\n      const message = i18n('Attempting to play DRM-protected content without providing a DRM token.');\n      mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, data.fatal);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_MISSING_TOKEN;\n    } else if (data.details === Hls.ErrorDetails.KEY_SYSTEM_NO_ACCESS) {\n      /** @TODO For UI message add suggestion to try another browser */\n      const message = i18n(\n        'Cannot play DRM-protected content with current security configuration on this browser. Try playing in another browser.'\n      );\n      // Should we flag this as a business exception?\n      mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, data.fatal);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_UNSUPPORTED_KEY_SYSTEM;\n    } else if (data.details === Hls.ErrorDetails.KEY_SYSTEM_NO_SESSION) {\n      const message = i18n(\n        'Failed to generate a DRM license request. This may be an issue with the player or your protected content.'\n      );\n      // NOTE: For some reason, perhaps due to issues with EXT-X-KEY parsing, hls.js defines this as a non-fatal error.\n      // For us, we should be able to assume it is instead fatal. (CJP)\n      mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, true);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_GENERATE_REQUEST_FAILED;\n    } else if (data.details === Hls.ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED) {\n      const message = i18n(\n        'Failed to update DRM license. This may be an issue with the player or your protected content.'\n      );\n      mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, data.fatal);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_UPDATE_LICENSE_FAILED;\n    } else if (data.details === Hls.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED) {\n      const message = i18n(\n        'Your server certificate failed when attempting to set it. This may be an issue with a no longer valid certificate.'\n      );\n      mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, data.fatal);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_UPDATE_SERVER_CERT_FAILED;\n    } else if (data.details === Hls.ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR) {\n      const message = i18n(\n        'The DRM Content Decryption Module system had an internal failure. Try reloading the page, upading your browser, or playing in another browser.'\n      );\n      mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, data.fatal);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_CDM_ERROR;\n    } else if (data.details === Hls.ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED) {\n      const message = i18n(\n        'DRM playback is being attempted in an environment that is not sufficiently secure. User may see black screen.'\n      );\n      // NOTE: When encountered, this is a non-fatal error (though it's certainly interruptive of standard playback experience). (CJP)\n      mediaError = new MediaError(message, MediaError.MEDIA_ERR_ENCRYPTED, false);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_OUTPUT_RESTRICTED;\n    } else {\n      mediaError = new MediaError(data.error.message, MediaError.MEDIA_ERR_ENCRYPTED, data.fatal);\n      mediaError.errorCategory = MuxErrorCategory.DRM;\n      mediaError.muxCode = MuxErrorCode.ENCRYPTED_ERROR;\n    }\n  } else {\n    mediaError = new MediaError('', errorCode, data.fatal);\n  }\n  if (!mediaError.context) {\n    mediaError.context =\n      `${data.url ? `url: ${data.url}\\n` : ''}` +\n      `${\n        data.response && (data.response.code || data.response.text)\n          ? `response: ${data.response.code}, ${data.response.text}\\n`\n          : ''\n      }` +\n      `${data.reason ? `failure reason: ${data.reason}\\n` : ''}` +\n      `${data.level ? `level: ${data.level}\\n` : ''}` +\n      `${data.parent ? `parent stream controller: ${data.parent}\\n` : ''}` +\n      `${data.buffer ? `buffer length: ${data.buffer}\\n` : ''}` +\n      `${data.error ? `error: ${data.error}\\n` : ''}` +\n      `${data.event ? `event: ${data.event}\\n` : ''}` +\n      `${data.err ? `error message: ${data.err?.message}\\n` : ''}`;\n  }\n  mediaError.data = data;\n  return mediaError;\n};\n","import Hls from 'hls.js';\nimport type HlsClassType from 'hls.js';\nexport default Hls;\nexport type HlsInterface = HlsClassType;\n","// Identifies what kind of request was made that resulted in an error\nexport const MuxErrorCategory = {\n  VIDEO: 'video',\n  THUMBNAIL: 'thumbnail',\n  STORYBOARD: 'storyboard',\n  DRM: 'drm',\n} as const;\n\nexport const MuxErrorCode = {\n  NOT_AN_ERROR: 0,\n  NETWORK_OFFLINE: 2000002,\n  NETWORK_UNKNOWN_ERROR: 2000000,\n  NETWORK_NO_STATUS: 2000001,\n  NETWORK_INVALID_URL: 2400000,\n  NETWORK_NOT_FOUND: 2404000,\n  NETWORK_NOT_READY: 2412000,\n  NETWORK_GENERIC_SERVER_FAIL: 2500000,\n  NETWORK_TOKEN_MISSING: 2403201,\n  NETWORK_TOKEN_MALFORMED: 2412202,\n  NETWORK_TOKEN_EXPIRED: 2403210,\n  NETWORK_TOKEN_AUD_MISSING: 2403221,\n  NETWORK_TOKEN_AUD_MISMATCH: 2403222,\n  NETWORK_TOKEN_SUB_MISMATCH: 2403232,\n  ENCRYPTED_ERROR: 5000000, // Generic\n  ENCRYPTED_UNSUPPORTED_KEY_SYSTEM: 5000001,\n  ENCRYPTED_GENERATE_REQUEST_FAILED: 5000002,\n  ENCRYPTED_UPDATE_LICENSE_FAILED: 5000003,\n  ENCRYPTED_UPDATE_SERVER_CERT_FAILED: 5000004,\n  ENCRYPTED_CDM_ERROR: 5000005,\n  ENCRYPTED_OUTPUT_RESTRICTED: 5000006,\n  ENCRYPTED_MISSING_TOKEN: 5000002,\n} as const;\n\nexport type MuxErrorCategory = typeof MuxErrorCategory;\nexport type MuxErrorCode = typeof MuxErrorCode;\n\nexport type MuxErrorCategoryValue = MuxErrorCategory[keyof MuxErrorCategory];\nexport type MuxErrorCodeValue = MuxErrorCode[keyof MuxErrorCode];\n\nexport const errorCategoryToTokenNameOrPrefix = (category: MuxErrorCategoryValue) => {\n  if (category === MuxErrorCategory.VIDEO) return 'playback';\n  return category;\n};\n\n// Typescript says it's strictly a string, but it can also be a number or an object with a toString method.\n// https://github.com/microsoft/TypeScript/issues/6032\n// https://262.ecma-international.org/6.0/#sec-error-message\n\ntype Stringable = string | { toString(): string };\n\ndeclare global {\n  interface ErrorConstructor {\n    new (message?: Stringable): Error;\n    (message?: Stringable): Error;\n    readonly prototype: Error;\n  }\n}\n\nexport class MediaError extends Error {\n  static MEDIA_ERR_ABORTED = 1 as const;\n  static MEDIA_ERR_NETWORK = 2 as const;\n  static MEDIA_ERR_DECODE = 3 as const;\n  static MEDIA_ERR_SRC_NOT_SUPPORTED = 4 as const;\n  static MEDIA_ERR_ENCRYPTED = 5 as const;\n  // @see https://docs.mux.com/guides/data/monitor-html5-video-element#customize-error-tracking-behavior\n  static MEDIA_ERR_CUSTOM = 100;\n\n  static defaultMessages: Record<number, string> = {\n    1: 'You aborted the media playback',\n    2: 'A network error caused the media download to fail.',\n    3: 'A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.',\n    4: 'An unsupported error occurred. The server or network failed, or your browser does not support this format.',\n    5: 'The media is encrypted and there are no keys to decrypt it.',\n  };\n\n  name: string;\n  code: number;\n  public muxCode?: MuxErrorCodeValue;\n  public errorCategory?: MuxErrorCategoryValue;\n  context?: string;\n  fatal: boolean;\n  data?: any;\n  streamType?: 'live' | 'on-demand' | 'unknown';\n\n  constructor(message?: Stringable, code: number = MediaError.MEDIA_ERR_CUSTOM, fatal?: boolean, context?: string) {\n    super(message);\n    this.name = 'MediaError';\n    this.code = code;\n    this.context = context;\n    this.fatal = fatal ?? (code >= MediaError.MEDIA_ERR_NETWORK && code <= MediaError.MEDIA_ERR_ENCRYPTED);\n\n    if (!this.message) {\n      this.message = MediaError.defaultMessages[this.code] ?? '';\n    }\n  }\n}\n","/* eslint @typescript-eslint/triple-slash-reference: \"off\" */\n/// <reference path=\"../../../node_modules/mux-embed/dist/types/mux-embed.d.ts\" preserve=\"true\" />\nimport type { Options, Mux } from 'mux-embed';\nimport type { MediaError } from './errors';\nimport type { HlsConfig } from 'hls.js';\nimport type Hls from 'hls.js';\n\ntype KeyTypes = string | number | symbol;\ntype Maybe<T> = T | null | undefined;\n\nconst isNil = (x: unknown): x is null | undefined => x == undefined;\n\n// Type Guard to determine if a given key is actually a key of some object of type T\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport const isKeyOf = <T extends {} = any>(k: KeyTypes, o: Maybe<T>): k is keyof T => {\n  if (isNil(o)) return false;\n  return k in o;\n};\n\nexport type ValueOf<T> = T[keyof T];\nexport type Metadata = Partial<Required<Options>['data']>;\ntype MetaData = Metadata;\nexport type PlaybackEngine = Hls;\nexport type MuxDataSDK = Mux;\n\nexport type PlaybackCore = {\n  engine?: PlaybackEngine;\n  muxDataSDK?: MuxDataSDK;\n  setAutoplay: (autoplay?: Autoplay) => void;\n  setPreload: (preload?: HTMLMediaElement['preload']) => void;\n};\n\n// TODO add INVIEW_MUTED, INVIEW_ANY\nexport type AutoplayTypes = {\n  ANY: 'any';\n  MUTED: 'muted';\n};\n\nexport const AutoplayTypes: AutoplayTypes = {\n  ANY: 'any',\n  MUTED: 'muted',\n};\n\nexport type Autoplay = boolean | ValueOf<AutoplayTypes>;\n\nexport type HlsPlaylistTypes = 'VOD' | 'EVENT' | null | undefined;\n\nexport type StreamTypes = {\n  ON_DEMAND: 'on-demand';\n  LIVE: 'live';\n  UNKNOWN: 'unknown';\n};\n\nexport const StreamTypes: StreamTypes = {\n  ON_DEMAND: 'on-demand',\n  LIVE: 'live',\n  UNKNOWN: 'unknown',\n};\n\nexport type PlaybackTypes = {\n  MSE: 'mse';\n  NATIVE: 'native';\n};\n\nexport const PlaybackTypes: PlaybackTypes = {\n  MSE: 'mse',\n  NATIVE: 'native',\n};\n\nexport type CmcdTypes = {\n  HEADER: 'header';\n  QUERY: 'query';\n  NONE: 'none';\n};\n\nexport const CmcdTypes: CmcdTypes = {\n  HEADER: 'header',\n  QUERY: 'query',\n  NONE: 'none',\n};\n\nexport const CmcdTypeValues = Object.values(CmcdTypes);\n\nexport type ExtensionMimeTypeMap = {\n  M3U8: 'application/vnd.apple.mpegurl';\n  MP4: 'video/mp4';\n};\n\nexport const ExtensionMimeTypeMap: ExtensionMimeTypeMap = {\n  M3U8: 'application/vnd.apple.mpegurl',\n  MP4: 'video/mp4',\n};\n\nexport type MimeTypeShorthandMap = {\n  HLS: ExtensionMimeTypeMap['M3U8'];\n};\n\nexport const MimeTypeShorthandMap: MimeTypeShorthandMap = {\n  HLS: ExtensionMimeTypeMap.M3U8,\n};\n\nexport const shorthandKeys = Object.keys(MimeTypeShorthandMap);\n\nexport type MediaTypes =\n  | ValueOf<ExtensionMimeTypeMap>\n  | keyof MimeTypeShorthandMap\n  /** @TODO Figure out a way to \"downgrade\" derived types below to early TS syntax (e.g. 3.4) instead of explicit versions here (CJP) */\n  | 'hls';\n// | `${Lowercase<keyof MimeTypeShorthandMap>}`\n// | `${Uppercase<keyof MimeTypeShorthandMap>}`;\n\nexport const allMediaTypes = [\n  ...(Object.values(ExtensionMimeTypeMap) as ValueOf<ExtensionMimeTypeMap>[]),\n  /** @TODO Figure out a way to \"downgrade\" derived types below to early TS syntax (e.g. 3.4) instead of explicit versions here (CJP) */\n  'hls',\n  'HLS',\n  // ...(shorthandKeys as (keyof MimeTypeShorthandMap)[]),\n  // ...(shorthandKeys.map((k) => k.toUpperCase()) as `${Uppercase<keyof MimeTypeShorthandMap>}`[]),\n  // ...(shorthandKeys.map((k) => k.toLowerCase()) as `${Lowercase<keyof MimeTypeShorthandMap>}`[]),\n] as MediaTypes[];\n\n// Both cuepoints and chapters have optional end times\n// so support both joined up and sparse cue placements\ntype CueLike<T = any> = {\n  startTime: number;\n  endTime?: number;\n  value: T;\n};\nexport type CuePoint<T = any> =\n  | CueLike<T> // new shape\n  | { time: number; value: T }; // legacy shape, still supported for now\nexport type Chapter = CueLike<string>;\n\nexport const MaxResolution = {\n  upTo720p: '720p',\n  upTo1080p: '1080p',\n  upTo1440p: '1440p',\n  upTo2160p: '2160p',\n} as const;\n\nexport const MinResolution = {\n  noLessThan480p: '480p',\n  noLessThan540p: '540p',\n  noLessThan720p: '720p',\n  noLessThan1080p: '1080p',\n  noLessThan1440p: '1440p',\n  noLessThan2160p: '2160p',\n} as const;\n\nexport const RenditionOrder = {\n  DESCENDING: 'desc',\n} as const;\n\nexport type MaxResolutionValue = ValueOf<typeof MaxResolution>;\nexport type MinResolutionValue = ValueOf<typeof MinResolution>;\nexport type RenditionOrderValue = ValueOf<typeof RenditionOrder>;\n\nexport type Tokens = {\n  playback?: string;\n  drm?: string;\n  thumbnail?: string;\n  storyboard?: string;\n};\n\nexport type MuxMediaPropTypes = {\n  _hlsConfig?: Partial<HlsConfig>;\n  autoPlay?: Autoplay;\n  autoplay?: Autoplay;\n  beaconCollectionDomain: Options['beaconCollectionDomain'];\n  customDomain: string;\n  debug: Options['debug'] & Hls['config']['debug'];\n  disableCookies: Options['disableCookies'];\n  disableTracking: boolean;\n  drmToken?: string;\n  playbackToken?: string;\n  envKey: MetaData['env_key'];\n  error?: HTMLMediaElement['error'] | MediaError;\n  errorTranslator: Options['errorTranslator'];\n  liveEdgeStart: number;\n  maxResolution: MaxResolutionValue;\n  metadata: Partial<Options['data']>;\n  minResolution: MinResolutionValue;\n  playbackId: string;\n  playerInitTime: MetaData['player_init_time'];\n  preferCmcd: ValueOf<CmcdTypes> | undefined;\n  preferPlayback: ValueOf<PlaybackTypes> | undefined;\n  programStartTime: number;\n  programEndTime: number;\n  assetStartTime: number;\n  assetEndTime: number;\n  renditionOrder: RenditionOrderValue;\n  startTime: Hls['config']['startPosition'];\n  streamType: ValueOf<StreamTypes>;\n  targetLiveWindow: number;\n  tokens: Tokens;\n  type: MediaTypes;\n  extraSourceParams: Record<string, any>;\n};\n\nexport type HTMLMediaElementProps = Partial<Pick<HTMLMediaElement, 'src' | 'preload' | 'error' | 'seekable'>>;\n\nexport type MuxMediaProps = HTMLMediaElementProps & MuxMediaPropTypes;\nexport type MuxMediaPropsInternal = MuxMediaProps & {\n  playerSoftwareName: MetaData['player_software_name'];\n  playerSoftwareVersion: MetaData['player_software_version'];\n  muxDataSDK?: Mux;\n  muxDataSDKOptions?: Mux;\n  muxDataKeepSession?: boolean;\n  drmTypeCb?: (drmType: Metadata['view_drm_type']) => void;\n};\n\n// TODO: Make these more uniform, remove bubbles, discuss to remove detail.\nexport type MuxMediaEventsMap = {\n  cuepointchange: CustomEvent<{ composed: true; bubbles: true; detail: CuePoint }>;\n  chapterchange: CustomEvent<{ composed: true; bubbles: true; detail: Chapter }>;\n  targetlivewindowchange: CustomEvent<{ composed: true; bubbles: true }>;\n  streamtypechange: CustomEvent<{ composed: true; bubbles: true }>;\n  seekablechange: CustomEvent<{ composed: true }>;\n  error: CustomEvent<{ detail: MediaError }>;\n};\n","const code = 'en'; export default { code }","import { isKeyOf, ExtensionMimeTypeMap, MimeTypeShorthandMap, StreamTypes } from './types';\nimport type { HlsPlaylistTypes, MuxMediaProps } from './types';\n// @ts-ignore\nimport lang from '../lang/en.json';\n\ntype addEventListenerWithTeardown = <\n  K extends keyof HTMLMediaElementEventMap,\n  T extends EventTarget = HTMLMediaElement,\n>(\n  mediaEl: HTMLMediaElement,\n  type: K,\n  listener: (this: T, ev: HTMLMediaElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n  target?: T | HTMLMediaElement\n) => void;\n\n// Adds an event listener to a media element that will be removed when an 'teardown' event is dispatched.\n// Using this instead of 'emptied' as that can fire on initial load based on prior state of the media element\n// Will be fired as a result of (directly or indirectly) invoking playback-core's `teardown()` function.\nexport const addEventListenerWithTeardown: addEventListenerWithTeardown = (\n  mediaEl,\n  type,\n  listener,\n  options,\n  target = mediaEl\n) => {\n  /** @TODO fix types (hard problem due to lack of explicit relationship between Element and EventMap definitions) */\n  // @ts-ignore\n  target.addEventListener(type, listener, options);\n  // NOTE: Using custom teardown\n  mediaEl.addEventListener(\n    'teardown',\n    () => {\n      /** @TODO fix types (hard problem due to lack of explicit relationship between Element and EventMap definitions) */\n      // @ts-ignore\n      target.removeEventListener(type, listener);\n    },\n    { once: true }\n  );\n};\n\nexport function inSeekableRange(seekable: TimeRanges, duration: number, time: number) {\n  if (duration && time > duration) {\n    time = duration;\n  }\n  for (let i = 0; i < seekable.length; i++) {\n    if (seekable.start(i) <= time && seekable.end(i) >= time) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const toPlaybackIdParts = (playbackIdWithOptionalParams: string): [string, string?] => {\n  const qIndex = playbackIdWithOptionalParams.indexOf('?');\n  if (qIndex < 0) return [playbackIdWithOptionalParams];\n  const idPart = playbackIdWithOptionalParams.slice(0, qIndex);\n  const queryPart = playbackIdWithOptionalParams.slice(qIndex);\n  return [idPart, queryPart];\n};\n\nexport const getType = (props: Partial<Pick<MuxMediaProps, 'type' | 'src' | 'customDomain'>>) => {\n  const { type } = props;\n  if (type) {\n    const upperType = type.toUpperCase();\n    return isKeyOf(upperType, MimeTypeShorthandMap) ? MimeTypeShorthandMap[upperType] : type;\n  }\n  return inferMimeTypeFromURL(props);\n};\n\nexport const toStreamTypeFromPlaylistType = (playlistType: HlsPlaylistTypes) => {\n  return playlistType === 'VOD' ? StreamTypes.ON_DEMAND : StreamTypes.LIVE;\n};\n\nexport const toTargetLiveWindowFromPlaylistType = (playlistType: HlsPlaylistTypes) => {\n  if (playlistType === 'EVENT') return Number.POSITIVE_INFINITY;\n  if (playlistType === 'VOD') return Number.NaN;\n  return 0;\n};\n\nexport const inferMimeTypeFromURL = (props: Partial<Pick<MuxMediaProps, 'src' | 'customDomain'>>) => {\n  const { src } = props;\n  if (!src) return '';\n\n  let pathname = '';\n  try {\n    pathname = new URL(src).pathname;\n  } catch (_e) {\n    console.error('invalid url');\n  }\n\n  const extDelimIdx = pathname.lastIndexOf('.');\n  if (extDelimIdx < 0) {\n    if (isExtensionLessMuxM3U8URL(props)) {\n      return ExtensionMimeTypeMap.M3U8; // Treat extension-less Mux URLs as HLS\n    }\n    return '';\n  }\n\n  const ext = pathname.slice(extDelimIdx + 1);\n  const upperExt = ext.toUpperCase();\n\n  return isKeyOf(upperExt, ExtensionMimeTypeMap) ? ExtensionMimeTypeMap[upperExt] : '';\n};\n\nconst MUX_VIDEO_DOMAIN = 'mux.com';\nexport const isExtensionLessMuxM3U8URL = ({\n  src,\n  customDomain = MUX_VIDEO_DOMAIN,\n}: Partial<Pick<MuxMediaProps, 'src' | 'customDomain'>>) => {\n  let urlObj;\n  try {\n    urlObj = new URL(`${src}`);\n  } catch {\n    return false;\n  }\n  const validProtocol = urlObj.protocol === 'https:';\n  const validHostname = urlObj.hostname === `stream.${customDomain}`.toLowerCase();\n  const pathParts = urlObj.pathname.split('/');\n  const validPathPartsLength = pathParts.length === 2;\n  const validExtensionlessPath = !pathParts?.[1].includes('.');\n  return validProtocol && validHostname && validPathPartsLength && validExtensionlessPath;\n};\n\nexport type MuxJWT = {\n  sub: string;\n  aud: 'v' | 't' | 'g' | 's' | 'd';\n  exp: number;\n};\n\nexport const parseJwt = (token: string | undefined): Partial<MuxJWT> | undefined => {\n  const base64Url = (token ?? '').split('.')[1];\n\n  // exit early on invalid value\n  if (!base64Url) return undefined;\n\n  // Account for malformed JWTs\n  try {\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split('')\n        .map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join('')\n    );\n    return JSON.parse(jsonPayload);\n  } catch {\n    return undefined;\n  }\n};\n\nexport const isJWTExpired = ({ exp }: Partial<Pick<MuxJWT, 'exp'>>, referenceTime: number = Date.now()) => {\n  return !exp || exp * 1000 < referenceTime;\n};\n\n// NOTE: Treating missing sub (and expected sub) as mismatches for now (CJP)\nexport const isJWTSubMismatch = ({ sub }: Partial<Pick<MuxJWT, 'sub'>>, expectedSub: string | undefined) => {\n  return sub !== expectedSub;\n};\n\nexport const isJWTAudMissing = ({ aud }: Partial<Pick<MuxJWT, 'aud'>>, _expectedAud: string | undefined) => {\n  return !aud;\n};\n\nexport const isJWTAudMismatch = ({ aud }: Partial<Pick<MuxJWT, 'aud'>>, expectedAud: string | undefined) => {\n  return aud !== expectedAud;\n};\n\nconst DEFAULT_LOCALE = 'en';\n\n// NL example\n// lang = {\n//   \"Network Error\": \"Netwerk Fout\",\n// };\nexport function i18n(str: string, translate = true) {\n  const message = translate ? ((lang as unknown as any)?.[str] ?? str) : str;\n  const locale = translate ? (lang as unknown as any).code : DEFAULT_LOCALE;\n  return new IntlMessageFormat(message, locale);\n}\n\n/**\n * Poor man's IntlMessageFormat, enrich if need be.\n * @see https://formatjs.io/docs/intl-messageformat/\n */\nclass IntlMessageFormat {\n  message: string;\n  locale: string;\n\n  /** @TODO re-implement esbuild custom plugin for code usage (CJP) */\n  constructor(message: string, locale = (lang as unknown as any) ?? DEFAULT_LOCALE) {\n    this.message = message;\n    this.locale = locale;\n  }\n\n  format(values: Record<string, any>): string {\n    return this.message.replace(/\\{(\\w+)\\}/g, (_match, key) => {\n      return values[key] ?? '';\n    });\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","import { addEventListenerWithTeardown } from './util';\nimport { ValueOf, Autoplay, AutoplayTypes, PlaybackEngine, MuxMediaPropsInternal, StreamTypes } from './types';\nimport Hls from './hls';\n\nconst AutoplayTypeValues = Object.values(AutoplayTypes);\nexport const isAutoplayValue = (value: unknown): value is Autoplay => {\n  return (\n    typeof value === 'boolean' ||\n    (typeof value === 'string' && AutoplayTypeValues.includes(value as ValueOf<AutoplayTypes>))\n  );\n};\n\n// Given a video element, will listen to lifecycle events to determine important\n// things like whether the video is live or whether the video has played\n// and then handles autoplaying the video as appropraite.\n// It works with both the native video element or hls.js.\n// This returns a method UpdateAutoplay, that allows the user to change\n// the value of the autoplay attribute and it will react appropriately.\nexport const setupAutoplay = (\n  props: Partial<MuxMediaPropsInternal>,\n  mediaEl: HTMLMediaElement,\n  hls?: PlaybackEngine\n) => {\n  const { autoplay: maybeAutoplay } = props;\n  let hasPlayed = false;\n  let isLive = false;\n  let autoplay: Autoplay = isAutoplayValue(maybeAutoplay) ? maybeAutoplay : !!maybeAutoplay;\n\n  const updateHasPlayed = () => {\n    // hasPlayed\n\n    if (!hasPlayed) {\n      addEventListenerWithTeardown(\n        mediaEl,\n        'playing',\n        () => {\n          hasPlayed = true;\n        },\n        { once: true }\n      );\n    }\n  };\n\n  updateHasPlayed();\n\n  // on `loadstart`\n  // hasPlayed should default to false\n  // we should try and autoplay\n  addEventListenerWithTeardown(\n    mediaEl,\n    'loadstart',\n    () => {\n      hasPlayed = false;\n      updateHasPlayed();\n      handleAutoplay(mediaEl, autoplay);\n    },\n    { once: true }\n  );\n\n  // on `loadedmetadata` we can check whether we're live in the case of native playback\n  addEventListenerWithTeardown(\n    mediaEl,\n    'loadstart',\n    () => {\n      // only update isLive here if we're using native playback\n      if (!hls) {\n        // defer to streamType if set (including inferred)\n        if (props.streamType && props.streamType !== StreamTypes.UNKNOWN) {\n          isLive = props.streamType === StreamTypes.LIVE;\n        } else {\n          isLive = !Number.isFinite(mediaEl.duration);\n        }\n      }\n      handleAutoplay(mediaEl, autoplay);\n    },\n    { once: true }\n  );\n\n  // determine if we're live for hls.js\n  if (hls) {\n    hls.once(Hls.Events.LEVEL_LOADED, (_event: any, data: any) => {\n      // defer to streamType if set (including inferred)\n      if (props.streamType && props.streamType !== StreamTypes.UNKNOWN) {\n        isLive = props.streamType === StreamTypes.LIVE;\n      } else {\n        isLive = data.details.live ?? false;\n      }\n    });\n  }\n\n  // When we are not auto-playing, we should seek to the live sync position\n  // This will seek first play event of *any* live video including event-type,\n  // which probably shouldn't seek\n  if (!autoplay) {\n    const handleSeek = () => {\n      // don't seek if we're not live or if a `startTime` has been explicitly set\n      if (!isLive || Number.isFinite(props.startTime)) {\n        return;\n      }\n      // seek to either hls.js's liveSyncPosition or the native seekable end\n      if (hls?.liveSyncPosition) {\n        mediaEl.currentTime = hls.liveSyncPosition;\n      } else {\n        if (Number.isFinite(mediaEl.seekable.end(0))) {\n          mediaEl.currentTime = mediaEl.seekable.end(0);\n        }\n      }\n    };\n    if (hls) {\n      addEventListenerWithTeardown(\n        mediaEl,\n        'play',\n        () => {\n          if (mediaEl.preload === 'metadata') {\n            hls.once(Hls.Events.LEVEL_UPDATED, handleSeek);\n          } else {\n            handleSeek();\n          }\n        },\n        { once: true }\n      );\n    }\n  }\n\n  // this method allows us to update the value of autoplay\n  // and try autoplaying appropriately.\n  const updateAutoplay = (newAutoplay?: Autoplay) => {\n    if (!hasPlayed) {\n      autoplay = isAutoplayValue(newAutoplay) ? newAutoplay : !!newAutoplay;\n      handleAutoplay(mediaEl, autoplay);\n    }\n  };\n\n  return updateAutoplay;\n};\n\nexport const handleAutoplay = (mediaEl: HTMLMediaElement, autoplay: Autoplay) => {\n  if (!autoplay) {\n    return;\n  }\n\n  const oldMuted = mediaEl.muted;\n  const restoreMuted = () => (mediaEl.muted = oldMuted);\n\n  switch (autoplay) {\n    // ANY:\n    // try to play with current options\n    // if it fails, mute and try playing again\n    // if that fails, restore muted state and don't try playing again\n    case AutoplayTypes.ANY:\n      mediaEl.play().catch(() => {\n        mediaEl.muted = true;\n        mediaEl.play().catch(restoreMuted);\n      });\n      break;\n\n    // MUTED:\n    // mute the player and then try playing\n    // if that fails, restore muted state\n    case AutoplayTypes.MUTED:\n      mediaEl.muted = true;\n      mediaEl.play().catch(restoreMuted);\n      break;\n\n    // Default or if autoplay is a boolean attribute:\n    // Try playing the video and catch the failed autoplay warning\n    default: // eslint-disable-next-line\n      mediaEl.play().catch(() => {});\n      break;\n  }\n};\n","import { addEventListenerWithTeardown } from './util';\nimport { PlaybackEngine } from './types';\n\nexport const setupPreload = (\n  { preload, src }: Partial<HTMLMediaElement>,\n  mediaEl: HTMLMediaElement,\n  hls?: PlaybackEngine\n) => {\n  const updatePreload = (val?: HTMLMediaElement['preload']) => {\n    if (val != null && ['', 'none', 'metadata', 'auto'].includes(val)) {\n      mediaEl.setAttribute('preload', val);\n    } else {\n      mediaEl.removeAttribute('preload');\n    }\n  };\n\n  // handle native without hls.js (MSE)\n  if (!hls) {\n    updatePreload(preload);\n    return updatePreload;\n  }\n\n  let hasLoadedSource = false;\n  let hasPlayFired = false;\n\n  const originalLength = hls.config.maxBufferLength;\n  const originalSize = hls.config.maxBufferSize;\n\n  const updateHlsPreload = (val?: HTMLMediaElement['preload']) => {\n    // even if it doesn't have an effect on a <video> w/ MSE\n    // still update the `preload` attribute.\n    updatePreload(val);\n\n    const newPreload = val ?? mediaEl.preload;\n    if (hasPlayFired || newPreload === 'none') return;\n    if (newPreload === 'metadata') {\n      // load the least amount of data possible\n      hls.config.maxBufferLength = 1;\n      hls.config.maxBufferSize = 1;\n    } else {\n      hls.config.maxBufferLength = originalLength;\n      hls.config.maxBufferSize = originalSize;\n    }\n\n    safeLoadSource();\n  };\n\n  const safeLoadSource = () => {\n    if (!hasLoadedSource && src) {\n      hasLoadedSource = true;\n      hls.loadSource(src);\n    }\n  };\n\n  addEventListenerWithTeardown(\n    mediaEl,\n    'play',\n    () => {\n      hasPlayFired = true;\n\n      // once a user has played, allow for it to load data as normal\n      hls.config.maxBufferLength = originalLength;\n      hls.config.maxBufferSize = originalSize;\n\n      // load the source on first play if needed\n      safeLoadSource();\n    },\n    { once: true }\n  );\n\n  updateHlsPreload(preload);\n\n  return updateHlsPreload;\n};\n","import Hls from './hls';\n\nexport function setupMediaTracks(\n  customMediaEl: HTMLMediaElement,\n  hls: Pick<\n    Hls,\n    'audioTrack' | 'audioTracks' | 'autoLevelEnabled' | 'nextLevel' | 'levels' | 'on' | 'once' | 'off' | 'trigger'\n  >\n) {\n  if (!('videoTracks' in customMediaEl)) return;\n\n  // Create a map to save the unique id's we create for each level and rendition.\n  // hls.js uses the levels array index primarily but we'll use the id to have a\n  // 1 to 1 relation from rendition to level.\n  const levelIdMap = new WeakMap();\n\n  hls.on(Hls.Events.MANIFEST_PARSED, function (_event, data) {\n    removeAllMediaTracks();\n\n    const videoTrack = customMediaEl.addVideoTrack('main');\n    videoTrack.selected = true;\n\n    for (const [id, level] of data.levels.entries()) {\n      const videoRendition = videoTrack.addRendition(\n        level.url[0],\n        level.width,\n        level.height,\n        level.videoCodec,\n        level.bitrate\n      );\n\n      // The returned levels all have an id of `0`, save the id in a WeakMap.\n      levelIdMap.set(level, `${id}`);\n      videoRendition.id = `${id}`;\n    }\n  });\n\n  hls.on(Hls.Events.AUDIO_TRACKS_UPDATED, function (_event, data) {\n    removeAudioTracks();\n\n    for (const a of data.audioTracks) {\n      // hls.js doesn't return a `kind` property for audio tracks yet.\n      const kind = a.default ? 'main' : 'alternative';\n      const audioTrack = customMediaEl.addAudioTrack(kind, a.name, a.lang);\n      audioTrack.id = `${a.id}`;\n\n      if (a.default) {\n        audioTrack.enabled = true;\n      }\n    }\n  });\n\n  customMediaEl.audioTracks.addEventListener('change', () => {\n    // Cast to number, hls.js uses numeric id's.\n    const audioTrackId = +[...customMediaEl.audioTracks].find((t) => t.enabled)?.id;\n    const availableIds = hls.audioTracks.map((t) => t.id);\n    if (audioTrackId != hls.audioTrack && availableIds.includes(audioTrackId)) {\n      hls.audioTrack = audioTrackId;\n    }\n  });\n\n  // Fired when a level is removed after calling `removeLevel()`\n  hls.on(Hls.Events.LEVELS_UPDATED, function (_event, data) {\n    const videoTrack = customMediaEl.videoTracks[customMediaEl.videoTracks.selectedIndex ?? 0];\n    if (!videoTrack) return;\n\n    const levelIds: string[] = data.levels.map((l) => levelIdMap.get(l));\n\n    for (const rendition of customMediaEl.videoRenditions) {\n      if (rendition.id && !levelIds.includes(rendition.id)) {\n        videoTrack.removeRendition(rendition);\n      }\n    }\n  });\n\n  // hls.js doesn't support enabling multiple renditions.\n  //\n  // 1. if all renditions are enabled it's auto selection.\n  // 2. if 1 of the renditions is disabled we assume a selection was made\n  //    and lock it to the first rendition that is enabled.\n  const switchRendition = (event: Event) => {\n    // @ts-ignore\n    const level = event.target.selectedIndex as number;\n    if (level != hls.nextLevel) {\n      hls.nextLevel = level;\n    }\n  };\n\n  customMediaEl.videoRenditions?.addEventListener('change', switchRendition);\n\n  const removeVideoTracks = () => {\n    for (const videoTrack of customMediaEl.videoTracks) {\n      customMediaEl.removeVideoTrack(videoTrack);\n    }\n  };\n\n  const removeAudioTracks = () => {\n    for (const audioTrack of customMediaEl.audioTracks) {\n      customMediaEl.removeAudioTrack(audioTrack);\n    }\n  };\n\n  const removeAllMediaTracks = () => {\n    removeVideoTracks();\n    removeAudioTracks();\n  };\n\n  // NOTE: Since this is only relevant for hls, using destroying event (CJP).\n  hls.once(Hls.Events.DESTROYING, removeAllMediaTracks);\n}\n","import Hls from './hls';\nimport { CuePoint, Chapter } from './types';\nimport { addEventListenerWithTeardown } from './util';\n\ntype Config = { label: string };\n\n// Shared utils\n\n// Extracts the start time from a cuepoint, considering legacy \"time\" prop\nconst cuePointStart = (cuePoint: CuePoint): number => {\n  if ('time' in cuePoint) {\n    return cuePoint.time;\n  }\n  return cuePoint.startTime;\n};\n\nexport function setupTextTracks(\n  mediaEl: HTMLMediaElement,\n  hls: Pick<Hls, 'on' | 'once' | 'subtitleTracks' | 'subtitleTrack'>\n) {\n  hls.on(Hls.Events.NON_NATIVE_TEXT_TRACKS_FOUND, (_type, { tracks }) => {\n    tracks.forEach((trackObj) => {\n      const baseTrackObj = trackObj.subtitleTrack ?? trackObj.closedCaptions;\n      const idx = hls.subtitleTracks.findIndex(({ lang, name, type }) => {\n        return lang == baseTrackObj?.lang && name === trackObj.label && type.toLowerCase() === trackObj.kind;\n      });\n\n      // NOTE: Undocumented method for determining identifier by hls.js. Relied on for\n      // ensuring CUES_PARSED events can identify and apply cues to the appropriate track (CJP).\n      // See: https://github.com/video-dev/hls.js/blob/master/src/controller/timeline-controller.ts#L640\n      const id = trackObj._id ?? trackObj.default ? 'default' : `${trackObj.kind}${idx}`;\n\n      addTextTrack(mediaEl, trackObj.kind as TextTrackKind, trackObj.label, baseTrackObj?.lang, id, trackObj.default);\n    });\n  });\n\n  const changeHandler = () => {\n    if (!hls.subtitleTracks.length) return;\n\n    const showingTrack = Array.from(mediaEl.textTracks).find((textTrack) => {\n      return textTrack.id && textTrack.mode === 'showing' && ['subtitles', 'captions'].includes(textTrack.kind);\n    });\n\n    if (!showingTrack) return;\n\n    const currentHlsTrack = hls.subtitleTracks[hls.subtitleTrack];\n\n    // If hls.subtitleTrack is -1 or its id changed compared to the one that is showing load the new subtitle track.\n    const hlsTrackId = !currentHlsTrack\n      ? undefined\n      : currentHlsTrack.default\n        ? 'default'\n        : `${hls.subtitleTracks[hls.subtitleTrack].type.toLowerCase()}${hls.subtitleTrack}`;\n\n    if (hls.subtitleTrack < 0 || showingTrack?.id !== hlsTrackId) {\n      const idx = hls.subtitleTracks.findIndex(({ lang, name, type, default: defaultTrack }) => {\n        return (\n          (showingTrack.id === 'default' && defaultTrack) ||\n          (lang == showingTrack.language && name === showingTrack.label && type.toLowerCase() === showingTrack.kind)\n        );\n      });\n      // After the subtitleTrack is set here, hls.js will load the playlist and CUES_PARSED events will be fired below.\n      hls.subtitleTrack = idx;\n    }\n\n    if (showingTrack?.id === hlsTrackId) {\n      // Refresh the cues after a texttrack mode change to fix a Chrome bug causing the captions not to render.\n      if (showingTrack.cues) {\n        Array.from(showingTrack.cues).forEach((cue) => {\n          showingTrack.addCue(cue);\n        });\n      }\n    }\n  };\n\n  mediaEl.textTracks.addEventListener('change', changeHandler);\n\n  hls.on(Hls.Events.CUES_PARSED, (_type, { track, cues }) => {\n    const textTrack = mediaEl.textTracks.getTrackById(track);\n    if (!textTrack) return;\n\n    const disabled = textTrack.mode === 'disabled';\n    if (disabled) {\n      textTrack.mode = 'hidden';\n    }\n\n    cues.forEach((cue: VTTCue) => {\n      if (textTrack.cues?.getCueById(cue.id)) return;\n      textTrack.addCue(cue);\n    });\n\n    if (disabled) {\n      textTrack.mode = 'disabled';\n    }\n  });\n\n  // NOTE: Since this is only relevant for hls, using destroying event (CJP).\n  hls.once(Hls.Events.DESTROYING, () => {\n    mediaEl.textTracks.removeEventListener('change', changeHandler);\n    // Use data attribute to identify tracks that should be removed when switching sources/destroying hls.js instance.\n    const trackEls: NodeListOf<HTMLTrackElement> = mediaEl.querySelectorAll('track[data-removeondestroy]');\n    trackEls.forEach((trackEl) => {\n      trackEl.remove();\n    });\n  });\n\n  const forceHiddenTracks = () => {\n    // Keeping this a forEach in case we want to expand the scope of this.\n    Array.from(mediaEl.textTracks).forEach((track) => {\n      if (['subtitles', 'caption'].includes(track.kind)) return;\n      if (!(track.label === 'thumbnails' || track.kind === 'chapters')) return;\n      if (!track.cues?.length) {\n        let selector = 'track';\n        if (track.kind) selector += `[kind=\"${track.kind}\"]`;\n        if (track.label) selector += `[label=\"${track.label}\"]`;\n        const trackEl = mediaEl.querySelector(selector);\n        // Force a reload of the cues if they've been removed\n        const src = trackEl?.getAttribute('src') ?? '';\n        trackEl?.removeAttribute('src');\n        setTimeout(() => {\n          trackEl?.setAttribute('src', src);\n        }, 0);\n      }\n      // Force hidden mode if it's not hidden\n      if (track.mode !== 'hidden') {\n        track.mode = 'hidden';\n      }\n    });\n  };\n\n  // hls.js will forcibly clear all cues from tracks on manifest loads or media attaches.\n  // This ensures that we re-load them after it's done that.\n  hls.once(Hls.Events.MANIFEST_LOADED, forceHiddenTracks);\n  hls.once(Hls.Events.MEDIA_ATTACHED, forceHiddenTracks);\n}\n\nexport function addTextTrack(\n  mediaEl: HTMLMediaElement,\n  kind: TextTrackKind,\n  label: string,\n  lang?: string,\n  id?: string,\n  defaultTrack?: boolean\n): TextTrack {\n  const trackEl = document.createElement('track');\n  trackEl.kind = kind;\n  trackEl.label = label;\n  if (lang) {\n    // This attribute must be present if the element's kind attribute is in the subtitles state.\n    trackEl.srclang = lang;\n  }\n  if (id) {\n    trackEl.id = id;\n  }\n  if (!!defaultTrack) {\n    trackEl.default = true;\n  }\n  trackEl.track.mode = ['subtitles', 'captions'].includes(kind) ? 'disabled' : 'hidden';\n\n  // Add data attribute to identify tracks that should be removed when switching sources/destroying hls.js instance.\n  trackEl.setAttribute('data-removeondestroy', '');\n  mediaEl.append(trackEl);\n\n  return trackEl.track as TextTrack;\n}\n\nexport function removeTextTrack(mediaEl: HTMLMediaElement, track: TextTrack) {\n  const trackElement: HTMLTrackElement | undefined = Array.prototype.find.call(\n    mediaEl.querySelectorAll('track'),\n    (trackEl: HTMLTrackElement) => trackEl.track === track\n  );\n  trackElement?.remove();\n}\n\nexport function getTextTrack(mediaEl: HTMLMediaElement, label: string, kind: TextTrackKind) {\n  return Array.from(mediaEl.querySelectorAll('track')).find((trackEl) => {\n    return trackEl.track.label === label && trackEl.track.kind === kind;\n  })?.track;\n}\n\nexport async function addCuesToTextTrack<T = any>(\n  mediaEl: HTMLMediaElement,\n  cues: CuePoint<T>[] | Chapter[],\n  label: string,\n  kind: TextTrackKind\n) {\n  // If the track has already been created/added, use it.\n  let track = getTextTrack(mediaEl, label, kind);\n  if (!track) {\n    // Otherwise, create a new one\n    track = addTextTrack(mediaEl, kind, label);\n    track.mode = 'hidden';\n    // Wait a tick before providing a newly created track. Otherwise e.g. cues disappear when using track.addCue().\n    await new Promise((resolve) => setTimeout(() => resolve(undefined), 0));\n  }\n\n  if (track.mode !== 'hidden') {\n    track.mode = 'hidden';\n  }\n\n  // Copy cuePoints to ensure sort is not mutative\n  [...cues]\n    // Sort descending to ensure last cuepoints are added as cues first. This is done\n    // so the track's cue's can be used for reference when determining an appropriate\n    // endTime, allowing support of multiple invocations of addCuePoints\n    .sort((cuePointA, cuePointB) => cuePointStart(cuePointB) - cuePointStart(cuePointA))\n    .forEach((cuePoint) => {\n      const value = cuePoint.value;\n      const startTime = cuePointStart(cuePoint);\n\n      if ('endTime' in cuePoint && cuePoint.endTime != undefined) {\n        track?.addCue(\n          new VTTCue(\n            startTime,\n            cuePoint.endTime,\n            kind === 'chapters' ? (value as string) : JSON.stringify(value ?? null)\n          )\n        );\n      } else {\n        // find the cue that starts immediately after the cuePoint's time\n        const cueAfterIndex = Array.prototype.findIndex.call(track?.cues, (cue) => cue.startTime >= startTime);\n        const cueAfter = track?.cues?.[cueAfterIndex];\n        const endTime = cueAfter\n          ? cueAfter.startTime\n          : Number.isFinite(mediaEl.duration)\n            ? mediaEl.duration\n            : Number.MAX_SAFE_INTEGER;\n\n        // Adjust the endTime of the already added previous cue,\n        // if present, so it does not overlap with the newly added cue.\n        const previousCue = track?.cues?.[cueAfterIndex - 1];\n        if (previousCue) {\n          previousCue.endTime = startTime;\n        }\n        track?.addCue(\n          new VTTCue(startTime, endTime, kind === 'chapters' ? (value as string) : JSON.stringify(value ?? null))\n        );\n      }\n    });\n\n  // NOTE: this doesn't naturally fire when we update the list\n  // of cue points (without changing the active cue). We manually\n  // fire this to force the state manager to reflect the new change\n  mediaEl.textTracks.dispatchEvent(\n    new Event('change', {\n      bubbles: true,\n      composed: true,\n    })\n  );\n\n  return track;\n}\n\n// Cuepoints\n\nconst DEFAULT_CUEPOINTS_TRACK_LABEL = 'cuepoints';\nexport const DefaultCuePointsConfig: Config = Object.freeze({ label: DEFAULT_CUEPOINTS_TRACK_LABEL });\n\nexport async function addCuePoints<T>(\n  mediaEl: HTMLMediaElement,\n  cuePoints: CuePoint<T>[],\n  cuePointsConfig: Config = DefaultCuePointsConfig\n) {\n  return addCuesToTextTrack(mediaEl, cuePoints, cuePointsConfig.label, 'metadata');\n}\n\nconst toCuePoint = (cue: VTTCue) => ({\n  time: cue.startTime,\n  value: JSON.parse(cue.text),\n});\n\nexport function getCuePoints(\n  mediaEl: HTMLMediaElement,\n  cuePointsConfig: Config = { label: DEFAULT_CUEPOINTS_TRACK_LABEL }\n) {\n  const track = getTextTrack(mediaEl, cuePointsConfig.label, 'metadata');\n  if (!track?.cues) return [];\n  return Array.from(track.cues, (cue) => toCuePoint(cue as VTTCue));\n}\n\nexport function getActiveCuePoint(\n  mediaEl: HTMLMediaElement,\n  cuePointsConfig: Config = { label: DEFAULT_CUEPOINTS_TRACK_LABEL }\n) {\n  const track = getTextTrack(mediaEl, cuePointsConfig.label, 'metadata');\n  if (!track?.activeCues?.length) return undefined;\n  if (track.activeCues.length === 1) return toCuePoint(track.activeCues[0] as VTTCue);\n  // NOTE: There is a bug in Chromium where there may be \"lingering activeCues\" even\n  // after the playhead is no longer within their [startTime, endTime) bounds. This\n  // accounts for those cases (CJP)\n  const { currentTime } = mediaEl;\n  const actualActiveCue = Array.prototype.find.call(track.activeCues ?? [], ({ startTime, endTime }) => {\n    return startTime <= currentTime && endTime > currentTime;\n  }) as VTTCue | undefined;\n  if (!actualActiveCue) {\n    return toCuePoint(track.activeCues[0] as VTTCue);\n  }\n  return toCuePoint(actualActiveCue);\n}\n\nexport async function setupCuePoints(mediaEl: HTMLMediaElement, cuePointsConfig: Config = DefaultCuePointsConfig) {\n  return new Promise((resolve) => {\n    addEventListenerWithTeardown(mediaEl, 'loadstart', async () => {\n      const track = await addCuePoints(mediaEl, [], cuePointsConfig);\n      addEventListenerWithTeardown(\n        mediaEl,\n        'cuechange',\n        () => {\n          const activeCuePoint = getActiveCuePoint(mediaEl);\n          if (activeCuePoint) {\n            const evt = new CustomEvent('cuepointchange', {\n              composed: true,\n              bubbles: true,\n              detail: activeCuePoint,\n            });\n            mediaEl.dispatchEvent(evt);\n          }\n        },\n        {},\n        track\n      );\n      resolve(track);\n    });\n  });\n}\n\n/**\n * Chapters\n */\n\nconst DEFAULT_CHAPTERS_TRACK_LABEL = 'chapters';\nexport const DefaultChaptersConfig: Config = Object.freeze({ label: DEFAULT_CHAPTERS_TRACK_LABEL });\n\nconst vttCueToChapter = (cue: VTTCue) => ({\n  startTime: cue.startTime,\n  endTime: cue.endTime,\n  value: cue.text,\n});\n\nexport async function addChapters(\n  mediaEl: HTMLMediaElement,\n  chapters: Chapter[],\n  chaptersConfig: Config = DefaultChaptersConfig\n) {\n  return addCuesToTextTrack(mediaEl, chapters, chaptersConfig.label, 'chapters');\n}\n\nexport function getChapters(\n  mediaEl: HTMLMediaElement,\n  chaptersConfig: Config = { label: DEFAULT_CHAPTERS_TRACK_LABEL }\n) {\n  const track = getTextTrack(mediaEl, chaptersConfig.label, 'chapters');\n  if (!track?.cues?.length) return [];\n  return Array.from(track.cues, (cue) => vttCueToChapter(cue as VTTCue));\n}\n\nexport function getActiveChapter(\n  mediaEl: HTMLMediaElement,\n  chaptersConfig: Config = { label: DEFAULT_CHAPTERS_TRACK_LABEL }\n) {\n  const track = getTextTrack(mediaEl, chaptersConfig.label, 'chapters');\n  if (!track?.activeCues?.length) return undefined;\n  if (track.activeCues.length === 1) return vttCueToChapter(track.activeCues[0] as VTTCue);\n  // NOTE: There is a bug in Chromium where there may be \"lingering activeCues\" even\n  // after the playhead is no longer within their [startTime, endTime) bounds. This\n  // accounts for those cases (CJP)\n  const { currentTime } = mediaEl;\n  const actualActiveCue = Array.prototype.find.call(track.activeCues ?? [], ({ startTime, endTime }) => {\n    return startTime <= currentTime && endTime > currentTime;\n  }) as VTTCue | undefined;\n  if (!actualActiveCue) {\n    return vttCueToChapter(track.activeCues[0] as VTTCue);\n  }\n  return vttCueToChapter(actualActiveCue);\n}\n\nexport async function setupChapters(mediaEl: HTMLMediaElement, chaptersConfig: Config = DefaultChaptersConfig) {\n  return new Promise((resolve) => {\n    addEventListenerWithTeardown(mediaEl, 'loadstart', async () => {\n      const track = await addChapters(mediaEl, [], chaptersConfig);\n\n      addEventListenerWithTeardown(\n        mediaEl,\n        'cuechange',\n        () => {\n          const activeCuePoint = getActiveChapter(mediaEl);\n          if (activeCuePoint) {\n            const evt = new CustomEvent('chapterchange', {\n              composed: true,\n              bubbles: true,\n              detail: activeCuePoint,\n            });\n            mediaEl.dispatchEvent(evt);\n          }\n        },\n        {},\n        track\n      );\n\n      resolve(track);\n    });\n  });\n}\n","import { PlaybackEngine } from './types';\n\ntype MediaWithPDT = HTMLMediaElement & { getStartDate?: () => Date };\n\nexport function getStartDate(mediaEl: MediaWithPDT, hls: PlaybackEngine | undefined) {\n  if (hls) {\n    const playingDate = hls.playingDate;\n\n    if (playingDate != null) {\n      // If the video is very long and the currentTime will transition day boundaries,\n      // this may end up not being accurate\n      return new Date(playingDate.getTime() - mediaEl.currentTime * 1000);\n    }\n  }\n\n  if (typeof mediaEl.getStartDate === 'function') {\n    return mediaEl.getStartDate();\n  }\n\n  return new Date(NaN);\n}\n\nexport function getCurrentPdt(mediaEl: MediaWithPDT, hls: PlaybackEngine | undefined) {\n  if (hls && hls.playingDate) {\n    return hls.playingDate;\n  }\n\n  if (typeof mediaEl.getStartDate === 'function') {\n    const startDate = mediaEl.getStartDate();\n\n    // If the video is very long and the currentTime will transition day boundaries,\n    // this may end up not being accurate\n    return new Date(startDate.getTime() + mediaEl.currentTime * 1000);\n  }\n\n  return new Date(NaN);\n}\n","import type { LoaderResponse } from 'hls.js';\nimport {\n  i18n,\n  isJWTAudMismatch,\n  isJWTAudMissing,\n  isJWTExpired,\n  isJWTSubMismatch,\n  parseJwt,\n  toPlaybackIdParts,\n} from './util';\nimport { isKeyOf, MuxMediaPropsInternal, StreamTypes } from './types';\nimport type { MuxErrorCategoryValue } from './errors';\nimport { errorCategoryToTokenNameOrPrefix, MediaError, MuxErrorCategory, MuxErrorCode } from './errors';\n\nexport const MuxJWTAud = {\n  VIDEO: 'v',\n  // NOTE: These are not \"built in\" for mux-video/mux-audio (only mux-player) (CJP)\n  THUMBNAIL: 't',\n  STORYBOARD: 's',\n  // GIF: 'g', // currently unused\n  DRM: 'd',\n} as const;\n\nexport const categoryToAud = (category: MuxErrorCategoryValue) => {\n  if (category === MuxErrorCategory.VIDEO) return MuxJWTAud.VIDEO;\n  if (category === MuxErrorCategory.DRM) return MuxJWTAud.DRM;\n};\n\nexport const categoryToToken = (\n  category: MuxErrorCategoryValue,\n  muxMediaEl: Partial<Pick<MuxMediaPropsInternal, 'drmToken' | 'playbackToken' | 'tokens'>>\n) => {\n  const nameOrPrefix = errorCategoryToTokenNameOrPrefix(category);\n  const tokenName = `${nameOrPrefix}Token` as const;\n  if (muxMediaEl.tokens?.[nameOrPrefix]) return muxMediaEl.tokens?.[nameOrPrefix];\n  return isKeyOf(tokenName, muxMediaEl) ? muxMediaEl[tokenName] : undefined;\n};\n\nexport const getErrorFromResponse = (\n  resp: Pick<Response, 'status' | 'url'> | Pick<LoaderResponse, 'code' | 'url'>,\n  category: MuxErrorCategoryValue,\n  muxMediaEl: Partial<\n    Pick<MuxMediaPropsInternal, 'playbackId' | 'drmToken' | 'playbackToken' | 'tokens' | 'streamType'>\n  >,\n  fatal?: boolean,\n  translate = false,\n  offline = !globalThis.navigator?.onLine // NOTE: Passing this in for testing purposes\n) => {\n  if (offline) {\n    const message = i18n(`Your device appears to be offline`, translate);\n    const context = undefined;\n    const mediaErrorCode = MediaError.MEDIA_ERR_NETWORK;\n    // Being offline is not immediately a fatal error for playback.\n    const mediaError = new MediaError(message, mediaErrorCode, false, context);\n    mediaError.errorCategory = category;\n    mediaError.muxCode = MuxErrorCode.NETWORK_OFFLINE;\n    mediaError.data = resp;\n    return mediaError;\n  }\n  const status = 'status' in resp ? resp.status : resp.code;\n  const requestTime = Date.now();\n  const mediaErrorCode = MediaError.MEDIA_ERR_NETWORK;\n  // Not an error. WHAT ARE YOU EVEN DOING HERE?!?\n  if (status === 200) return undefined;\n  const tokenNamePrefix = errorCategoryToTokenNameOrPrefix(category);\n  const token = categoryToToken(category, muxMediaEl);\n  const expectedAud = categoryToAud(category);\n  const [playbackId] = toPlaybackIdParts(muxMediaEl.playbackId ?? '');\n  // NOTE: *should* have playback id when reaching here\n  // if (!status) return MuxErrorCode.NETWORK_NO_STATUS;\n  if (!status || !playbackId) return undefined;\n\n  const jwtObj = parseJwt(token);\n  // Make sure we didn't get here because of a malformed JWT and/or claim\n  if (!!token && !jwtObj) {\n    // 403 for DRM\n    const message = i18n(`The {tokenNamePrefix}-token provided is invalid or malformed.`, translate).format({\n      tokenNamePrefix,\n    });\n    const context = i18n(`Compact JWT string: {token}`, translate).format({\n      token,\n    });\n    const mediaError = new MediaError(message, mediaErrorCode, true, context);\n    mediaError.errorCategory = category;\n    mediaError.muxCode = MuxErrorCode.NETWORK_TOKEN_MALFORMED;\n    mediaError.data = resp;\n    return mediaError;\n  }\n\n  if (status >= 500) {\n    /**\n     * @TODO We plausibly should have some basic retry logic for all other 500 status\n     * cases (CJP)\n     **/\n    const mediaError = new MediaError('', mediaErrorCode, fatal ?? true);\n    mediaError.errorCategory = category;\n    mediaError.muxCode = MuxErrorCode.NETWORK_UNKNOWN_ERROR;\n    /** @TODO Add error msg + context crud here (NOT YET DEFINED) (CJP) */\n    return mediaError;\n  }\n\n  if (status === 403) {\n    if (jwtObj) {\n      if (isJWTExpired(jwtObj, requestTime)) {\n        const dateOptions: any = {\n          timeStyle: 'medium',\n          dateStyle: 'medium',\n        };\n        // E.g. for DRM: \"The video’s secured drm-token has expired.\"\n        // E.g. for Video: \"The video’s secured playback-token has expired.\"\n        const message = i18n(`The video’s secured {tokenNamePrefix}-token has expired.`, translate).format({\n          tokenNamePrefix,\n        });\n        const context = i18n(`Expired at: {expiredDate}. Current time: {currentDate}.`, translate).format({\n          expiredDate: new Intl.DateTimeFormat('en', dateOptions).format(jwtObj.exp ?? 0 * 1000),\n          currentDate: new Intl.DateTimeFormat('en', dateOptions).format(requestTime),\n        });\n        const mediaError = new MediaError(message, mediaErrorCode, true, context);\n        mediaError.errorCategory = category;\n        mediaError.muxCode = MuxErrorCode.NETWORK_TOKEN_EXPIRED;\n        mediaError.data = resp;\n        return mediaError;\n      }\n      if (isJWTSubMismatch(jwtObj, playbackId)) {\n        const message = i18n(\n          `The video’s playback ID does not match the one encoded in the {tokenNamePrefix}-token.`,\n          translate\n        ).format({\n          tokenNamePrefix,\n        });\n        const context = i18n(\n          `Specified playback ID: {playbackId} and the playback ID encoded in the {tokenNamePrefix}-token: {tokenPlaybackId}`,\n          translate\n        ).format({\n          tokenNamePrefix,\n          playbackId,\n          tokenPlaybackId: jwtObj.sub,\n        });\n        const mediaError = new MediaError(message, mediaErrorCode, true, context);\n        mediaError.errorCategory = category;\n        mediaError.muxCode = MuxErrorCode.NETWORK_TOKEN_SUB_MISMATCH;\n        mediaError.data = resp;\n        return mediaError;\n      }\n      if (isJWTAudMissing(jwtObj, expectedAud)) {\n        const message = i18n(`The {tokenNamePrefix}-token is formatted with incorrect information.`, translate).format({\n          tokenNamePrefix,\n        });\n        const context = i18n(\n          `The {tokenNamePrefix}-token has no aud value. aud value should be {expectedAud}.`,\n          translate\n        ).format({\n          tokenNamePrefix,\n          expectedAud,\n        });\n        const mediaError = new MediaError(message, mediaErrorCode, true, context);\n        mediaError.errorCategory = category;\n        mediaError.muxCode = MuxErrorCode.NETWORK_TOKEN_AUD_MISSING;\n        mediaError.data = resp;\n        return mediaError;\n      }\n      if (isJWTAudMismatch(jwtObj, expectedAud)) {\n        const message = i18n(`The {tokenNamePrefix}-token is formatted with incorrect information.`, translate).format({\n          tokenNamePrefix,\n        });\n        const context = i18n(\n          `The {tokenNamePrefix}-token has an incorrect aud value: {aud}. aud value should be {expectedAud}.`,\n          translate\n        ).format({\n          tokenNamePrefix,\n          expectedAud,\n          aud: jwtObj.aud,\n        });\n        const mediaError = new MediaError(message, mediaErrorCode, true, context);\n        mediaError.errorCategory = category;\n        mediaError.muxCode = MuxErrorCode.NETWORK_TOKEN_AUD_MISMATCH;\n        mediaError.data = resp;\n        return mediaError;\n      }\n\n      // NOTE: This *should* not happen for DRM, since the drm token\n      // is currently used to detect whether or not DRM should\n      // be setup at all. Including for exhaustiveness. (CJP)\n    } else {\n      const message = i18n(\n        `Authorization error trying to access this {category} URL. If this is a signed URL, you might need to provide a {tokenNamePrefix}-token.`,\n        translate\n      ).format({\n        tokenNamePrefix,\n        category,\n      });\n      const context = i18n(`Specified playback ID: {playbackId}`, translate).format({ playbackId });\n      const mediaError = new MediaError(message, mediaErrorCode, fatal ?? true, context);\n      mediaError.errorCategory = category;\n      mediaError.muxCode = MuxErrorCode.NETWORK_TOKEN_MISSING;\n      mediaError.data = resp;\n      return mediaError;\n    }\n  }\n\n  if (status === 412) {\n    const message = i18n(\n      `This playback-id may belong to a live stream that is not currently active or an asset that is not ready.`,\n      translate\n    );\n    const context = i18n(`Specified playback ID: {playbackId}`, translate).format({ playbackId });\n    const mediaError = new MediaError(message, mediaErrorCode, fatal ?? true, context);\n    mediaError.errorCategory = category;\n    mediaError.muxCode = MuxErrorCode.NETWORK_NOT_READY;\n    mediaError.streamType =\n      muxMediaEl.streamType === StreamTypes.LIVE\n        ? 'live'\n        : muxMediaEl.streamType === StreamTypes.ON_DEMAND\n          ? 'on-demand'\n          : 'unknown';\n    mediaError.data = resp;\n    return mediaError;\n  }\n\n  /**\n   * NOTE: When using a \"structurally valid but non-existent\" playback id for a DRM (license or app certificate) request, this will result in a 403 status.\n   * However, since we will only currently make a DRM request after successfully loading the media, this case should not need\n   * to be accounted for. If we ever eagerly fetch FPS app certs prior to or in parallel to media requests, we would potentially\n   * want to account for that case (either by normalizing statuses, in our messaging for generic 403 above, or through more complex\n   * solutions like waiting for the media response). (CJP)\n   */\n  if (status === 404) {\n    // NOTE: This *should* not happen for DRM (only playback/media requests), since the URL should never be invalid if code\n    // is correct. Aka if we end up here it's almost definitely a bug.\n    const message = i18n(\n      `This URL or playback-id does not exist. You may have used an Asset ID or an ID from a different resource.`,\n      translate\n    );\n    const context = i18n(`Specified playback ID: {playbackId}`, translate).format({ playbackId });\n    const mediaError = new MediaError(message, mediaErrorCode, fatal ?? true, context);\n    mediaError.errorCategory = category;\n    mediaError.muxCode = MuxErrorCode.NETWORK_NOT_FOUND;\n    mediaError.data = resp;\n    return mediaError;\n  }\n\n  /**\n   * NOTE: Omitting a token for a DRM (license or app certificate) request results in a 400 status, unlike playback/media requests,\n   * which are a 403 status (See above).\n   * However, since we will only currently setup Mux Player for DRM if a drm token is provided, this case should not need\n   * to be accounted for. If we ever change this, we would potentially\n   * want to account for that case (either by normalizing statuses, in our messaging for generic 400 above, or through more complex\n   * solutions like checking the category before deciding on error details here). (CJP)\n   */\n  if (status === 400) {\n    const message = i18n(`The URL or playback-id was invalid. You may have used an invalid value as a playback-id.`);\n    const context = i18n(`Specified playback ID: {playbackId}`, translate).format({ playbackId });\n    const mediaError = new MediaError(message, mediaErrorCode, fatal ?? true, context);\n    mediaError.errorCategory = category;\n    mediaError.muxCode = MuxErrorCode.NETWORK_INVALID_URL;\n    mediaError.data = resp;\n    return mediaError;\n  }\n\n  const mediaError = new MediaError('', mediaErrorCode, fatal ?? true);\n  mediaError.errorCategory = category;\n  mediaError.muxCode = MuxErrorCode.NETWORK_UNKNOWN_ERROR;\n  mediaError.data = resp;\n  return mediaError;\n};\n","import Hls from './hls';\nimport type { HlsInterface } from './hls';\nimport type { Level } from 'hls.js';\n\n// The hls.js commonJS module doesn't export CapLevelController, so get it from the default config.\nconst CapLevelController = Hls.DefaultConfig.capLevelController;\n\n/**\n * A custom HLS.js CapLevelController that behaves like the default one, except\n * it enforces a \"minimum maximum\" to avoid forced capping to lower quality at small sizes\n */\nclass MinCapLevelController extends CapLevelController {\n  // Never cap below this level.\n  static minMaxResolution = 720;\n\n  constructor(hls: HlsInterface) {\n    super(hls);\n  }\n\n  get levels() {\n    // NOTE: hls is a TS-private member in CapLevelController. Should be TS-protected (CJP)\n    // @ts-ignore\n    return (this.hls.levels ?? []) as Level[];\n  }\n\n  getValidLevels(capLevelIndex: number) {\n    return this.levels.filter(\n      // NOTE: isLevelAllowed is a TS-private member in CapLevelController. Should be TS-protected (CJP)\n      // @ts-ignore\n      (level, index) => this.isLevelAllowed(level) && index <= capLevelIndex\n    );\n  }\n\n  getMaxLevel(capLevelIndex: number) {\n    const baseMaxLevel = super.getMaxLevel(capLevelIndex);\n    const validLevels = this.getValidLevels(capLevelIndex);\n\n    // Default maxLevel selection ended up out of bounds to indicate e.g. no capping/no levels available (yet), so use it\n    if (!validLevels[baseMaxLevel]) return baseMaxLevel;\n\n    const baseMaxLevelResolution = Math.min(validLevels[baseMaxLevel].width, validLevels[baseMaxLevel].height);\n    const preferredMinMaxResolution = MinCapLevelController.minMaxResolution;\n\n    // Default maxLevel selection already meets our conditions, so use it\n    if (baseMaxLevelResolution >= preferredMinMaxResolution) return baseMaxLevel;\n\n    // Default maxLevel selection is below the preferred \"min max\", so find the lowest level\n    // that is >= the preference. We can simply repurpose CapLevelController:getMaxLevelByMediaSize()\n    // for this, \"lying\" about the element's size.\n    // NOTE: Since CapLevelController:getMaxLevelByMediaSize() uses \"max square size\" under the hood\n    // already, we don't need to duplicate that logic here.\n    const maxLevel = CapLevelController.getMaxLevelByMediaSize(\n      validLevels,\n      preferredMinMaxResolution * (16 / 9),\n      preferredMinMaxResolution\n    );\n\n    return maxLevel;\n  }\n}\n\nexport default MinCapLevelController;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}