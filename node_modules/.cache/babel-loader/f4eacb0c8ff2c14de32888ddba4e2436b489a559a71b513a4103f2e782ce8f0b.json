{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import MainSection from'../../components/MainSection/MainSection';import BlockMovies from'../../components/BlockMovies/BlockMovies';import TrailerModal from'../../components/TrailerModal/TrailerModal';import{getMovies}from'../../api/apiClient';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HomePage=_ref=>{let{onAddToFavorites,onOpenAuthModal,onOpenMoviePage,onRemove,onOpenTrailer,currentUser,favoriteMovieIds,onFavoriteToggle}=_ref;const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[topMovies,setTopMovies]=useState([]);const[currentMainMovie,setCurrentMainMovie]=useState(null);const[isTrailerModalOpen,setIsTrailerModalOpen]=useState(false);const[currentTrailer,setCurrentTrailer]=useState(null);const handleFavoriteToggle=async(movieId,isCurrentFavorite)=>{const movieIdStr=String(movieId);if(!currentUser){onOpenAuthModal();return;}try{if(!isCurrentFavorite){await onAddToFavorites(movieIdStr);}else{await onRemove(movieIdStr);}}catch(error){console.error('Ошибка при изменении статуса избранного:',error);}};const handleOpenTrailer=useCallback(movie=>{if(movie.trailerUrl){setCurrentTrailer({movieId:movie.id,url:movie.trailerUrl,title:movie.title});setIsTrailerModalOpen(true);}},[]);const handleCloseTrailer=()=>{setIsTrailerModalOpen(false);setCurrentTrailer(null);};const loadMovies=useCallback(async()=>{setLoading(true);setError(null);try{const moviesData=await getMovies(1,10);if(moviesData&&moviesData.length>0){setTopMovies(moviesData);const randomIndex=Math.floor(Math.random()*moviesData.length);setCurrentMainMovie(moviesData[randomIndex]);}else{setError('Нет доступных фильмов.');setTopMovies([]);setCurrentMainMovie(null);}}catch(err){var _err$response,_err$response$data;console.error('Ошибка при загрузке фильмов:',err);setError((err===null||err===void 0?void 0:(_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||err.message||'Ошибка при загрузке фильмов.');setTopMovies([]);setCurrentMainMovie(null);}finally{setLoading(false);}},[]);useEffect(()=>{loadMovies();},[loadMovies]);const isMainMovieFavorite=currentMainMovie?favoriteMovieIds.includes(currentMainMovie.id.toString()):false;const trailerYoutubeId=currentTrailer===null||currentTrailer===void 0?void 0:currentTrailer.url;return/*#__PURE__*/_jsxs(\"div\",{className:\"home-page\",children:[currentMainMovie?/*#__PURE__*/_jsx(MainSection,{movie:currentMainMovie,onOpenTrailer:onOpenTrailer,onAddToFavorites:id=>handleFavoriteToggle(id,isMainMovieFavorite),onRemove:onRemove,onOpenMoviePage:onOpenMoviePage,isFavorite:isMainMovieFavorite,onUpdateMovie:loadMovies,currentUser:currentUser,onOpenAuthModal:onOpenAuthModal}):null,/*#__PURE__*/_jsx(BlockMovies,{movies:topMovies,onOpenTrailer:onOpenTrailer,onOpenMoviePage:onOpenMoviePage,onRemove:onRemove,isFavoritesList:false,favoriteMovieIds:favoriteMovieIds,onFavoriteToggle:handleFavoriteToggle}),/*#__PURE__*/_jsx(TrailerModal,{isOpen:isTrailerModalOpen,onRequestClose:handleCloseTrailer,trailerYoutubeId:trailerYoutubeId})]});};export default HomePage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MainSection","BlockMovies","TrailerModal","getMovies","jsx","_jsx","jsxs","_jsxs","HomePage","_ref","onAddToFavorites","onOpenAuthModal","onOpenMoviePage","onRemove","onOpenTrailer","currentUser","favoriteMovieIds","onFavoriteToggle","loading","setLoading","error","setError","topMovies","setTopMovies","currentMainMovie","setCurrentMainMovie","isTrailerModalOpen","setIsTrailerModalOpen","currentTrailer","setCurrentTrailer","handleFavoriteToggle","movieId","isCurrentFavorite","movieIdStr","String","console","handleOpenTrailer","movie","trailerUrl","id","url","title","handleCloseTrailer","loadMovies","moviesData","length","randomIndex","Math","floor","random","err","_err$response","_err$response$data","response","data","message","isMainMovieFavorite","includes","toString","trailerYoutubeId","className","children","isFavorite","onUpdateMovie","movies","isFavoritesList","isOpen","onRequestClose"],"sources":["d:/Users/User55/Documents/GitHub/Vk-marusya-app/src/pages/HomePage/HomePage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport MainSection from '../../components/MainSection/MainSection';\nimport BlockMovies from '../../components/BlockMovies/BlockMovies';\nimport TrailerModal from '../../components/TrailerModal/TrailerModal';\nimport { getMovies, getFavoriteMovies } from '../../api/apiClient';\nimport { Movie } from '../../types/types'; \n\nconst HomePage: React.FC<any> = ({ \n  onAddToFavorites,\n  onOpenAuthModal,\n  onOpenMoviePage,\n  onRemove,\n  onOpenTrailer,\n  currentUser,\n  favoriteMovieIds,\n  onFavoriteToggle,\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [topMovies, setTopMovies] = useState<Movie[]>([]);\n  const [currentMainMovie, setCurrentMainMovie] = useState<Movie | null>(null);\n  const [isTrailerModalOpen, setIsTrailerModalOpen] = useState(false); \n  const [currentTrailer, setCurrentTrailer] = useState<{ movieId: number; url: string; title: string } | null>(null);\n\n  const handleFavoriteToggle = async (movieId: string, isCurrentFavorite: boolean) => {\n    const movieIdStr = String(movieId);\n\n    if (!currentUser) {\n      onOpenAuthModal();\n      return;\n    }\n\n    try {\n      if (!isCurrentFavorite) {\n        await onAddToFavorites(movieIdStr);\n      } else {\n        await onRemove(movieIdStr);\n      }\n    } catch (error) {\n      console.error('Ошибка при изменении статуса избранного:', error);\n    }\n  };\n\n  const handleOpenTrailer = useCallback((movie: Movie) => {\n    if (movie.trailerUrl) {\n      setCurrentTrailer({ movieId: movie.id, url: movie.trailerUrl, title: movie.title });\n      setIsTrailerModalOpen(true); \n    }\n  }, []);\n\n  const handleCloseTrailer = () => {\n    setIsTrailerModalOpen(false); \n    setCurrentTrailer(null);\n  };\n\n  const loadMovies = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const moviesData = await getMovies(1, 10);\n      if (moviesData && moviesData.length > 0) {\n        setTopMovies(moviesData);\n        const randomIndex = Math.floor(Math.random() * moviesData.length);\n        setCurrentMainMovie(moviesData[randomIndex]);\n      } else {\n        setError('Нет доступных фильмов.');\n        setTopMovies([]);\n        setCurrentMainMovie(null);\n      }\n    } catch (err: any) {\n      console.error('Ошибка при загрузке фильмов:', err);\n      setError(err?.response?.data?.message || err.message || 'Ошибка при загрузке фильмов.');\n      setTopMovies([]);\n      setCurrentMainMovie(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadMovies();\n  }, [loadMovies]);\n\n  const isMainMovieFavorite = currentMainMovie\n    ? favoriteMovieIds.includes(currentMainMovie.id.toString())\n    : false;\n\n  const trailerYoutubeId = currentTrailer?.url;\n\n  return (\n    <div className=\"home-page\">\n      {currentMainMovie ? (\n        <MainSection\n          movie={currentMainMovie}\n          onOpenTrailer={onOpenTrailer}\n          onAddToFavorites={(id: string) => handleFavoriteToggle(id, isMainMovieFavorite)}\n          onRemove={onRemove}\n          onOpenMoviePage={onOpenMoviePage}\n          isFavorite={isMainMovieFavorite}\n          onUpdateMovie={loadMovies}\n          currentUser={currentUser}         \n          onOpenAuthModal={onOpenAuthModal}\n        />\n      ) : null}\n\n      <BlockMovies\n        movies={topMovies}\n        onOpenTrailer={onOpenTrailer}\n        onOpenMoviePage={onOpenMoviePage}\n        onRemove={onRemove}\n        isFavoritesList={false}\n        favoriteMovieIds={favoriteMovieIds}\n        onFavoriteToggle={handleFavoriteToggle}\n      />\n\n      <TrailerModal\n        isOpen={isTrailerModalOpen}\n        onRequestClose={handleCloseTrailer}\n        trailerYoutubeId={trailerYoutubeId}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}