{"ast":null,"code":"import _superPropGet from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _classPrivateMethodInitSpec from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateGetter from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/classPrivateGetter.js\";\nimport _classPrivateFieldSet from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _assertClassBrand from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\n/* global chrome */\nimport { RemotePlayback } from './castable-remote-playback.js';\nimport { privateProps, requiresCastFramework, loadCastFramework, currentSession, getDefaultCastOptions, isHls, getPlaylistSegmentFormat } from './castable-utils.js';\n\n/**\n * CastableMediaMixin\n *\n * This mixin function provides a way to compose multiple classes.\n * @see https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n *\n * @param  {HTMLMediaElement} superclass - HTMLMediaElement or an extended class of it.\n * @return {CastableMedia}\n */\nexport const CastableMediaMixin = superclass => {\n  var _CastableMedia, _localState, _castOptions, _castCustomData, _remote, _CastableMedia_brand, _superclass$observedA;\n  return _localState = /*#__PURE__*/new WeakMap(), _castOptions = /*#__PURE__*/new WeakMap(), _castCustomData = /*#__PURE__*/new WeakMap(), _remote = /*#__PURE__*/new WeakMap(), _CastableMedia_brand = /*#__PURE__*/new WeakSet(), _CastableMedia = class CastableMedia extends superclass {\n    constructor() {\n      super(...arguments);\n      _classPrivateMethodInitSpec(this, _CastableMedia_brand);\n      _classPrivateFieldInitSpec(this, _localState, {\n        paused: false\n      });\n      _classPrivateFieldInitSpec(this, _castOptions, getDefaultCastOptions());\n      _classPrivateFieldInitSpec(this, _castCustomData, void 0);\n      _classPrivateFieldInitSpec(this, _remote, void 0);\n    }\n    get remote() {\n      if (_classPrivateFieldGet(_remote, this)) return _classPrivateFieldGet(_remote, this);\n      if (requiresCastFramework()) {\n        // No need to load the Cast framework if it's disabled.\n        if (!this.disableRemotePlayback) {\n          loadCastFramework();\n        }\n        privateProps.set(this, {\n          loadOnPrompt: () => _assertClassBrand(_CastableMedia_brand, this, _loadOnPrompt).call(this)\n        });\n        return _classPrivateFieldSet(_remote, this, new RemotePlayback(this));\n      }\n      return super.remote;\n    }\n    attributeChangedCallback(attrName, oldValue, newValue) {\n      super.attributeChangedCallback(attrName, oldValue, newValue);\n      if (attrName === 'cast-receiver' && newValue) {\n        _classPrivateFieldGet(_castOptions, this).receiverApplicationId = newValue;\n        return;\n      }\n      if (!_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) return;\n      switch (attrName) {\n        case 'cast-stream-type':\n        case 'cast-src':\n          this.load();\n          break;\n      }\n    }\n    async load() {\n      var _super$currentTime, _currentSession;\n      if (!_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) return super.load();\n      const mediaInfo = new chrome.cast.media.MediaInfo(this.castSrc, this.castContentType);\n      mediaInfo.customData = this.castCustomData;\n\n      // Manually add text tracks with a `src` attribute.\n      // M3U8's load text tracks in the receiver, handle these in the media loaded event.\n      const subtitles = [...this.querySelectorAll('track')].filter(_ref => {\n        let {\n          kind,\n          src\n        } = _ref;\n        return src && (kind === 'subtitles' || kind === 'captions');\n      });\n      const activeTrackIds = [];\n      let textTrackIdCount = 0;\n      if (subtitles.length) {\n        mediaInfo.tracks = subtitles.map(trackEl => {\n          const trackId = ++textTrackIdCount;\n          // only activate 1 subtitle text track.\n          if (activeTrackIds.length === 0 && trackEl.track.mode === 'showing') {\n            activeTrackIds.push(trackId);\n          }\n          const track = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n          track.trackContentId = trackEl.src;\n          track.trackContentType = 'text/vtt';\n          track.subtype = trackEl.kind === 'captions' ? chrome.cast.media.TextTrackType.CAPTIONS : chrome.cast.media.TextTrackType.SUBTITLES;\n          track.name = trackEl.label;\n          track.language = trackEl.srclang;\n          return track;\n        });\n      }\n      if (this.castStreamType === 'live') {\n        mediaInfo.streamType = chrome.cast.media.StreamType.LIVE;\n      } else {\n        mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;\n      }\n      mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();\n      mediaInfo.metadata.title = this.title;\n      mediaInfo.metadata.images = [{\n        url: this.poster\n      }];\n      if (isHls(this.castSrc)) {\n        const segmentFormat = await getPlaylistSegmentFormat(this.castSrc);\n        const isFragmentedMP4 = (segmentFormat === null || segmentFormat === void 0 ? void 0 : segmentFormat.includes('m4s')) || (segmentFormat === null || segmentFormat === void 0 ? void 0 : segmentFormat.includes('mp4'));\n        if (isFragmentedMP4) {\n          mediaInfo.hlsSegmentFormat = chrome.cast.media.HlsSegmentFormat.FMP4;\n          mediaInfo.hlsVideoSegmentFormat = chrome.cast.media.HlsVideoSegmentFormat.FMP4;\n        }\n      }\n      const request = new chrome.cast.media.LoadRequest(mediaInfo);\n      request.currentTime = (_super$currentTime = super.currentTime) !== null && _super$currentTime !== void 0 ? _super$currentTime : 0;\n      request.autoplay = !_classPrivateFieldGet(_localState, this).paused;\n      request.activeTrackIds = activeTrackIds;\n      await ((_currentSession = currentSession()) === null || _currentSession === void 0 ? void 0 : _currentSession.loadMedia(request));\n      this.dispatchEvent(new Event('volumechange'));\n    }\n    play() {\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) {\n        if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).isPaused) {\n          var _classPrivateGetter$c;\n          (_classPrivateGetter$c = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).controller) === null || _classPrivateGetter$c === void 0 || _classPrivateGetter$c.playOrPause();\n        }\n        return;\n      }\n      return super.play();\n    }\n    pause() {\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) {\n        if (!_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).isPaused) {\n          var _classPrivateGetter$c2;\n          (_classPrivateGetter$c2 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).controller) === null || _classPrivateGetter$c2 === void 0 || _classPrivateGetter$c2.playOrPause();\n        }\n        return;\n      }\n      super.pause();\n    }\n\n    /**\n     * @see https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastOptions\n     * @readonly\n     *\n     * @typedef {Object} CastOptions\n     * @property {string} [receiverApplicationId='CC1AD845'] - The app id of the cast receiver.\n     * @property {string} [autoJoinPolicy='origin_scoped'] - The auto join policy.\n     * @property {string} [language='en-US'] - The language to use for the cast receiver.\n     * @property {boolean} [androidReceiverCompatible=false] - Whether to use the Cast Connect.\n     * @property {boolean} [resumeSavedSession=true] - Whether to resume the last session.\n     *\n     * @return {CastOptions}\n     */\n    get castOptions() {\n      return _classPrivateFieldGet(_castOptions, this);\n    }\n    get castReceiver() {\n      var _this$getAttribute;\n      return (_this$getAttribute = this.getAttribute('cast-receiver')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : undefined;\n    }\n    set castReceiver(val) {\n      if (this.castReceiver == val) return;\n      this.setAttribute('cast-receiver', \"\".concat(val));\n    }\n\n    // Allow the cast source url to be different than <video src>, could be a blob.\n    get castSrc() {\n      var _ref2, _this$getAttribute2, _this$querySelector;\n      // Try the first <source src> for usage with even more native markup.\n      return (_ref2 = (_this$getAttribute2 = this.getAttribute('cast-src')) !== null && _this$getAttribute2 !== void 0 ? _this$getAttribute2 : (_this$querySelector = this.querySelector('source')) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.src) !== null && _ref2 !== void 0 ? _ref2 : this.currentSrc;\n    }\n    set castSrc(val) {\n      if (this.castSrc == val) return;\n      this.setAttribute('cast-src', \"\".concat(val));\n    }\n    get castContentType() {\n      var _this$getAttribute3;\n      return (_this$getAttribute3 = this.getAttribute('cast-content-type')) !== null && _this$getAttribute3 !== void 0 ? _this$getAttribute3 : undefined;\n    }\n    set castContentType(val) {\n      this.setAttribute('cast-content-type', \"\".concat(val));\n    }\n    get castStreamType() {\n      var _ref3, _this$getAttribute4;\n      // NOTE: Per https://github.com/video-dev/media-ui-extensions/issues/3 `streamType` may yield `\"unknown\"`\n      return (_ref3 = (_this$getAttribute4 = this.getAttribute('cast-stream-type')) !== null && _this$getAttribute4 !== void 0 ? _this$getAttribute4 : this.streamType) !== null && _ref3 !== void 0 ? _ref3 : undefined;\n    }\n    set castStreamType(val) {\n      this.setAttribute('cast-stream-type', \"\".concat(val));\n    }\n    get castCustomData() {\n      return _classPrivateFieldGet(_castCustomData, this);\n    }\n    set castCustomData(val) {\n      const valType = typeof val;\n      if (!['object', 'undefined'].includes(valType)) {\n        console.error(\"castCustomData must be nullish or an object but value was of type \".concat(valType));\n        return;\n      }\n      _classPrivateFieldSet(_castCustomData, this, val);\n    }\n    get readyState() {\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) {\n        switch (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).playerState) {\n          case chrome.cast.media.PlayerState.IDLE:\n            return 0;\n          case chrome.cast.media.PlayerState.BUFFERING:\n            return 2;\n          default:\n            return 3;\n        }\n      }\n      return super.readyState;\n    }\n    get paused() {\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) return _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).isPaused;\n      return super.paused;\n    }\n    get muted() {\n      var _classPrivateGetter2;\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) return (_classPrivateGetter2 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) === null || _classPrivateGetter2 === void 0 ? void 0 : _classPrivateGetter2.isMuted;\n      return super.muted;\n    }\n    set muted(val) {\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) {\n        if (val && !_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).isMuted || !val && _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).isMuted) {\n          var _classPrivateGetter$c3;\n          (_classPrivateGetter$c3 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).controller) === null || _classPrivateGetter$c3 === void 0 || _classPrivateGetter$c3.muteOrUnmute();\n        }\n        return;\n      }\n      super.muted = val;\n    }\n    get volume() {\n      var _classPrivateGetter$v, _classPrivateGetter3;\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) return (_classPrivateGetter$v = (_classPrivateGetter3 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) === null || _classPrivateGetter3 === void 0 ? void 0 : _classPrivateGetter3.volumeLevel) !== null && _classPrivateGetter$v !== void 0 ? _classPrivateGetter$v : 1;\n      return super.volume;\n    }\n    set volume(val) {\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) {\n        var _classPrivateGetter$c4;\n        _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).volumeLevel = +val;\n        (_classPrivateGetter$c4 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).controller) === null || _classPrivateGetter$c4 === void 0 || _classPrivateGetter$c4.setVolumeLevel();\n        return;\n      }\n      super.volume = val;\n    }\n    get duration() {\n      var _classPrivateGetter4;\n      // castPlayer duration returns `0` when no media is loaded.\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer) && (_classPrivateGetter4 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) !== null && _classPrivateGetter4 !== void 0 && _classPrivateGetter4.isMediaLoaded) {\n        var _classPrivateGetter$d, _classPrivateGetter5;\n        return (_classPrivateGetter$d = (_classPrivateGetter5 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) === null || _classPrivateGetter5 === void 0 ? void 0 : _classPrivateGetter5.duration) !== null && _classPrivateGetter$d !== void 0 ? _classPrivateGetter$d : NaN;\n      }\n      return super.duration;\n    }\n    get currentTime() {\n      var _classPrivateGetter6;\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer) && (_classPrivateGetter6 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) !== null && _classPrivateGetter6 !== void 0 && _classPrivateGetter6.isMediaLoaded) {\n        var _classPrivateGetter$c5, _classPrivateGetter7;\n        return (_classPrivateGetter$c5 = (_classPrivateGetter7 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) === null || _classPrivateGetter7 === void 0 ? void 0 : _classPrivateGetter7.currentTime) !== null && _classPrivateGetter$c5 !== void 0 ? _classPrivateGetter$c5 : 0;\n      }\n      return super.currentTime;\n    }\n    set currentTime(val) {\n      if (_classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer)) {\n        var _classPrivateGetter$c6;\n        _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).currentTime = val;\n        (_classPrivateGetter$c6 = _classPrivateGetter(_CastableMedia_brand, this, _get_castPlayer).controller) === null || _classPrivateGetter$c6 === void 0 || _classPrivateGetter$c6.seek();\n        return;\n      }\n      super.currentTime = val;\n    }\n  }, _defineProperty(_CastableMedia, \"observedAttributes\", [...((_superclass$observedA = superclass.observedAttributes) !== null && _superclass$observedA !== void 0 ? _superclass$observedA : []), 'cast-src', 'cast-content-type', 'cast-stream-type', 'cast-receiver']), _CastableMedia;\n  function _get_castPlayer(_this) {\n    var _privateProps$get, _privateProps$get$get;\n    return (_privateProps$get = privateProps.get(_this.remote)) === null || _privateProps$get === void 0 || (_privateProps$get$get = _privateProps$get.getCastPlayer) === null || _privateProps$get$get === void 0 ? void 0 : _privateProps$get$get.call(_privateProps$get);\n  }\n  async function _loadOnPrompt() {\n    // Pause locally when the session is created.\n    _classPrivateFieldGet(_localState, this).paused = _superPropGet(_CastableMedia.prototype, \"paused\", this);\n    _superPropGet(_CastableMedia.prototype, \"pause\", this, 2)([]);\n\n    // Sync over the muted state but not volume, 100% is different on TV's :P\n    this.muted = _superPropGet(_CastableMedia.prototype, \"muted\", this);\n    try {\n      await this.load();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n};\nexport const CastableVideoMixin = CastableMediaMixin;","map":{"version":3,"names":["RemotePlayback","privateProps","requiresCastFramework","loadCastFramework","currentSession","getDefaultCastOptions","isHls","getPlaylistSegmentFormat","CastableMediaMixin","superclass","_CastableMedia","_localState","_castOptions","_castCustomData","_remote","_CastableMedia_brand","_superclass$observedA","WeakMap","WeakSet","CastableMedia","constructor","arguments","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","paused","remote","_classPrivateFieldGet","disableRemotePlayback","set","loadOnPrompt","_assertClassBrand","_loadOnPrompt","call","_classPrivateFieldSet","attributeChangedCallback","attrName","oldValue","newValue","receiverApplicationId","_classPrivateGetter","_get_castPlayer","load","_super$currentTime","_currentSession","mediaInfo","chrome","cast","media","MediaInfo","castSrc","castContentType","customData","castCustomData","subtitles","querySelectorAll","filter","_ref","kind","src","activeTrackIds","textTrackIdCount","length","tracks","map","trackEl","trackId","track","mode","push","Track","TrackType","TEXT","trackContentId","trackContentType","subtype","TextTrackType","CAPTIONS","SUBTITLES","name","label","language","srclang","castStreamType","streamType","StreamType","LIVE","BUFFERED","metadata","GenericMediaMetadata","title","images","url","poster","segmentFormat","isFragmentedMP4","includes","hlsSegmentFormat","HlsSegmentFormat","FMP4","hlsVideoSegmentFormat","HlsVideoSegmentFormat","request","LoadRequest","currentTime","autoplay","loadMedia","dispatchEvent","Event","play","isPaused","_classPrivateGetter$c","controller","playOrPause","pause","_classPrivateGetter$c2","castOptions","castReceiver","_this$getAttribute","getAttribute","undefined","val","setAttribute","concat","_ref2","_this$getAttribute2","_this$querySelector","querySelector","currentSrc","_this$getAttribute3","_ref3","_this$getAttribute4","valType","console","error","readyState","playerState","PlayerState","IDLE","BUFFERING","muted","_classPrivateGetter2","isMuted","_classPrivateGetter$c3","muteOrUnmute","volume","_classPrivateGetter$v","_classPrivateGetter3","volumeLevel","_classPrivateGetter$c4","setVolumeLevel","duration","_classPrivateGetter4","isMediaLoaded","_classPrivateGetter$d","_classPrivateGetter5","NaN","_classPrivateGetter6","_classPrivateGetter$c5","_classPrivateGetter7","_classPrivateGetter$c6","seek","_defineProperty","observedAttributes","_this","_privateProps$get","_privateProps$get$get","get","getCastPlayer","_superPropGet","prototype","err","CastableVideoMixin"],"sources":["d:/Users/User55/Documents/GitHub/Vk-marusya-app/node_modules/castable-video/castable-mixin.js"],"sourcesContent":["/* global chrome */\nimport { RemotePlayback } from './castable-remote-playback.js';\nimport {\n  privateProps,\n  requiresCastFramework,\n  loadCastFramework,\n  currentSession,\n  getDefaultCastOptions,\n  isHls,\n  getPlaylistSegmentFormat\n} from './castable-utils.js';\n\n/**\n * CastableMediaMixin\n *\n * This mixin function provides a way to compose multiple classes.\n * @see https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n *\n * @param  {HTMLMediaElement} superclass - HTMLMediaElement or an extended class of it.\n * @return {CastableMedia}\n */\nexport const CastableMediaMixin = (superclass) =>\n  class CastableMedia extends superclass {\n\n    static observedAttributes = [\n      ...(superclass.observedAttributes ?? []),\n      'cast-src',\n      'cast-content-type',\n      'cast-stream-type',\n      'cast-receiver',\n    ];\n\n    #localState = { paused: false };\n    #castOptions = getDefaultCastOptions();\n    #castCustomData;\n    #remote;\n\n    get remote() {\n      if (this.#remote) return this.#remote;\n\n      if (requiresCastFramework()) {\n        // No need to load the Cast framework if it's disabled.\n        if (!this.disableRemotePlayback) {\n          loadCastFramework();\n        }\n\n        privateProps.set(this, {\n          loadOnPrompt: () => this.#loadOnPrompt()\n        });\n\n        return (this.#remote = new RemotePlayback(this));\n      }\n\n      return super.remote;\n    }\n\n    get #castPlayer() {\n      return privateProps.get(this.remote)?.getCastPlayer?.();\n    }\n\n    attributeChangedCallback(attrName, oldValue, newValue) {\n      super.attributeChangedCallback(attrName, oldValue, newValue);\n\n      if (attrName === 'cast-receiver' && newValue) {\n        this.#castOptions.receiverApplicationId = newValue;\n        return;\n      }\n\n      if (!this.#castPlayer) return;\n\n      switch (attrName) {\n        case 'cast-stream-type':\n        case 'cast-src':\n          this.load();\n          break;\n      }\n    }\n\n    async #loadOnPrompt() {\n      // Pause locally when the session is created.\n      this.#localState.paused = super.paused;\n      super.pause();\n\n      // Sync over the muted state but not volume, 100% is different on TV's :P\n      this.muted = super.muted;\n\n      try {\n        await this.load();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    async load() {\n      if (!this.#castPlayer) return super.load();\n\n      const mediaInfo = new chrome.cast.media.MediaInfo(this.castSrc, this.castContentType);\n      mediaInfo.customData = this.castCustomData;\n\n      // Manually add text tracks with a `src` attribute.\n      // M3U8's load text tracks in the receiver, handle these in the media loaded event.\n      const subtitles = [...this.querySelectorAll('track')].filter(\n        ({ kind, src }) => src && (kind === 'subtitles' || kind === 'captions')\n      );\n\n      const activeTrackIds = [];\n      let textTrackIdCount = 0;\n\n      if (subtitles.length) {\n        mediaInfo.tracks = subtitles.map((trackEl) => {\n          const trackId = ++textTrackIdCount;\n          // only activate 1 subtitle text track.\n          if (activeTrackIds.length === 0 && trackEl.track.mode === 'showing') {\n            activeTrackIds.push(trackId);\n          }\n\n          const track = new chrome.cast.media.Track(\n            trackId,\n            chrome.cast.media.TrackType.TEXT\n          );\n          track.trackContentId = trackEl.src;\n          track.trackContentType = 'text/vtt';\n          track.subtype =\n            trackEl.kind === 'captions'\n              ? chrome.cast.media.TextTrackType.CAPTIONS\n              : chrome.cast.media.TextTrackType.SUBTITLES;\n          track.name = trackEl.label;\n          track.language = trackEl.srclang;\n          return track;\n        });\n      }\n\n      if (this.castStreamType === 'live') {\n        mediaInfo.streamType = chrome.cast.media.StreamType.LIVE;\n      } else {\n        mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;\n      }\n\n      mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();\n      mediaInfo.metadata.title = this.title;\n      mediaInfo.metadata.images = [{ url: this.poster }];\n\n      if (isHls(this.castSrc)) {\n        const segmentFormat = await getPlaylistSegmentFormat(this.castSrc);\n        const isFragmentedMP4 = segmentFormat?.includes('m4s') || segmentFormat?.includes('mp4');\n        if (isFragmentedMP4) {\n          mediaInfo.hlsSegmentFormat = chrome.cast.media.HlsSegmentFormat.FMP4;\n          mediaInfo.hlsVideoSegmentFormat = chrome.cast.media.HlsVideoSegmentFormat.FMP4;\n        }\n      }\n\n      const request = new chrome.cast.media.LoadRequest(mediaInfo);\n      request.currentTime = super.currentTime ?? 0;\n      request.autoplay = !this.#localState.paused;\n      request.activeTrackIds = activeTrackIds;\n\n      await currentSession()?.loadMedia(request);\n\n      this.dispatchEvent(new Event('volumechange'));\n    }\n\n    play() {\n      if (this.#castPlayer) {\n        if (this.#castPlayer.isPaused) {\n          this.#castPlayer.controller?.playOrPause();\n        }\n        return;\n      }\n      return super.play();\n    }\n\n    pause() {\n      if (this.#castPlayer) {\n        if (!this.#castPlayer.isPaused) {\n          this.#castPlayer.controller?.playOrPause();\n        }\n        return;\n      }\n      super.pause();\n    }\n\n    /**\n     * @see https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastOptions\n     * @readonly\n     *\n     * @typedef {Object} CastOptions\n     * @property {string} [receiverApplicationId='CC1AD845'] - The app id of the cast receiver.\n     * @property {string} [autoJoinPolicy='origin_scoped'] - The auto join policy.\n     * @property {string} [language='en-US'] - The language to use for the cast receiver.\n     * @property {boolean} [androidReceiverCompatible=false] - Whether to use the Cast Connect.\n     * @property {boolean} [resumeSavedSession=true] - Whether to resume the last session.\n     *\n     * @return {CastOptions}\n     */\n    get castOptions() {\n      return this.#castOptions;\n    }\n\n    get castReceiver() {\n      return this.getAttribute('cast-receiver') ?? undefined;\n    }\n\n    set castReceiver(val) {\n      if (this.castReceiver == val) return;\n      this.setAttribute('cast-receiver', `${val}`);\n    }\n\n    // Allow the cast source url to be different than <video src>, could be a blob.\n    get castSrc() {\n      // Try the first <source src> for usage with even more native markup.\n      return (\n        this.getAttribute('cast-src') ??\n        this.querySelector('source')?.src ??\n        this.currentSrc\n      );\n    }\n\n    set castSrc(val) {\n      if (this.castSrc == val) return;\n      this.setAttribute('cast-src', `${val}`);\n    }\n\n    get castContentType() {\n      return this.getAttribute('cast-content-type') ?? undefined;\n    }\n\n    set castContentType(val) {\n      this.setAttribute('cast-content-type', `${val}`);\n    }\n\n    get castStreamType() {\n      // NOTE: Per https://github.com/video-dev/media-ui-extensions/issues/3 `streamType` may yield `\"unknown\"`\n      return this.getAttribute('cast-stream-type') ?? this.streamType ?? undefined;\n    }\n\n    set castStreamType(val) {\n      this.setAttribute('cast-stream-type', `${val}`);\n    }\n\n    get castCustomData() {\n      return this.#castCustomData;\n    }\n\n    set castCustomData(val) {\n      const valType = typeof val;\n      if (!['object', 'undefined'].includes(valType)) {\n        console.error(`castCustomData must be nullish or an object but value was of type ${valType}`);\n        return;\n      }\n\n      this.#castCustomData = val;\n    }\n\n    get readyState() {\n      if (this.#castPlayer) {\n        switch (this.#castPlayer.playerState) {\n          case chrome.cast.media.PlayerState.IDLE:\n            return 0;\n          case chrome.cast.media.PlayerState.BUFFERING:\n            return 2;\n          default:\n            return 3;\n        }\n      }\n      return super.readyState;\n    }\n\n    get paused() {\n      if (this.#castPlayer) return this.#castPlayer.isPaused;\n      return super.paused;\n    }\n\n    get muted() {\n      if (this.#castPlayer) return this.#castPlayer?.isMuted;\n      return super.muted;\n    }\n\n    set muted(val) {\n      if (this.#castPlayer) {\n        if (\n          (val && !this.#castPlayer.isMuted) ||\n          (!val && this.#castPlayer.isMuted)\n        ) {\n          this.#castPlayer.controller?.muteOrUnmute();\n        }\n        return;\n      }\n      super.muted = val;\n    }\n\n    get volume() {\n      if (this.#castPlayer) return this.#castPlayer?.volumeLevel ?? 1;\n      return super.volume;\n    }\n\n    set volume(val) {\n      if (this.#castPlayer) {\n        this.#castPlayer.volumeLevel = +val;\n        this.#castPlayer.controller?.setVolumeLevel();\n        return;\n      }\n      super.volume = val;\n    }\n\n    get duration() {\n      // castPlayer duration returns `0` when no media is loaded.\n      if (this.#castPlayer && this.#castPlayer?.isMediaLoaded) {\n        return this.#castPlayer?.duration ?? NaN;\n      }\n      return super.duration;\n    }\n\n    get currentTime() {\n      if (this.#castPlayer && this.#castPlayer?.isMediaLoaded) {\n        return this.#castPlayer?.currentTime ?? 0;\n      }\n      return super.currentTime;\n    }\n\n    set currentTime(val) {\n      if (this.#castPlayer) {\n        this.#castPlayer.currentTime = val;\n        this.#castPlayer.controller?.seek();\n        return;\n      }\n      super.currentTime = val;\n    }\n  };\n\nexport const CastableVideoMixin = CastableMediaMixin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}